;; Autogenerated code, don't edit! ;;
(ns csound.opcodes
  (:require [cljs.spec.alpha :as s]
            [cljs.spec.test.alpha :as stest]
            [csound.core :refer [*global*
                                 ast-node
                                 AudioSignal 
                                 ControlSignal
                                 FrequencySignal
                                 Variable String 
                                 AudioArray 
                                 ControlArray
                                 VariableArray 
                                 StringArray IO
                                 ScoreParameter
                                 valid-f? valid-f?*
                                 valid-x? valid-x?*
                                 valid-S? valid-S?*
                                 valid-SArr? valid-SArr?*
                                 valid-kArr? valid-kArr?*
                                 valid-ar? valid-ar?*
                                 valid-i? valid-i?*
                                 valid-kr? valid-kr?*
                                 valid-aArr? valid-aArr?*
                                 valid-iArr? valid-iArr?*]]))

(defn mac
  {:arglists '([& karg1* aarg2* karg3* aarg4* karg5* aarg6* karg7* aarg8* karg9* aarg10* karg11* aarg12* karg13* aarg14* karg15* aarg16*])}
  [& [ arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "mac"
                      [arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16*]
                      *global*)]
    (new out-types ast)))

(s/fdef mac
  :args (s/cat :arg1* valid-kr?* :arg2* valid-ar?* :arg3* valid-kr?* :arg4* valid-ar?* :arg5* valid-kr?* :arg6* valid-ar?* :arg7* valid-kr?* :arg8* valid-ar?* :arg9* valid-kr?* :arg10* valid-ar?* :arg11* valid-kr?* :arg12* valid-ar?* :arg13* valid-kr?* :arg14* valid-ar?* :arg15* valid-kr?* :arg16* valid-ar?* ))
(stest/instrument `mac)

(defn mac:a
  {:arglists '([& karg1* aarg2* karg3* aarg4* karg5* aarg6* karg7* aarg8* karg9* aarg10* karg11* aarg12* karg13* aarg14* karg15* aarg16*])}
  [& [ arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "mac"
                      [arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16*]
                      *global*)]
    (new out-types ast)))

(s/fdef mac:a
  :args (s/cat :arg1* valid-kr?* :arg2* valid-ar?* :arg3* valid-kr?* :arg4* valid-ar?* :arg5* valid-kr?* :arg6* valid-ar?* :arg7* valid-kr?* :arg8* valid-ar?* :arg9* valid-kr?* :arg10* valid-ar?* :arg11* valid-kr?* :arg12* valid-ar?* :arg13* valid-kr?* :arg14* valid-ar?* :arg15* valid-kr?* :arg16* valid-ar?* ))
(stest/instrument `mac:a)

(defn phaser2
  {:arglists '([asig kfreq kq kord kmode ksep kfeedback])}
  [sig freq q ord mode sep feedback]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "phaser2"
                      [sig freq q ord mode sep feedback]
                      *global*)]
    (new out-types ast)))

(s/fdef phaser2
  :args (s/cat :sig valid-ar? :freq valid-kr? :q valid-kr? :ord valid-kr? :mode valid-kr? :sep valid-kr? :feedback valid-kr? ))
(stest/instrument `phaser2)

(defn phaser2:a
  {:arglists '([asig kfreq kq kord kmode ksep kfeedback])}
  [sig freq q ord mode sep feedback]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "phaser2"
                      [sig freq q ord mode sep feedback]
                      *global*)]
    (new out-types ast)))

(s/fdef phaser2:a
  :args (s/cat :sig valid-ar? :freq valid-kr? :q valid-kr? :ord valid-kr? :mode valid-kr? :sep valid-kr? :feedback valid-kr? ))
(stest/instrument `phaser2:a)

(defn release
  {:arglists '()}
  []
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "release"
                      []
                      *global*)]
    (new out-types ast)))


(defn release:k
  {:arglists '()}
  []
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "release"
                      []
                      *global*)]
    (new out-types ast)))


(defn outletkid
  {:arglists '([Sname SinstanceID ksignal])}
  [name instanceID signal]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outletkid"
                      [name instanceID signal]
                      *global*)]
    (new out-types ast)))

(s/fdef outletkid
  :args (s/cat :name valid-S? :instanceID valid-S? :signal valid-kr? ))
(stest/instrument `outletkid)

(defn chebyshevpoly
  {:arglists '([ain & karg1* karg2* karg3* karg4* karg5* karg6* karg7* karg8* karg9* karg10* karg11* karg12* karg13* karg14* karg15* karg16*])}
  [in & [ arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "chebyshevpoly"
                      [in arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16*]
                      *global*)]
    (new out-types ast)))

(s/fdef chebyshevpoly
  :args (s/cat :in valid-ar? :arg1* valid-kr?* :arg2* valid-kr?* :arg3* valid-kr?* :arg4* valid-kr?* :arg5* valid-kr?* :arg6* valid-kr?* :arg7* valid-kr?* :arg8* valid-kr?* :arg9* valid-kr?* :arg10* valid-kr?* :arg11* valid-kr?* :arg12* valid-kr?* :arg13* valid-kr?* :arg14* valid-kr?* :arg15* valid-kr?* :arg16* valid-kr?* ))
(stest/instrument `chebyshevpoly)

(defn chebyshevpoly:a
  {:arglists '([ain & karg1* karg2* karg3* karg4* karg5* karg6* karg7* karg8* karg9* karg10* karg11* karg12* karg13* karg14* karg15* karg16*])}
  [in & [ arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "chebyshevpoly"
                      [in arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16*]
                      *global*)]
    (new out-types ast)))

(s/fdef chebyshevpoly:a
  :args (s/cat :in valid-ar? :arg1* valid-kr?* :arg2* valid-kr?* :arg3* valid-kr?* :arg4* valid-kr?* :arg5* valid-kr?* :arg6* valid-kr?* :arg7* valid-kr?* :arg8* valid-kr?* :arg9* valid-kr?* :arg10* valid-kr?* :arg11* valid-kr?* :arg12* valid-kr?* :arg13* valid-kr?* :arg14* valid-kr?* :arg15* valid-kr?* :arg16* valid-kr?* ))
(stest/instrument `chebyshevpoly:a)

(defn tab_i
  {:arglists '([iindex itable & imode*])}
  [index table & [ mode* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "tab_i"
                      [index table mode*]
                      *global*)]
    (new out-types ast)))

(s/fdef tab_i
  :args (s/cat :index valid-i? :table valid-i? :mode* valid-i?* ))
(stest/instrument `tab_i)

(defn tab_i:i
  {:arglists '([iindex itable & imode*])}
  [index table & [ mode* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "tab_i"
                      [index table mode*]
                      *global*)]
    (new out-types ast)))

(s/fdef tab_i:i
  :args (s/cat :index valid-i? :table valid-i? :mode* valid-i?* ))
(stest/instrument `tab_i:i)

(defn lpf18
  {:arglists '([asig xcutoff-frequency xresonance xdistortion & iskip*])}
  [sig cutoff-frequency resonance distortion & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "lpf18"
                      [sig cutoff-frequency resonance distortion skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef lpf18
  :args (s/cat :sig valid-ar? :cutoff-frequency valid-x? :resonance valid-x? :distortion valid-x? :skip* valid-i?* ))
(stest/instrument `lpf18)

(defn lpf18:a
  {:arglists '([asig xcutoff-frequency xresonance xdistortion & iskip*])}
  [sig cutoff-frequency resonance distortion & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "lpf18"
                      [sig cutoff-frequency resonance distortion skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef lpf18:a
  :args (s/cat :sig valid-ar? :cutoff-frequency valid-x? :resonance valid-x? :distortion valid-x? :skip* valid-i?* ))
(stest/instrument `lpf18:a)

(defn table
  {:arglists '([xindex itable & ixmode* ixoff* iwrap*] [iindex itable & ixmode* ixoff* iwrap*] [xindex itable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "table"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef table
  :args (s/alt
         :xiiii (s/cat :index valid-x? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* )
         ))
(stest/instrument `table)

(defn table:a
  {:arglists '([xindex itable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "table"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef table:a
  :args (s/cat :index valid-x? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* ))
(stest/instrument `table:a)

(defn table:i
  {:arglists '([iindex itable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "table"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef table:i
  :args (s/cat :index valid-i? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* ))
(stest/instrument `table:i)

(defn table:k
  {:arglists '([xindex itable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "table"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef table:k
  :args (s/cat :index valid-x? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* ))
(stest/instrument `table:k)

(defn ftloadk
  {:arglists '([Sfilename ktrig iflag & ifn1* ifn2* ifn3* ifn4* ifn5* ifn6* ifn7* ifn8* ifn9* ifn10* ifn11* ifn12* ifn13* ifn14* ifn15* ifn16*] [ifilename ktrig iflag & ifn1* ifn2* ifn3* ifn4* ifn5* ifn6* ifn7* ifn8* ifn9* ifn10* ifn11* ifn12* ifn13* ifn14* ifn15* ifn16*])}
  [filename trig flag & [ fn1* fn2* fn3* fn4* fn5* fn6* fn7* fn8* fn9* fn10* fn11* fn12* fn13* fn14* fn15* fn16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "ftloadk"
                      [filename trig flag fn1* fn2* fn3* fn4* fn5* fn6* fn7* fn8* fn9* fn10* fn11* fn12* fn13* fn14* fn15* fn16*]
                      *global*)]
    (new out-types ast)))

(s/fdef ftloadk
  :args (s/alt
         :Skiiiiiiiiiiiiiiiii (s/cat :filename valid-S? :trig valid-kr? :flag valid-i? :fn1* valid-i?* :fn2* valid-i?* :fn3* valid-i?* :fn4* valid-i?* :fn5* valid-i?* :fn6* valid-i?* :fn7* valid-i?* :fn8* valid-i?* :fn9* valid-i?* :fn10* valid-i?* :fn11* valid-i?* :fn12* valid-i?* :fn13* valid-i?* :fn14* valid-i?* :fn15* valid-i?* :fn16* valid-i?* )
         ))
(stest/instrument `ftloadk)

(defn fink
  {:arglists '([Sfilename iskipframes iformat & kin1* kin2* kin3* kin4* kin5* kin6* kin7* kin8* kin9* kin10* kin11* kin12* kin13* kin14* kin15* kin16*] [ifilename iskipframes iformat & kin1* kin2* kin3* kin4* kin5* kin6* kin7* kin8* kin9* kin10* kin11* kin12* kin13* kin14* kin15* kin16*])}
  [filename skipframes format & [ in1* in2* in3* in4* in5* in6* in7* in8* in9* in10* in11* in12* in13* in14* in15* in16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "fink"
                      [filename skipframes format in1* in2* in3* in4* in5* in6* in7* in8* in9* in10* in11* in12* in13* in14* in15* in16*]
                      *global*)]
    (new out-types ast)))

(s/fdef fink
  :args (s/alt
         :Siikkkkkkkkkkkkkkkk (s/cat :filename valid-S? :skipframes valid-i? :format valid-i? :in1* valid-kr?* :in2* valid-kr?* :in3* valid-kr?* :in4* valid-kr?* :in5* valid-kr?* :in6* valid-kr?* :in7* valid-kr?* :in8* valid-kr?* :in9* valid-kr?* :in10* valid-kr?* :in11* valid-kr?* :in12* valid-kr?* :in13* valid-kr?* :in14* valid-kr?* :in15* valid-kr?* :in16* valid-kr?* )
         ))
(stest/instrument `fink)

(defn reson
  {:arglists '([asig xcenter-frequency xbandwidth & iscale* iskip*])}
  [sig center-frequency bandwidth & [ scale* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "reson"
                      [sig center-frequency bandwidth scale* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef reson
  :args (s/cat :sig valid-ar? :center-frequency valid-x? :bandwidth valid-x? :scale* valid-i?* :skip* valid-i?* ))
(stest/instrument `reson)

(defn reson:a
  {:arglists '([asig xcenter-frequency xbandwidth & iscale* iskip*])}
  [sig center-frequency bandwidth & [ scale* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "reson"
                      [sig center-frequency bandwidth scale* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef reson:a
  :args (s/cat :sig valid-ar? :center-frequency valid-x? :bandwidth valid-x? :scale* valid-i?* :skip* valid-i?* ))
(stest/instrument `reson:a)

(defn inq
  {:arglists '()}
  []
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "inq"
                      []
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))


(defn sensekey
  {:arglists '()}
  []
  (let [out-types-quoted '[ControlSignal ControlSignal]
        out-types [ControlSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "sensekey"
                      []
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))


(defn cosseg
  {:arglists '([ia idur2 & ib1* idur2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*] [ia idur2 & ib1* idur2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a dur2 & [ b1* dur2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "cosseg"
                      [a dur2 b1* dur2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef cosseg
  :args (s/alt
         :iiiiiiiiiiiiiiiiii (s/cat :a valid-i? :dur2 valid-i? :b1* valid-i?* :dur2* valid-i?* :c3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* )
         ))
(stest/instrument `cosseg)

(defn cosseg:a
  {:arglists '([ia idur2 & ib1* idur2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a dur2 & [ b1* dur2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "cosseg"
                      [a dur2 b1* dur2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef cosseg:a
  :args (s/cat :a valid-i? :dur2 valid-i? :b1* valid-i?* :dur2* valid-i?* :c3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* ))
(stest/instrument `cosseg:a)

(defn cosseg:k
  {:arglists '([ia idur2 & ib1* idur2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a dur2 & [ b1* dur2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "cosseg"
                      [a dur2 b1* dur2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef cosseg:k
  :args (s/cat :a valid-i? :dur2 valid-i? :b1* valid-i?* :dur2* valid-i?* :c3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* ))
(stest/instrument `cosseg:k)

(defn imagesize
  {:arglists '([iimagenum])}
  [imagenum]
  (let [out-types-quoted '[Variable Variable]
        out-types [Variable Variable]
        ast (ast-node out-types-quoted
                      "imagesize"
                      [imagenum]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef imagesize
  :args (s/cat :imagenum valid-i? ))
(stest/instrument `imagesize)

(defn ampmidi
  {:arglists '([iscal & itable*])}
  [scal & [ table* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ampmidi"
                      [scal table*]
                      *global*)]
    (new out-types ast)))

(s/fdef ampmidi
  :args (s/cat :scal valid-i? :table* valid-i?* ))
(stest/instrument `ampmidi)

(defn ampmidi:i
  {:arglists '([iscal & itable*])}
  [scal & [ table* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ampmidi"
                      [scal table*]
                      *global*)]
    (new out-types ast)))

(s/fdef ampmidi:i
  :args (s/cat :scal valid-i? :table* valid-i?* ))
(stest/instrument `ampmidi:i)

(defn delay1
  {:arglists '([asig & iskip*])}
  [sig & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "delay1"
                      [sig skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef delay1
  :args (s/cat :sig valid-ar? :skip* valid-i?* ))
(stest/instrument `delay1)

(defn delay1:a
  {:arglists '([asig & iskip*])}
  [sig & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "delay1"
                      [sig skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef delay1:a
  :args (s/cat :sig valid-ar? :skip* valid-i?* ))
(stest/instrument `delay1:a)

(defn areson
  {:arglists '([asig acenter-frequency abandwidth & iscale* iskip*] [asig acenter-frequency kbandwidth & iscale* iskip*] [asig kcenter-frequency abandwidth & iscale* iskip*] [asig kcenter-frequency kbandwidth & iscale* iskip*])}
  [sig center-frequency bandwidth & [ scale* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "areson"
                      [sig center-frequency bandwidth scale* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef areson
  :args (s/alt
         :aaaii (s/cat :sig valid-ar? :center-frequency valid-ar? :bandwidth valid-ar? :scale* valid-i?* :skip* valid-i?* )
         ))
(stest/instrument `areson)

(defn areson:a
  {:arglists '([asig acenter-frequency abandwidth & iscale* iskip*] [asig acenter-frequency kbandwidth & iscale* iskip*] [asig kcenter-frequency abandwidth & iscale* iskip*] [asig kcenter-frequency kbandwidth & iscale* iskip*])}
  [sig center-frequency bandwidth & [ scale* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "areson"
                      [sig center-frequency bandwidth scale* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef areson:a
  :args (s/alt
         :aaaii (s/cat :sig valid-ar? :center-frequency valid-ar? :bandwidth valid-ar? :scale* valid-i?* :skip* valid-i?* )
         ))
(stest/instrument `areson:a)

(defn oscilikts
  {:arglists '([xamp xcps ktable async kphase & istor*])}
  [amp cps table sync phase & [ stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "oscilikts"
                      [amp cps table sync phase stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef oscilikts
  :args (s/cat :amp valid-x? :cps valid-x? :table valid-kr? :sync valid-ar? :phase valid-kr? :stor* valid-i?* ))
(stest/instrument `oscilikts)

(defn oscilikts:a
  {:arglists '([xamp xcps ktable async kphase & istor*])}
  [amp cps table sync phase & [ stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "oscilikts"
                      [amp cps table sync phase stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef oscilikts:a
  :args (s/cat :amp valid-x? :cps valid-x? :table valid-kr? :sync valid-ar? :phase valid-kr? :stor* valid-i?* ))
(stest/instrument `oscilikts:a)

(defn outipb
  {:arglists '([ichn ivalue imin imax])}
  [chn value min max]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outipb"
                      [chn value min max]
                      *global*)]
    (new out-types ast)))

(s/fdef outipb
  :args (s/cat :chn valid-i? :value valid-i? :min valid-i? :max valid-i? ))
(stest/instrument `outipb)

(defn window
  {:arglists '([kinArr & koff* itype*])}
  [in & [ off* type* ]]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "window"
                      [in off* type*]
                      *global*)]
    (new out-types ast)))

(s/fdef window
  :args (s/cat :in valid-kArr? :off* valid-kr?* :type* valid-i?* ))
(stest/instrument `window)

(defn window:kArr
  {:arglists '([kinArr & koff* itype*])}
  [in & [ off* type* ]]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "window"
                      [in off* type*]
                      *global*)]
    (new out-types ast)))

(s/fdef window:kArr
  :args (s/cat :in valid-kArr? :off* valid-kr?* :type* valid-i?* ))
(stest/instrument `window:kArr)

(defn compress
  {:arglists '([aasig acsig kthresh kloknee khiknee kratio katt krel ilook])}
  [asig csig thresh loknee hiknee ratio att rel look]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "compress"
                      [asig csig thresh loknee hiknee ratio att rel look]
                      *global*)]
    (new out-types ast)))

(s/fdef compress
  :args (s/cat :asig valid-ar? :csig valid-ar? :thresh valid-kr? :loknee valid-kr? :hiknee valid-kr? :ratio valid-kr? :att valid-kr? :rel valid-kr? :look valid-i? ))
(stest/instrument `compress)

(defn compress:a
  {:arglists '([aasig acsig kthresh kloknee khiknee kratio katt krel ilook])}
  [asig csig thresh loknee hiknee ratio att rel look]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "compress"
                      [asig csig thresh loknee hiknee ratio att rel look]
                      *global*)]
    (new out-types ast)))

(s/fdef compress:a
  :args (s/cat :asig valid-ar? :csig valid-ar? :thresh valid-kr? :loknee valid-kr? :hiknee valid-kr? :ratio valid-kr? :att valid-kr? :rel valid-kr? :look valid-i? ))
(stest/instrument `compress:a)

(defn tablefilteri
  {:arglists '([iouttable iintatble imode iparam])}
  [outtable intatble mode param]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "tablefilteri"
                      [outtable intatble mode param]
                      *global*)]
    (new out-types ast)))

(s/fdef tablefilteri
  :args (s/cat :outtable valid-i? :intatble valid-i? :mode valid-i? :param valid-i? ))
(stest/instrument `tablefilteri)

(defn tablefilteri:i
  {:arglists '([iouttable iintatble imode iparam])}
  [outtable intatble mode param]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "tablefilteri"
                      [outtable intatble mode param]
                      *global*)]
    (new out-types ast)))

(s/fdef tablefilteri:i
  :args (s/cat :outtable valid-i? :intatble valid-i? :mode valid-i? :param valid-i? ))
(stest/instrument `tablefilteri:i)

(defn adsynt2
  {:arglists '([kamp kcps iwfn ifreqfn iampfn icnt & iphase*])}
  [amp cps wfn freqfn ampfn cnt & [ phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "adsynt2"
                      [amp cps wfn freqfn ampfn cnt phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef adsynt2
  :args (s/cat :amp valid-kr? :cps valid-kr? :wfn valid-i? :freqfn valid-i? :ampfn valid-i? :cnt valid-i? :phase* valid-i?* ))
(stest/instrument `adsynt2)

(defn adsynt2:a
  {:arglists '([kamp kcps iwfn ifreqfn iampfn icnt & iphase*])}
  [amp cps wfn freqfn ampfn cnt & [ phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "adsynt2"
                      [amp cps wfn freqfn ampfn cnt phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef adsynt2:a
  :args (s/cat :amp valid-kr? :cps valid-kr? :wfn valid-i? :freqfn valid-i? :ampfn valid-i? :cnt valid-i? :phase* valid-i?* ))
(stest/instrument `adsynt2:a)

(defn sumarray
  {:arglists '([iarrayArr] [karrayArr])}
  [array]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "sumarray"
                      [array]
                      *global*)]
    (new out-types ast)))

(s/fdef sumarray
  :args (s/alt
         :iArr (s/cat :array valid-iArr? )
         ))
(stest/instrument `sumarray)

(defn sumarray:i
  {:arglists '([iarrayArr])}
  [array]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "sumarray"
                      [array]
                      *global*)]
    (new out-types ast)))

(s/fdef sumarray:i
  :args (s/cat :array valid-iArr? ))
(stest/instrument `sumarray:i)

(defn sumarray:k
  {:arglists '([karrayArr])}
  [array]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "sumarray"
                      [array]
                      *global*)]
    (new out-types ast)))

(s/fdef sumarray:k
  :args (s/cat :array valid-kArr? ))
(stest/instrument `sumarray:k)

(defn paulstretch
  {:arglists '([istretch iwindowsize ift])}
  [stretch windowsize ft]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "paulstretch"
                      [stretch windowsize ft]
                      *global*)]
    (new out-types ast)))

(s/fdef paulstretch
  :args (s/cat :stretch valid-i? :windowsize valid-i? :ft valid-i? ))
(stest/instrument `paulstretch)

(defn paulstretch:a
  {:arglists '([istretch iwindowsize ift])}
  [stretch windowsize ft]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "paulstretch"
                      [stretch windowsize ft]
                      *global*)]
    (new out-types ast)))

(s/fdef paulstretch:a
  :args (s/cat :stretch valid-i? :windowsize valid-i? :ft valid-i? ))
(stest/instrument `paulstretch:a)

(defn dam
  {:arglists '([asig kthreshold icomp3 icomp4 irtime iftime])}
  [sig threshold comp3 comp4 rtime ftime]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "dam"
                      [sig threshold comp3 comp4 rtime ftime]
                      *global*)]
    (new out-types ast)))

(s/fdef dam
  :args (s/cat :sig valid-ar? :threshold valid-kr? :comp3 valid-i? :comp4 valid-i? :rtime valid-i? :ftime valid-i? ))
(stest/instrument `dam)

(defn dam:a
  {:arglists '([asig kthreshold icomp3 icomp4 irtime iftime])}
  [sig threshold comp3 comp4 rtime ftime]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "dam"
                      [sig threshold comp3 comp4 rtime ftime]
                      *global*)]
    (new out-types ast)))

(s/fdef dam:a
  :args (s/cat :sig valid-ar? :threshold valid-kr? :comp3 valid-i? :comp4 valid-i? :rtime valid-i? :ftime valid-i? ))
(stest/instrument `dam:a)

(defn midichn
  {:arglists '()}
  []
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "midichn"
                      []
                      *global*)]
    (new out-types ast)))


(defn midichn:i
  {:arglists '()}
  []
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "midichn"
                      []
                      *global*)]
    (new out-types ast)))


(defn pvsvoc
  {:arglists '([famp fexc kdepth kgain & kcoefs*])}
  [amp exc depth gain & [ coefs* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsvoc"
                      [amp exc depth gain coefs*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsvoc
  :args (s/cat :amp valid-f? :exc valid-f? :depth valid-kr? :gain valid-kr? :coefs* valid-kr?* ))
(stest/instrument `pvsvoc)

(defn pvsvoc:f
  {:arglists '([famp fexc kdepth kgain & kcoefs*])}
  [amp exc depth gain & [ coefs* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsvoc"
                      [amp exc depth gain coefs*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsvoc:f
  :args (s/cat :amp valid-f? :exc valid-f? :depth valid-kr? :gain valid-kr? :coefs* valid-kr?* ))
(stest/instrument `pvsvoc:f)

(defn chanctrl
  {:arglists '([ichnl ictlno & ilow* ihigh*] [ichnl ictlno & ilow* ihigh*])}
  [chnl ctlno & [ low* high* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "chanctrl"
                      [chnl ctlno low* high*]
                      *global*)]
    (new out-types ast)))

(s/fdef chanctrl
  :args (s/alt
         :iiii (s/cat :chnl valid-i? :ctlno valid-i? :low* valid-i?* :high* valid-i?* )
         ))
(stest/instrument `chanctrl)

(defn chanctrl:i
  {:arglists '([ichnl ictlno & ilow* ihigh*])}
  [chnl ctlno & [ low* high* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "chanctrl"
                      [chnl ctlno low* high*]
                      *global*)]
    (new out-types ast)))

(s/fdef chanctrl:i
  :args (s/cat :chnl valid-i? :ctlno valid-i? :low* valid-i?* :high* valid-i?* ))
(stest/instrument `chanctrl:i)

(defn chanctrl:k
  {:arglists '([ichnl ictlno & ilow* ihigh*])}
  [chnl ctlno & [ low* high* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "chanctrl"
                      [chnl ctlno low* high*]
                      *global*)]
    (new out-types ast)))

(s/fdef chanctrl:k
  :args (s/cat :chnl valid-i? :ctlno valid-i? :low* valid-i?* :high* valid-i?* ))
(stest/instrument `chanctrl:k)

(defn scalearray
  {:arglists '([iarrayArr imin imax & kleft* kright*] [karrayArr kmin kmax & kleft* kright*])}
  [array min max & [ left* right* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "scalearray"
                      [array min max left* right*]
                      *global*)]
    (new out-types ast)))

(s/fdef scalearray
  :args (s/alt
         :iArriikk (s/cat :array valid-iArr? :min valid-i? :max valid-i? :left* valid-kr?* :right* valid-kr?* )
         ))
(stest/instrument `scalearray)

(defn pvsceps
  {:arglists '([fsig & icoefs*])}
  [sig & [ coefs* ]]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "pvsceps"
                      [sig coefs*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsceps
  :args (s/cat :sig valid-f? :coefs* valid-i?* ))
(stest/instrument `pvsceps)

(defn pvsceps:kArr
  {:arglists '([fsig & icoefs*])}
  [sig & [ coefs* ]]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "pvsceps"
                      [sig coefs*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsceps:kArr
  :args (s/cat :sig valid-f? :coefs* valid-i?* ))
(stest/instrument `pvsceps:kArr)

(defn midinoteonpch
  {:arglists '([xpch xvelocity])}
  [pch velocity]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "midinoteonpch"
                      [pch velocity]
                      *global*)]
    (new out-types ast)))

(s/fdef midinoteonpch
  :args (s/cat :pch valid-x? :velocity valid-x? ))
(stest/instrument `midinoteonpch)

(defn strcmp
  {:arglists '([Sarg1 Sarg2])}
  [arg1 arg2]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "strcmp"
                      [arg1 arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef strcmp
  :args (s/cat :arg1 valid-S? :arg2 valid-S? ))
(stest/instrument `strcmp)

(defn strcmp:i
  {:arglists '([Sarg1 Sarg2])}
  [arg1 arg2]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "strcmp"
                      [arg1 arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef strcmp:i
  :args (s/cat :arg1 valid-S? :arg2 valid-S? ))
(stest/instrument `strcmp:i)

(defn MixerClear
  {:arglists '()}
  []
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "MixerClear"
                      []
                      *global*)]
    (new out-types ast)))


(defn imagefree
  {:arglists '([iimagenum])}
  [imagenum]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "imagefree"
                      [imagenum]
                      *global*)]
    (new out-types ast)))

(s/fdef imagefree
  :args (s/cat :imagenum valid-i? ))
(stest/instrument `imagefree)

(defn dust
  {:arglists '([kamp kdensity] [kamp kdensity] [kamp kdensity])}
  [amp density]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "dust"
                      [amp density]
                      *global*)]
    (new out-types ast)))

(s/fdef dust
  :args (s/alt
         :kk (s/cat :amp valid-kr? :density valid-kr? )
         ))
(stest/instrument `dust)

(defn dust:a
  {:arglists '([kamp kdensity])}
  [amp density]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "dust"
                      [amp density]
                      *global*)]
    (new out-types ast)))

(s/fdef dust:a
  :args (s/cat :amp valid-kr? :density valid-kr? ))
(stest/instrument `dust:a)

(defn dust:k
  {:arglists '([kamp kdensity] [kamp kdensity])}
  [amp density]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "dust"
                      [amp density]
                      *global*)]
    (new out-types ast)))

(s/fdef dust:k
  :args (s/alt
         :kk (s/cat :amp valid-kr? :density valid-kr? )
         ))
(stest/instrument `dust:k)

(defn osciliktp
  {:arglists '([kcps ktable kphase & istor*])}
  [cps table phase & [ stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "osciliktp"
                      [cps table phase stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef osciliktp
  :args (s/cat :cps valid-kr? :table valid-kr? :phase valid-kr? :stor* valid-i?* ))
(stest/instrument `osciliktp)

(defn osciliktp:a
  {:arglists '([kcps ktable kphase & istor*])}
  [cps table phase & [ stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "osciliktp"
                      [cps table phase stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef osciliktp:a
  :args (s/cat :cps valid-kr? :table valid-kr? :phase valid-kr? :stor* valid-i?* ))
(stest/instrument `osciliktp:a)

(defn limit1
  {:arglists '([iargArr] [kargArr])}
  [arg]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "limit1"
                      [arg]
                      *global*)]
    (new out-types ast)))

(s/fdef limit1
  :args (s/alt
         :iArr (s/cat :arg valid-iArr? )
         ))
(stest/instrument `limit1)

(defn limit1:iArr
  {:arglists '([iargArr])}
  [arg]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "limit1"
                      [arg]
                      *global*)]
    (new out-types ast)))

(s/fdef limit1:iArr
  :args (s/cat :arg valid-iArr? ))
(stest/instrument `limit1:iArr)

(defn limit1:kArr
  {:arglists '([kargArr])}
  [arg]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "limit1"
                      [arg]
                      *global*)]
    (new out-types ast)))

(s/fdef limit1:kArr
  :args (s/cat :arg valid-kArr? ))
(stest/instrument `limit1:kArr)

(defn strtolk
  {:arglists '([Sindex])}
  [index]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "strtolk"
                      [index]
                      *global*)]
    (new out-types ast)))

(s/fdef strtolk
  :args (s/cat :index valid-S? ))
(stest/instrument `strtolk)

(defn strtolk:k
  {:arglists '([Sindex])}
  [index]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "strtolk"
                      [index]
                      *global*)]
    (new out-types ast)))

(s/fdef strtolk:k
  :args (s/cat :index valid-S? ))
(stest/instrument `strtolk:k)

(defn mincer
  {:arglists '([atimpt kamp kpitch ktab klock & ifftsize* idecim*])}
  [timpt amp pitch tab lock & [ fftsize* decim* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "mincer"
                      [timpt amp pitch tab lock fftsize* decim*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef mincer
  :args (s/cat :timpt valid-ar? :amp valid-kr? :pitch valid-kr? :tab valid-kr? :lock valid-kr? :fftsize* valid-i?* :decim* valid-i?* ))
(stest/instrument `mincer)

(defn ptrack
  {:arglists '([asig ihopsize & ipeaks*])}
  [sig hopsize & [ peaks* ]]
  (let [out-types-quoted '[ControlSignal ControlSignal]
        out-types [ControlSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "ptrack"
                      [sig hopsize peaks*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef ptrack
  :args (s/cat :sig valid-ar? :hopsize valid-i? :peaks* valid-i?* ))
(stest/instrument `ptrack)

(defn xscanu
  {:arglists '([init irate ifnvel ifnmass Sfnstif ifncentr ifndamp kmass kstif kcentr kdamp ileft iright kpos kstrngth ain idisp id] [init irate ifnvel ifnmass ifnstif ifncentr ifndamp kmass kstif kcentr kdamp ileft iright kpos kstrngth ain idisp id])}
  [nit rate fnvel fnmass fnstif fncentr fndamp mass stif centr damp left right pos strngth in disp d]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "xscanu"
                      [nit rate fnvel fnmass fnstif fncentr fndamp mass stif centr damp left right pos strngth in disp d]
                      *global*)]
    (new out-types ast)))

(s/fdef xscanu
  :args (s/alt
         :iiiiSiikkkkiikkaii (s/cat :nit valid-i? :rate valid-i? :fnvel valid-i? :fnmass valid-i? :fnstif valid-S? :fncentr valid-i? :fndamp valid-i? :mass valid-kr? :stif valid-kr? :centr valid-kr? :damp valid-kr? :left valid-i? :right valid-i? :pos valid-kr? :strngth valid-kr? :in valid-ar? :disp valid-i? :d valid-i? )
         ))
(stest/instrument `xscanu)

(defn trscale
  {:arglists '([fin & kpitch1* kgain2* kgain3* kgain4* kgain5* kgain6* kgain7* kgain8* kgain9* kgain10* kgain11* kgain12* kgain13* kgain14* kgain15* kgain16*])}
  [in & [ pitch1* gain2* gain3* gain4* gain5* gain6* gain7* gain8* gain9* gain10* gain11* gain12* gain13* gain14* gain15* gain16* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "trscale"
                      [in pitch1* gain2* gain3* gain4* gain5* gain6* gain7* gain8* gain9* gain10* gain11* gain12* gain13* gain14* gain15* gain16*]
                      *global*)]
    (new out-types ast)))

(s/fdef trscale
  :args (s/cat :in valid-f? :pitch1* valid-kr?* :gain2* valid-kr?* :gain3* valid-kr?* :gain4* valid-kr?* :gain5* valid-kr?* :gain6* valid-kr?* :gain7* valid-kr?* :gain8* valid-kr?* :gain9* valid-kr?* :gain10* valid-kr?* :gain11* valid-kr?* :gain12* valid-kr?* :gain13* valid-kr?* :gain14* valid-kr?* :gain15* valid-kr?* :gain16* valid-kr?* ))
(stest/instrument `trscale)

(defn trscale:f
  {:arglists '([fin & kpitch1* kgain2* kgain3* kgain4* kgain5* kgain6* kgain7* kgain8* kgain9* kgain10* kgain11* kgain12* kgain13* kgain14* kgain15* kgain16*])}
  [in & [ pitch1* gain2* gain3* gain4* gain5* gain6* gain7* gain8* gain9* gain10* gain11* gain12* gain13* gain14* gain15* gain16* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "trscale"
                      [in pitch1* gain2* gain3* gain4* gain5* gain6* gain7* gain8* gain9* gain10* gain11* gain12* gain13* gain14* gain15* gain16*]
                      *global*)]
    (new out-types ast)))

(s/fdef trscale:f
  :args (s/cat :in valid-f? :pitch1* valid-kr?* :gain2* valid-kr?* :gain3* valid-kr?* :gain4* valid-kr?* :gain5* valid-kr?* :gain6* valid-kr?* :gain7* valid-kr?* :gain8* valid-kr?* :gain9* valid-kr?* :gain10* valid-kr?* :gain11* valid-kr?* :gain12* valid-kr?* :gain13* valid-kr?* :gain14* valid-kr?* :gain15* valid-kr?* :gain16* valid-kr?* ))
(stest/instrument `trscale:f)

(defn vecdelay
  {:arglists '([itable ifnIn ifnDel ielements imaxdel & iskip*])}
  [table fnIn fnDel elements maxdel & [ skip* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vecdelay"
                      [table fnIn fnDel elements maxdel skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef vecdelay
  :args (s/cat :table valid-i? :fnIn valid-i? :fnDel valid-i? :elements valid-i? :maxdel valid-i? :skip* valid-i?* ))
(stest/instrument `vecdelay)

(defn pvsfwrite
  {:arglists '([fsig Sfile] [fsig ifile])}
  [sig file]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "pvsfwrite"
                      [sig file]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsfwrite
  :args (s/alt
         :fS (s/cat :sig valid-f? :file valid-S? )
         ))
(stest/instrument `pvsfwrite)

(defn tvconv
  {:arglists '([asig1 asig2 xfreez3 xfreez4 iparts ifils])}
  [sig1 sig2 freez3 freez4 parts fils]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tvconv"
                      [sig1 sig2 freez3 freez4 parts fils]
                      *global*)]
    (new out-types ast)))

(s/fdef tvconv
  :args (s/cat :sig1 valid-ar? :sig2 valid-ar? :freez3 valid-x? :freez4 valid-x? :parts valid-i? :fils valid-i? ))
(stest/instrument `tvconv)

(defn tvconv:a
  {:arglists '([asig1 asig2 xfreez3 xfreez4 iparts ifils])}
  [sig1 sig2 freez3 freez4 parts fils]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tvconv"
                      [sig1 sig2 freez3 freez4 parts fils]
                      *global*)]
    (new out-types ast)))

(s/fdef tvconv:a
  :args (s/cat :sig1 valid-ar? :sig2 valid-ar? :freez3 valid-x? :freez4 valid-x? :parts valid-i? :fils valid-i? ))
(stest/instrument `tvconv:a)

(defn getrow
  {:arglists '([kinArr krow])}
  [in row]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "getrow"
                      [in row]
                      *global*)]
    (new out-types ast)))

(s/fdef getrow
  :args (s/cat :in valid-kArr? :row valid-kr? ))
(stest/instrument `getrow)

(defn getrow:kArr
  {:arglists '([kinArr krow])}
  [in row]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "getrow"
                      [in row]
                      *global*)]
    (new out-types ast)))

(s/fdef getrow:kArr
  :args (s/cat :in valid-kArr? :row valid-kr? ))
(stest/instrument `getrow:kArr)

(defn ino
  {:arglists '()}
  []
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "ino"
                      []
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))


(defn pvoc
  {:arglists '([ktimpnt kfmod Sfilcod & ispecwp* iextractmode* ifreqlim* igatefn*] [ktimpnt kfmod ifilcod & ispecwp* iextractmode* ifreqlim* igatefn*])}
  [timpnt fmod filcod & [ specwp* extractmode* freqlim* gatefn* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pvoc"
                      [timpnt fmod filcod specwp* extractmode* freqlim* gatefn*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvoc
  :args (s/alt
         :kkSiiii (s/cat :timpnt valid-kr? :fmod valid-kr? :filcod valid-S? :specwp* valid-i?* :extractmode* valid-i?* :freqlim* valid-i?* :gatefn* valid-i?* )
         ))
(stest/instrument `pvoc)

(defn pvoc:a
  {:arglists '([ktimpnt kfmod Sfilcod & ispecwp* iextractmode* ifreqlim* igatefn*] [ktimpnt kfmod ifilcod & ispecwp* iextractmode* ifreqlim* igatefn*])}
  [timpnt fmod filcod & [ specwp* extractmode* freqlim* gatefn* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pvoc"
                      [timpnt fmod filcod specwp* extractmode* freqlim* gatefn*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvoc:a
  :args (s/alt
         :kkSiiii (s/cat :timpnt valid-kr? :fmod valid-kr? :filcod valid-S? :specwp* valid-i?* :extractmode* valid-i?* :freqlim* valid-i?* :gatefn* valid-i?* )
         ))
(stest/instrument `pvoc:a)

(defn vbapgmove
  {:arglists '([idur ispread ifldnum & ifld1* ifld2* ifld3* ifld4* ifld5* ifld6* ifld7* ifld8* ifld9* ifld10* ifld11* ifld12* ifld13* ifld14* ifld15* ifld16*] [idur ispread ifldnum & ifld1* ifld2* ifld3* ifld4* ifld5* ifld6* ifld7* ifld8* ifld9* ifld10* ifld11* ifld12* ifld13* ifld14* ifld15* ifld16*])}
  [dur spread fldnum & [ fld1* fld2* fld3* fld4* fld5* fld6* fld7* fld8* fld9* fld10* fld11* fld12* fld13* fld14* fld15* fld16* ]]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "vbapgmove"
                      [dur spread fldnum fld1* fld2* fld3* fld4* fld5* fld6* fld7* fld8* fld9* fld10* fld11* fld12* fld13* fld14* fld15* fld16*]
                      *global*)]
    (new out-types ast)))

(s/fdef vbapgmove
  :args (s/alt
         :iiiiiiiiiiiiiiiiiii (s/cat :dur valid-i? :spread valid-i? :fldnum valid-i? :fld1* valid-i?* :fld2* valid-i?* :fld3* valid-i?* :fld4* valid-i?* :fld5* valid-i?* :fld6* valid-i?* :fld7* valid-i?* :fld8* valid-i?* :fld9* valid-i?* :fld10* valid-i?* :fld11* valid-i?* :fld12* valid-i?* :fld13* valid-i?* :fld14* valid-i?* :fld15* valid-i?* :fld16* valid-i?* )
         ))
(stest/instrument `vbapgmove)

(defn vbapgmove:kArr
  {:arglists '([idur ispread ifldnum & ifld1* ifld2* ifld3* ifld4* ifld5* ifld6* ifld7* ifld8* ifld9* ifld10* ifld11* ifld12* ifld13* ifld14* ifld15* ifld16*])}
  [dur spread fldnum & [ fld1* fld2* fld3* fld4* fld5* fld6* fld7* fld8* fld9* fld10* fld11* fld12* fld13* fld14* fld15* fld16* ]]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "vbapgmove"
                      [dur spread fldnum fld1* fld2* fld3* fld4* fld5* fld6* fld7* fld8* fld9* fld10* fld11* fld12* fld13* fld14* fld15* fld16*]
                      *global*)]
    (new out-types ast)))

(s/fdef vbapgmove:kArr
  :args (s/cat :dur valid-i? :spread valid-i? :fldnum valid-i? :fld1* valid-i?* :fld2* valid-i?* :fld3* valid-i?* :fld4* valid-i?* :fld5* valid-i?* :fld6* valid-i?* :fld7* valid-i?* :fld8* valid-i?* :fld9* valid-i?* :fld10* valid-i?* :fld11* valid-i?* :fld12* valid-i?* :fld13* valid-i?* :fld14* valid-i?* :fld15* valid-i?* :fld16* valid-i?* ))
(stest/instrument `vbapgmove:kArr)

(defn vbapgmove:k
  {:arglists '([idur ispread ifldnum & ifld1* ifld2* ifld3* ifld4* ifld5* ifld6* ifld7* ifld8* ifld9* ifld10* ifld11* ifld12* ifld13* ifld14* ifld15* ifld16*])}
  [dur spread fldnum & [ fld1* fld2* fld3* fld4* fld5* fld6* fld7* fld8* fld9* fld10* fld11* fld12* fld13* fld14* fld15* fld16* ]]
  (let [out-types-quoted '[ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal]
        out-types [ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "vbapgmove"
                      [dur spread fldnum fld1* fld2* fld3* fld4* fld5* fld6* fld7* fld8* fld9* fld10* fld11* fld12* fld13* fld14* fld15* fld16*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef vbapgmove:k
  :args (s/cat :dur valid-i? :spread valid-i? :fldnum valid-i? :fld1* valid-i?* :fld2* valid-i?* :fld3* valid-i?* :fld4* valid-i?* :fld5* valid-i?* :fld6* valid-i?* :fld7* valid-i?* :fld8* valid-i?* :fld9* valid-i?* :fld10* valid-i?* :fld11* valid-i?* :fld12* valid-i?* :fld13* valid-i?* :fld14* valid-i?* :fld15* valid-i?* :fld16* valid-i?* ))
(stest/instrument `vbapgmove:k)

(defn filescal
  {:arglists '([ktimescal kamp kpitch Sfile klock & ifftsize* idecim* kthresh* kthresh* kthresh*])}
  [timescal amp pitch file lock & [ fftsize* decim* thresh* thresh* thresh* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "filescal"
                      [timescal amp pitch file lock fftsize* decim* thresh* thresh* thresh*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef filescal
  :args (s/cat :timescal valid-kr? :amp valid-kr? :pitch valid-kr? :file valid-S? :lock valid-kr? :fftsize* valid-i?* :decim* valid-i?* :thresh* valid-kr?* :thresh* valid-kr?* :thresh* valid-kr?* ))
(stest/instrument `filescal)

(defn pvbufread
  {:arglists '([ktimpnt Sfile] [ktimpnt ifile])}
  [timpnt file]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "pvbufread"
                      [timpnt file]
                      *global*)]
    (new out-types ast)))

(s/fdef pvbufread
  :args (s/alt
         :kS (s/cat :timpnt valid-kr? :file valid-S? )
         ))
(stest/instrument `pvbufread)

(defn inletk
  {:arglists '([Sname])}
  [name]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "inletk"
                      [name]
                      *global*)]
    (new out-types ast)))

(s/fdef inletk
  :args (s/cat :name valid-S? ))
(stest/instrument `inletk)

(defn inletk:k
  {:arglists '([Sname])}
  [name]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "inletk"
                      [name]
                      *global*)]
    (new out-types ast)))

(s/fdef inletk:k
  :args (s/cat :name valid-S? ))
(stest/instrument `inletk:k)

(defn exprand
  {:arglists '([klambda] [klambda] [klambda])}
  [lambda]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "exprand"
                      [lambda]
                      *global*)]
    (new out-types ast)))

(s/fdef exprand
  :args (s/alt
         :k (s/cat :lambda valid-kr? )
         ))
(stest/instrument `exprand)

(defn exprand:a
  {:arglists '([klambda])}
  [lambda]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "exprand"
                      [lambda]
                      *global*)]
    (new out-types ast)))

(s/fdef exprand:a
  :args (s/cat :lambda valid-kr? ))
(stest/instrument `exprand:a)

(defn exprand:i
  {:arglists '([klambda])}
  [lambda]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "exprand"
                      [lambda]
                      *global*)]
    (new out-types ast)))

(s/fdef exprand:i
  :args (s/cat :lambda valid-kr? ))
(stest/instrument `exprand:i)

(defn exprand:k
  {:arglists '([klambda])}
  [lambda]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "exprand"
                      [lambda]
                      *global*)]
    (new out-types ast)))

(s/fdef exprand:k
  :args (s/cat :lambda valid-kr? ))
(stest/instrument `exprand:k)

(defn strchark
  {:arglists '([Sstr & kpos*])}
  [str & [ pos* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "strchark"
                      [str pos*]
                      *global*)]
    (new out-types ast)))

(s/fdef strchark
  :args (s/cat :str valid-S? :pos* valid-kr?* ))
(stest/instrument `strchark)

(defn strchark:k
  {:arglists '([Sstr & kpos*])}
  [str & [ pos* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "strchark"
                      [str pos*]
                      *global*)]
    (new out-types ast)))

(s/fdef strchark:k
  :args (s/cat :str valid-S? :pos* valid-kr?* ))
(stest/instrument `strchark:k)

(defn tabrec
  {:arglists '([ktrig_start ktrig_stop knumtics ktable & kin1* kin2* kinN3* kinN4* kinN5* kinN6* kinN7* kinN8* kinN9* kinN10* kinN11* kinN12* kinN13* kinN14* kinN15* kinN16*])}
  [trig_start trig_stop numtics table & [ in1* in2* inN3* inN4* inN5* inN6* inN7* inN8* inN9* inN10* inN11* inN12* inN13* inN14* inN15* inN16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "tabrec"
                      [trig_start trig_stop numtics table in1* in2* inN3* inN4* inN5* inN6* inN7* inN8* inN9* inN10* inN11* inN12* inN13* inN14* inN15* inN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef tabrec
  :args (s/cat :trig_start valid-kr? :trig_stop valid-kr? :numtics valid-kr? :table valid-kr? :in1* valid-kr?* :in2* valid-kr?* :inN3* valid-kr?* :inN4* valid-kr?* :inN5* valid-kr?* :inN6* valid-kr?* :inN7* valid-kr?* :inN8* valid-kr?* :inN9* valid-kr?* :inN10* valid-kr?* :inN11* valid-kr?* :inN12* valid-kr?* :inN13* valid-kr?* :inN14* valid-kr?* :inN15* valid-kr?* :inN16* valid-kr?* ))
(stest/instrument `tabrec)

(defn gogobel
  {:arglists '([kamp kfreq ihrd ipos imp kvibf kvamp ivfn])}
  [amp freq hrd pos mp vibf vamp vfn]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "gogobel"
                      [amp freq hrd pos mp vibf vamp vfn]
                      *global*)]
    (new out-types ast)))

(s/fdef gogobel
  :args (s/cat :amp valid-kr? :freq valid-kr? :hrd valid-i? :pos valid-i? :mp valid-i? :vibf valid-kr? :vamp valid-kr? :vfn valid-i? ))
(stest/instrument `gogobel)

(defn gogobel:a
  {:arglists '([kamp kfreq ihrd ipos imp kvibf kvamp ivfn])}
  [amp freq hrd pos mp vibf vamp vfn]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "gogobel"
                      [amp freq hrd pos mp vibf vamp vfn]
                      *global*)]
    (new out-types ast)))

(s/fdef gogobel:a
  :args (s/cat :amp valid-kr? :freq valid-kr? :hrd valid-i? :pos valid-i? :mp valid-i? :vibf valid-kr? :vamp valid-kr? :vfn valid-i? ))
(stest/instrument `gogobel:a)

(defn out32
  {:arglists '([& asig1* asig2* asig3* asig4* asig5* asig6* asig7* asig8* asig9* asig10* asig11* asig12* asig13* asig14* asig15* asig16* asig17* asig18* asig19* asig20* asig21* asig22* asig23* asig24* asig25* asig26* asig27* asig28* asig29* asig30* asig31* asig32*])}
  [& [ sig1* sig2* sig3* sig4* sig5* sig6* sig7* sig8* sig9* sig10* sig11* sig12* sig13* sig14* sig15* sig16* sig17* sig18* sig19* sig20* sig21* sig22* sig23* sig24* sig25* sig26* sig27* sig28* sig29* sig30* sig31* sig32* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "out32"
                      [sig1* sig2* sig3* sig4* sig5* sig6* sig7* sig8* sig9* sig10* sig11* sig12* sig13* sig14* sig15* sig16* sig17* sig18* sig19* sig20* sig21* sig22* sig23* sig24* sig25* sig26* sig27* sig28* sig29* sig30* sig31* sig32*]
                      *global*)]
    (new out-types ast)))

(s/fdef out32
  :args (s/cat :sig1* valid-ar?* :sig2* valid-ar?* :sig3* valid-ar?* :sig4* valid-ar?* :sig5* valid-ar?* :sig6* valid-ar?* :sig7* valid-ar?* :sig8* valid-ar?* :sig9* valid-ar?* :sig10* valid-ar?* :sig11* valid-ar?* :sig12* valid-ar?* :sig13* valid-ar?* :sig14* valid-ar?* :sig15* valid-ar?* :sig16* valid-ar?* :sig17* valid-ar?* :sig18* valid-ar?* :sig19* valid-ar?* :sig20* valid-ar?* :sig21* valid-ar?* :sig22* valid-ar?* :sig23* valid-ar?* :sig24* valid-ar?* :sig25* valid-ar?* :sig26* valid-ar?* :sig27* valid-ar?* :sig28* valid-ar?* :sig29* valid-ar?* :sig30* valid-ar?* :sig31* valid-ar?* :sig32* valid-ar?* ))
(stest/instrument `out32)

(defn cauchyi
  {:arglists '([klambda xamp xcps] [klambda xamp xcps] [klambda xamp xcps])}
  [lambda amp cps]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "cauchyi"
                      [lambda amp cps]
                      *global*)]
    (new out-types ast)))

(s/fdef cauchyi
  :args (s/alt
         :kxx (s/cat :lambda valid-kr? :amp valid-x? :cps valid-x? )
         ))
(stest/instrument `cauchyi)

(defn cauchyi:a
  {:arglists '([klambda xamp xcps])}
  [lambda amp cps]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "cauchyi"
                      [lambda amp cps]
                      *global*)]
    (new out-types ast)))

(s/fdef cauchyi:a
  :args (s/cat :lambda valid-kr? :amp valid-x? :cps valid-x? ))
(stest/instrument `cauchyi:a)

(defn cauchyi:i
  {:arglists '([klambda xamp xcps])}
  [lambda amp cps]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "cauchyi"
                      [lambda amp cps]
                      *global*)]
    (new out-types ast)))

(s/fdef cauchyi:i
  :args (s/cat :lambda valid-kr? :amp valid-x? :cps valid-x? ))
(stest/instrument `cauchyi:i)

(defn cauchyi:k
  {:arglists '([klambda xamp xcps])}
  [lambda amp cps]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "cauchyi"
                      [lambda amp cps]
                      *global*)]
    (new out-types ast)))

(s/fdef cauchyi:k
  :args (s/cat :lambda valid-kr? :amp valid-x? :cps valid-x? ))
(stest/instrument `cauchyi:k)

(defn space
  {:arglists '([asig itable ktime kreverbsend kx ky])}
  [sig table time reverbsend x y]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "space"
                      [sig table time reverbsend x y]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef space
  :args (s/cat :sig valid-ar? :table valid-i? :time valid-kr? :reverbsend valid-kr? :x valid-kr? :y valid-kr? ))
(stest/instrument `space)

(defn distort
  {:arglists '([asig kdistortion itable & ihp* istor*])}
  [sig distortion table & [ hp* stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "distort"
                      [sig distortion table hp* stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef distort
  :args (s/cat :sig valid-ar? :distortion valid-kr? :table valid-i? :hp* valid-i?* :stor* valid-i?* ))
(stest/instrument `distort)

(defn distort:a
  {:arglists '([asig kdistortion itable & ihp* istor*])}
  [sig distortion table & [ hp* stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "distort"
                      [sig distortion table hp* stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef distort:a
  :args (s/cat :sig valid-ar? :distortion valid-kr? :table valid-i? :hp* valid-i?* :stor* valid-i?* ))
(stest/instrument `distort:a)

(defn midinoteonoct
  {:arglists '([xoct xvelocity])}
  [oct velocity]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "midinoteonoct"
                      [oct velocity]
                      *global*)]
    (new out-types ast)))

(s/fdef midinoteonoct
  :args (s/cat :oct valid-x? :velocity valid-x? ))
(stest/instrument `midinoteonoct)

(defn random
  {:arglists '([kmin kmax] [imin imax] [kmin kmax])}
  [min max]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "random"
                      [min max]
                      *global*)]
    (new out-types ast)))

(s/fdef random
  :args (s/alt
         :kk (s/cat :min valid-kr? :max valid-kr? )
         ))
(stest/instrument `random)

(defn random:a
  {:arglists '([kmin kmax])}
  [min max]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "random"
                      [min max]
                      *global*)]
    (new out-types ast)))

(s/fdef random:a
  :args (s/cat :min valid-kr? :max valid-kr? ))
(stest/instrument `random:a)

(defn random:i
  {:arglists '([imin imax])}
  [min max]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "random"
                      [min max]
                      *global*)]
    (new out-types ast)))

(s/fdef random:i
  :args (s/cat :min valid-i? :max valid-i? ))
(stest/instrument `random:i)

(defn random:k
  {:arglists '([kmin kmax])}
  [min max]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "random"
                      [min max]
                      *global*)]
    (new out-types ast)))

(s/fdef random:k
  :args (s/cat :min valid-kr? :max valid-kr? ))
(stest/instrument `random:k)

(defn sndloop
  {:arglists '([ain kpitch ktrig idur ifad])}
  [in pitch trig dur fad]
  (let [out-types-quoted '[AudioSignal ControlSignal]
        out-types [AudioSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "sndloop"
                      [in pitch trig dur fad]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef sndloop
  :args (s/cat :in valid-ar? :pitch valid-kr? :trig valid-kr? :dur valid-i? :fad valid-i? ))
(stest/instrument `sndloop)

(defn oscbnk
  {:arglists '([kcps kamd kfmd kpmd iovrlap iseed kl1minf kl1maxf kl2minf kl2maxf ilfomode keqminf keqmaxf keqminl keqmaxl keqminq keqmaxq ieqmode ktable & il1fn* il2fn* ieqffn* ieqlfn* ieqqfn* itabl* ioutfn*])}
  [cps amd fmd pmd ovrlap seed l1minf l1maxf l2minf l2maxf lfomode eqminf eqmaxf eqminl eqmaxl eqminq eqmaxq eqmode table & [ l1fn* l2fn* eqffn* eqlfn* eqqfn* tabl* outfn* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "oscbnk"
                      [cps amd fmd pmd ovrlap seed l1minf l1maxf l2minf l2maxf lfomode eqminf eqmaxf eqminl eqmaxl eqminq eqmaxq eqmode table l1fn* l2fn* eqffn* eqlfn* eqqfn* tabl* outfn*]
                      *global*)]
    (new out-types ast)))

(s/fdef oscbnk
  :args (s/cat :cps valid-kr? :amd valid-kr? :fmd valid-kr? :pmd valid-kr? :ovrlap valid-i? :seed valid-i? :l1minf valid-kr? :l1maxf valid-kr? :l2minf valid-kr? :l2maxf valid-kr? :lfomode valid-i? :eqminf valid-kr? :eqmaxf valid-kr? :eqminl valid-kr? :eqmaxl valid-kr? :eqminq valid-kr? :eqmaxq valid-kr? :eqmode valid-i? :table valid-kr? :l1fn* valid-i?* :l2fn* valid-i?* :eqffn* valid-i?* :eqlfn* valid-i?* :eqqfn* valid-i?* :tabl* valid-i?* :outfn* valid-i?* ))
(stest/instrument `oscbnk)

(defn oscbnk:a
  {:arglists '([kcps kamd kfmd kpmd iovrlap iseed kl1minf kl1maxf kl2minf kl2maxf ilfomode keqminf keqmaxf keqminl keqmaxl keqminq keqmaxq ieqmode ktable & il1fn* il2fn* ieqffn* ieqlfn* ieqqfn* itabl* ioutfn*])}
  [cps amd fmd pmd ovrlap seed l1minf l1maxf l2minf l2maxf lfomode eqminf eqmaxf eqminl eqmaxl eqminq eqmaxq eqmode table & [ l1fn* l2fn* eqffn* eqlfn* eqqfn* tabl* outfn* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "oscbnk"
                      [cps amd fmd pmd ovrlap seed l1minf l1maxf l2minf l2maxf lfomode eqminf eqmaxf eqminl eqmaxl eqminq eqmaxq eqmode table l1fn* l2fn* eqffn* eqlfn* eqqfn* tabl* outfn*]
                      *global*)]
    (new out-types ast)))

(s/fdef oscbnk:a
  :args (s/cat :cps valid-kr? :amd valid-kr? :fmd valid-kr? :pmd valid-kr? :ovrlap valid-i? :seed valid-i? :l1minf valid-kr? :l1maxf valid-kr? :l2minf valid-kr? :l2maxf valid-kr? :lfomode valid-i? :eqminf valid-kr? :eqmaxf valid-kr? :eqminl valid-kr? :eqmaxl valid-kr? :eqminq valid-kr? :eqmaxq valid-kr? :eqmode valid-i? :table valid-kr? :l1fn* valid-i?* :l2fn* valid-i?* :eqffn* valid-i?* :eqlfn* valid-i?* :eqqfn* valid-i?* :tabl* valid-i?* :outfn* valid-i?* ))
(stest/instrument `oscbnk:a)

(defn loscil3
  {:arglists '([xamp kcps & itable* ibas* imod1* ibeg1* iend1* imod1* ibeg1* iend1*])}
  [amp cps & [ table* bas* mod1* beg1* end1* mod1* beg1* end1* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "loscil3"
                      [amp cps table* bas* mod1* beg1* end1* mod1* beg1* end1*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef loscil3
  :args (s/cat :amp valid-x? :cps valid-kr? :table* valid-i?* :bas* valid-i?* :mod1* valid-i?* :beg1* valid-i?* :end1* valid-i?* :mod1* valid-i?* :beg1* valid-i?* :end1* valid-i?* ))
(stest/instrument `loscil3)

(defn trirand
  {:arglists '([krange] [krange] [krange])}
  [range]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "trirand"
                      [range]
                      *global*)]
    (new out-types ast)))

(s/fdef trirand
  :args (s/alt
         :k (s/cat :range valid-kr? )
         ))
(stest/instrument `trirand)

(defn trirand:a
  {:arglists '([krange])}
  [range]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "trirand"
                      [range]
                      *global*)]
    (new out-types ast)))

(s/fdef trirand:a
  :args (s/cat :range valid-kr? ))
(stest/instrument `trirand:a)

(defn trirand:i
  {:arglists '([krange])}
  [range]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "trirand"
                      [range]
                      *global*)]
    (new out-types ast)))

(s/fdef trirand:i
  :args (s/cat :range valid-kr? ))
(stest/instrument `trirand:i)

(defn trirand:k
  {:arglists '([krange])}
  [range]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "trirand"
                      [range]
                      *global*)]
    (new out-types ast)))

(s/fdef trirand:k
  :args (s/cat :range valid-kr? ))
(stest/instrument `trirand:k)

(defn pvsblur
  {:arglists '([fsigin kblurtime imaxdel])}
  [sigin blurtime maxdel]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsblur"
                      [sigin blurtime maxdel]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsblur
  :args (s/cat :sigin valid-f? :blurtime valid-kr? :maxdel valid-i? ))
(stest/instrument `pvsblur)

(defn pvsblur:f
  {:arglists '([fsigin kblurtime imaxdel])}
  [sigin blurtime maxdel]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsblur"
                      [sigin blurtime maxdel]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsblur:f
  :args (s/cat :sigin valid-f? :blurtime valid-kr? :maxdel valid-i? ))
(stest/instrument `pvsblur:f)

(defn adsyn
  {:arglists '([kamod kfmod ksmod Sfilcod & ifilcod*] [kamod kfmod ksmod ifilcod & ifilcod*])}
  [amod fmod smod filcod & [ filcod* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "adsyn"
                      [amod fmod smod filcod filcod*]
                      *global*)]
    (new out-types ast)))

(s/fdef adsyn
  :args (s/alt
         :kkkSi (s/cat :amod valid-kr? :fmod valid-kr? :smod valid-kr? :filcod valid-S? :filcod* valid-i?* )
         ))
(stest/instrument `adsyn)

(defn adsyn:a
  {:arglists '([kamod kfmod ksmod Sfilcod & ifilcod*] [kamod kfmod ksmod ifilcod & ifilcod*])}
  [amod fmod smod filcod & [ filcod* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "adsyn"
                      [amod fmod smod filcod filcod*]
                      *global*)]
    (new out-types ast)))

(s/fdef adsyn:a
  :args (s/alt
         :kkkSi (s/cat :amod valid-kr? :fmod valid-kr? :smod valid-kr? :filcod valid-S? :filcod* valid-i?* )
         ))
(stest/instrument `adsyn:a)

(defn cosh
  {:arglists '([aarg1] [iarg1] [iarg1Arr] [karg1] [karg1Arr])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "cosh"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef cosh
  :args (s/alt
         :a (s/cat :arg1 valid-ar? )
         ))
(stest/instrument `cosh)

(defn cosh:a
  {:arglists '([aarg1])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "cosh"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef cosh:a
  :args (s/cat :arg1 valid-ar? ))
(stest/instrument `cosh:a)

(defn cosh:i
  {:arglists '([iarg1])}
  [arg1]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "cosh"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef cosh:i
  :args (s/cat :arg1 valid-i? ))
(stest/instrument `cosh:i)

(defn cosh:iArr
  {:arglists '([iarg1Arr])}
  [arg1]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "cosh"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef cosh:iArr
  :args (s/cat :arg1 valid-iArr? ))
(stest/instrument `cosh:iArr)

(defn cosh:k
  {:arglists '([karg1])}
  [arg1]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "cosh"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef cosh:k
  :args (s/cat :arg1 valid-kr? ))
(stest/instrument `cosh:k)

(defn cosh:kArr
  {:arglists '([karg1Arr])}
  [arg1]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "cosh"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef cosh:kArr
  :args (s/cat :arg1 valid-kArr? ))
(stest/instrument `cosh:kArr)

(defn readk3
  {:arglists '([Sfilname iformat iprd] [ifilname iformat iprd])}
  [filname format prd]
  (let [out-types-quoted '[ControlSignal ControlSignal ControlSignal]
        out-types [ControlSignal ControlSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "readk3"
                      [filname format prd]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef readk3
  :args (s/alt
         :Sii (s/cat :filname valid-S? :format valid-i? :prd valid-i? )
         ))
(stest/instrument `readk3)

(defn fmwurlie
  {:arglists '([kamp kfreq kc3 kc4 kvdepth kvrate ifn7 ifn8 ifn9 ifn10 ivfn])}
  [amp freq c3 c4 vdepth vrate fn7 fn8 fn9 fn10 vfn]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fmwurlie"
                      [amp freq c3 c4 vdepth vrate fn7 fn8 fn9 fn10 vfn]
                      *global*)]
    (new out-types ast)))

(s/fdef fmwurlie
  :args (s/cat :amp valid-kr? :freq valid-kr? :c3 valid-kr? :c4 valid-kr? :vdepth valid-kr? :vrate valid-kr? :fn7 valid-i? :fn8 valid-i? :fn9 valid-i? :fn10 valid-i? :vfn valid-i? ))
(stest/instrument `fmwurlie)

(defn fmwurlie:a
  {:arglists '([kamp kfreq kc3 kc4 kvdepth kvrate ifn7 ifn8 ifn9 ifn10 ivfn])}
  [amp freq c3 c4 vdepth vrate fn7 fn8 fn9 fn10 vfn]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fmwurlie"
                      [amp freq c3 c4 vdepth vrate fn7 fn8 fn9 fn10 vfn]
                      *global*)]
    (new out-types ast)))

(s/fdef fmwurlie:a
  :args (s/cat :amp valid-kr? :freq valid-kr? :c3 valid-kr? :c4 valid-kr? :vdepth valid-kr? :vrate valid-kr? :fn7 valid-i? :fn8 valid-i? :fn9 valid-i? :fn10 valid-i? :vfn valid-i? ))
(stest/instrument `fmwurlie:a)

(defn outkpat
  {:arglists '([kchn knotenum kvalue kmin kmax])}
  [chn notenum value min max]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outkpat"
                      [chn notenum value min max]
                      *global*)]
    (new out-types ast)))

(s/fdef outkpat
  :args (s/cat :chn valid-kr? :notenum valid-kr? :value valid-kr? :min valid-kr? :max valid-kr? ))
(stest/instrument `outkpat)

(defn vdelayxw
  {:arglists '([ain adl imd iws & ist*])}
  [in dl md ws & [ st* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "vdelayxw"
                      [in dl md ws st*]
                      *global*)]
    (new out-types ast)))

(s/fdef vdelayxw
  :args (s/cat :in valid-ar? :dl valid-ar? :md valid-i? :ws valid-i? :st* valid-i?* ))
(stest/instrument `vdelayxw)

(defn vdelayxw:a
  {:arglists '([ain adl imd iws & ist*])}
  [in dl md ws & [ st* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "vdelayxw"
                      [in dl md ws st*]
                      *global*)]
    (new out-types ast)))

(s/fdef vdelayxw:a
  :args (s/cat :in valid-ar? :dl valid-ar? :md valid-i? :ws valid-i? :st* valid-i?* ))
(stest/instrument `vdelayxw:a)

(defn getftargs
  {:arglists '([iftno ktrig])}
  [ftno trig]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "getftargs"
                      [ftno trig]
                      *global*)]
    (new out-types ast)))

(s/fdef getftargs
  :args (s/cat :ftno valid-i? :trig valid-kr? ))
(stest/instrument `getftargs)

(defn getftargs:S
  {:arglists '([iftno ktrig])}
  [ftno trig]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "getftargs"
                      [ftno trig]
                      *global*)]
    (new out-types ast)))

(s/fdef getftargs:S
  :args (s/cat :ftno valid-i? :trig valid-kr? ))
(stest/instrument `getftargs:S)

(defn vdel_k
  {:arglists '([ksig kdelay imaxdelay & imode*])}
  [sig delay maxdelay & [ mode* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "vdel_k"
                      [sig delay maxdelay mode*]
                      *global*)]
    (new out-types ast)))

(s/fdef vdel_k
  :args (s/cat :sig valid-kr? :delay valid-kr? :maxdelay valid-i? :mode* valid-i?* ))
(stest/instrument `vdel_k)

(defn vdel_k:k
  {:arglists '([ksig kdelay imaxdelay & imode*])}
  [sig delay maxdelay & [ mode* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "vdel_k"
                      [sig delay maxdelay mode*]
                      *global*)]
    (new out-types ast)))

(s/fdef vdel_k:k
  :args (s/cat :sig valid-kr? :delay valid-kr? :maxdelay valid-i? :mode* valid-i?* ))
(stest/instrument `vdel_k:k)

(defn tival
  {:arglists '()}
  []
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "tival"
                      []
                      *global*)]
    (new out-types ast)))


(defn tival:i
  {:arglists '()}
  []
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "tival"
                      []
                      *global*)]
    (new out-types ast)))


(defn copyf2array
  {:arglists '([iabArr iftbl] [kabArr kftbl])}
  [ab ftbl]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "copyf2array"
                      [ab ftbl]
                      *global*)]
    (new out-types ast)))

(s/fdef copyf2array
  :args (s/alt
         :iArri (s/cat :ab valid-iArr? :ftbl valid-i? )
         ))
(stest/instrument `copyf2array)

(defn lpinterp
  {:arglists '([islot1 islot2 kmix])}
  [slot1 slot2 mix]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "lpinterp"
                      [slot1 slot2 mix]
                      *global*)]
    (new out-types ast)))

(s/fdef lpinterp
  :args (s/cat :slot1 valid-i? :slot2 valid-i? :mix valid-kr? ))
(stest/instrument `lpinterp)

(defn clockon
  {:arglists '([inum])}
  [num]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "clockon"
                      [num]
                      *global*)]
    (new out-types ast)))

(s/fdef clockon
  :args (s/cat :num valid-i? ))
(stest/instrument `clockon)

(defn fmpercfl
  {:arglists '([kamp kfreq kc3 kc4 kvdepth kvrate & ifn1* ifn1* ifn1* ifn1* ivfn*])}
  [amp freq c3 c4 vdepth vrate & [ fn1* fn1* fn1* fn1* vfn* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fmpercfl"
                      [amp freq c3 c4 vdepth vrate fn1* fn1* fn1* fn1* vfn*]
                      *global*)]
    (new out-types ast)))

(s/fdef fmpercfl
  :args (s/cat :amp valid-kr? :freq valid-kr? :c3 valid-kr? :c4 valid-kr? :vdepth valid-kr? :vrate valid-kr? :fn1* valid-i?* :fn1* valid-i?* :fn1* valid-i?* :fn1* valid-i?* :vfn* valid-i?* ))
(stest/instrument `fmpercfl)

(defn fmpercfl:a
  {:arglists '([kamp kfreq kc3 kc4 kvdepth kvrate & ifn1* ifn1* ifn1* ifn1* ivfn*])}
  [amp freq c3 c4 vdepth vrate & [ fn1* fn1* fn1* fn1* vfn* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fmpercfl"
                      [amp freq c3 c4 vdepth vrate fn1* fn1* fn1* fn1* vfn*]
                      *global*)]
    (new out-types ast)))

(s/fdef fmpercfl:a
  :args (s/cat :amp valid-kr? :freq valid-kr? :c3 valid-kr? :c4 valid-kr? :vdepth valid-kr? :vrate valid-kr? :fn1* valid-i?* :fn1* valid-i?* :fn1* valid-i?* :fn1* valid-i?* :vfn* valid-i?* ))
(stest/instrument `fmpercfl:a)

(defn pvread
  {:arglists '([ktimpnt Sfile ibin] [ktimpnt ifile ibin])}
  [timpnt file bin]
  (let [out-types-quoted '[ControlSignal ControlSignal]
        out-types [ControlSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "pvread"
                      [timpnt file bin]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef pvread
  :args (s/alt
         :kSi (s/cat :timpnt valid-kr? :file valid-S? :bin valid-i? )
         ))
(stest/instrument `pvread)

(defn zaw
  {:arglists '([asig kindex])}
  [sig index]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "zaw"
                      [sig index]
                      *global*)]
    (new out-types ast)))

(s/fdef zaw
  :args (s/cat :sig valid-ar? :index valid-kr? ))
(stest/instrument `zaw)

(defn balance
  {:arglists '([asig acomp & ihp* iskip*])}
  [sig comp & [ hp* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "balance"
                      [sig comp hp* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef balance
  :args (s/cat :sig valid-ar? :comp valid-ar? :hp* valid-i?* :skip* valid-i?* ))
(stest/instrument `balance)

(defn balance:a
  {:arglists '([asig acomp & ihp* iskip*])}
  [sig comp & [ hp* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "balance"
                      [sig comp hp* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef balance:a
  :args (s/cat :sig valid-ar? :comp valid-ar? :hp* valid-i?* :skip* valid-i?* ))
(stest/instrument `balance:a)

(defn tabifd
  {:arglists '([ktimpt kamp kpitch ifftsize ihopsize iwintype itable])}
  [timpt amp pitch fftsize hopsize wintype table]
  (let [out-types-quoted '[FrequencySignal FrequencySignal]
        out-types [FrequencySignal FrequencySignal]
        ast (ast-node out-types-quoted
                      "tabifd"
                      [timpt amp pitch fftsize hopsize wintype table]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef tabifd
  :args (s/cat :timpt valid-kr? :amp valid-kr? :pitch valid-kr? :fftsize valid-i? :hopsize valid-i? :wintype valid-i? :table valid-i? ))
(stest/instrument `tabifd)

(defn filepeak
  {:arglists '([Sfilcod & ichnl*] [ifilcod & ichnl*])}
  [filcod & [ chnl* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "filepeak"
                      [filcod chnl*]
                      *global*)]
    (new out-types ast)))

(s/fdef filepeak
  :args (s/alt
         :Si (s/cat :filcod valid-S? :chnl* valid-i?* )
         ))
(stest/instrument `filepeak)

(defn filepeak:i
  {:arglists '([Sfilcod & ichnl*] [ifilcod & ichnl*])}
  [filcod & [ chnl* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "filepeak"
                      [filcod chnl*]
                      *global*)]
    (new out-types ast)))

(s/fdef filepeak:i
  :args (s/alt
         :Si (s/cat :filcod valid-S? :chnl* valid-i?* )
         ))
(stest/instrument `filepeak:i)

(defn lowpass2
  {:arglists '([asig acenter-frequency aq & iskip*] [asig acenter-frequency kq askip & iskip*] [asig kcenter-frequency aq & iskip*] [asig kcenter-frequency kq & iskip*])}
  [sig center-frequency q & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "lowpass2"
                      [sig center-frequency q skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef lowpass2
  :args (s/alt
         :aaai (s/cat :sig valid-ar? :center-frequency valid-ar? :q valid-ar? :skip* valid-i?* )
         ))
(stest/instrument `lowpass2)

(defn lowpass2:a
  {:arglists '([asig acenter-frequency aq & iskip*] [asig acenter-frequency kq askip & iskip*] [asig kcenter-frequency aq & iskip*] [asig kcenter-frequency kq & iskip*])}
  [sig center-frequency q & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "lowpass2"
                      [sig center-frequency q skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef lowpass2:a
  :args (s/alt
         :aaai (s/cat :sig valid-ar? :center-frequency valid-ar? :q valid-ar? :skip* valid-i?* )
         ))
(stest/instrument `lowpass2:a)

(defn vaddv
  {:arglists '([ifn1 ifn2 kelements & kdstoffset* ksrcoffset* kverbose*])}
  [fn1 fn2 elements & [ dstoffset* srcoffset* verbose* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vaddv"
                      [fn1 fn2 elements dstoffset* srcoffset* verbose*]
                      *global*)]
    (new out-types ast)))

(s/fdef vaddv
  :args (s/cat :fn1 valid-i? :fn2 valid-i? :elements valid-kr? :dstoffset* valid-kr?* :srcoffset* valid-kr?* :verbose* valid-kr?* ))
(stest/instrument `vaddv)

(defn printf
  {:arglists '([Sformatstring & karg1* karg2* karg3* karg4* karg5* karg6* karg7* karg8* karg9* karg10* karg11* karg12* karg13* karg14* karg15* karg16*])}
  [formatstring & [ arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "printf"
                      [formatstring arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16*]
                      *global*)]
    (new out-types ast)))

(s/fdef printf
  :args (s/cat :formatstring valid-S? :arg1* valid-kr?* :arg2* valid-kr?* :arg3* valid-kr?* :arg4* valid-kr?* :arg5* valid-kr?* :arg6* valid-kr?* :arg7* valid-kr?* :arg8* valid-kr?* :arg9* valid-kr?* :arg10* valid-kr?* :arg11* valid-kr?* :arg12* valid-kr?* :arg13* valid-kr?* :arg14* valid-kr?* :arg15* valid-kr?* :arg16* valid-kr?* ))
(stest/instrument `printf)

(defn tablewkt
  {:arglists '([asig aindex ktable & ixmode* ixoff* iwgmode*] [ksig kindex ktable & ixmode* ixoff* iwgmode*])}
  [sig index table & [ xmode* xoff* wgmode* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "tablewkt"
                      [sig index table xmode* xoff* wgmode*]
                      *global*)]
    (new out-types ast)))

(s/fdef tablewkt
  :args (s/alt
         :aakiii (s/cat :sig valid-ar? :index valid-ar? :table valid-kr? :xmode* valid-i?* :xoff* valid-i?* :wgmode* valid-i?* )
         ))
(stest/instrument `tablewkt)

(defn strcpy
  {:arglists '([Ssource])}
  [source]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "strcpy"
                      [source]
                      *global*)]
    (new out-types ast)))

(s/fdef strcpy
  :args (s/cat :source valid-S? ))
(stest/instrument `strcpy)

(defn strcpy:S
  {:arglists '([Ssource])}
  [source]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "strcpy"
                      [source]
                      *global*)]
    (new out-types ast)))

(s/fdef strcpy:S
  :args (s/cat :source valid-S? ))
(stest/instrument `strcpy:S)

(defn inrg
  {:arglists '([kstart & ain1* ain2* ain3* ainN4* ainN5* ainN6* ainN7* ainN8* ainN9* ainN10* ainN11* ainN12* ainN13* ainN14* ainN15* ainN16* ainN17* ainN18* ainN19* ainN20* ainN21* ainN22* ainN23* ainN24* ainN25* ainN26* ainN27* ainN28* ainN29* ainN30* ainN31* ainN32*])}
  [start & [ in1* in2* in3* inN4* inN5* inN6* inN7* inN8* inN9* inN10* inN11* inN12* inN13* inN14* inN15* inN16* inN17* inN18* inN19* inN20* inN21* inN22* inN23* inN24* inN25* inN26* inN27* inN28* inN29* inN30* inN31* inN32* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "inrg"
                      [start in1* in2* in3* inN4* inN5* inN6* inN7* inN8* inN9* inN10* inN11* inN12* inN13* inN14* inN15* inN16* inN17* inN18* inN19* inN20* inN21* inN22* inN23* inN24* inN25* inN26* inN27* inN28* inN29* inN30* inN31* inN32*]
                      *global*)]
    (new out-types ast)))

(s/fdef inrg
  :args (s/cat :start valid-kr? :in1* valid-ar?* :in2* valid-ar?* :in3* valid-ar?* :inN4* valid-ar?* :inN5* valid-ar?* :inN6* valid-ar?* :inN7* valid-ar?* :inN8* valid-ar?* :inN9* valid-ar?* :inN10* valid-ar?* :inN11* valid-ar?* :inN12* valid-ar?* :inN13* valid-ar?* :inN14* valid-ar?* :inN15* valid-ar?* :inN16* valid-ar?* :inN17* valid-ar?* :inN18* valid-ar?* :inN19* valid-ar?* :inN20* valid-ar?* :inN21* valid-ar?* :inN22* valid-ar?* :inN23* valid-ar?* :inN24* valid-ar?* :inN25* valid-ar?* :inN26* valid-ar?* :inN27* valid-ar?* :inN28* valid-ar?* :inN29* valid-ar?* :inN30* valid-ar?* :inN31* valid-ar?* :inN32* valid-ar?* ))
(stest/instrument `inrg)

(defn rbjeq
  {:arglists '([asig kcutoff-frequency klvl kQ kS & imode*])}
  [sig cutoff-frequency lvl Q S & [ mode* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "rbjeq"
                      [sig cutoff-frequency lvl Q S mode*]
                      *global*)]
    (new out-types ast)))

(s/fdef rbjeq
  :args (s/cat :sig valid-ar? :cutoff-frequency valid-kr? :lvl valid-kr? :Q valid-kr? :S valid-kr? :mode* valid-i?* ))
(stest/instrument `rbjeq)

(defn rbjeq:a
  {:arglists '([asig kcutoff-frequency klvl kQ kS & imode*])}
  [sig cutoff-frequency lvl Q S & [ mode* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "rbjeq"
                      [sig cutoff-frequency lvl Q S mode*]
                      *global*)]
    (new out-types ast)))

(s/fdef rbjeq:a
  :args (s/cat :sig valid-ar? :cutoff-frequency valid-kr? :lvl valid-kr? :Q valid-kr? :S valid-kr? :mode* valid-i?* ))
(stest/instrument `rbjeq:a)

(defn maxalloc
  {:arglists '([Sinsname icount] [iinsname icount])}
  [insname count]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "maxalloc"
                      [insname count]
                      *global*)]
    (new out-types ast)))

(s/fdef maxalloc
  :args (s/alt
         :Si (s/cat :insname valid-S? :count valid-i? )
         ))
(stest/instrument `maxalloc)

(defn dssictls
  {:arglists '([ihandle iport kvalue ktrigger])}
  [handle port value trigger]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "dssictls"
                      [handle port value trigger]
                      *global*)]
    (new out-types ast)))

(s/fdef dssictls
  :args (s/cat :handle valid-i? :port valid-i? :value valid-kr? :trigger valid-kr? ))
(stest/instrument `dssictls)

(defn minaccum
  {:arglists '([aAccumulator aInput])}
  [Accumulator Input]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "minaccum"
                      [Accumulator Input]
                      *global*)]
    (new out-types ast)))

(s/fdef minaccum
  :args (s/cat :Accumulator valid-ar? :Input valid-ar? ))
(stest/instrument `minaccum)

(defn fout
  {:arglists '([Sfilename iformat arrayArr] [Sfilename iformat & array1* array2* array3* array4* array5* array6* array7* array8* array9* array10* array11* array12* array13* array14* array15* array16* array17* array18* array19* array20* array21* array22* array23* array24* array25* array26* array27* array28* array29* array30* array31* array32*])}
  [filename format rray]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "fout"
                      [filename format rray]
                      *global*)]
    (new out-types ast)))

(s/fdef fout
  :args (s/alt
         :SiaArr (s/cat :filename valid-S? :format valid-i? :rray valid-aArr? )
         ))
(stest/instrument `fout)

(defn vbapzmove
  {:arglists '([inumchnls istartndx asig idur ispread ifldnum & ifld1* ifld2* ifld3* ifld4* ifld5* ifld6* ifld7* ifld8* ifld9* ifld10* ifld11* ifld12* ifld13* ifld14* ifld15* ifld16*])}
  [numchnls startndx sig dur spread fldnum & [ fld1* fld2* fld3* fld4* fld5* fld6* fld7* fld8* fld9* fld10* fld11* fld12* fld13* fld14* fld15* fld16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vbapzmove"
                      [numchnls startndx sig dur spread fldnum fld1* fld2* fld3* fld4* fld5* fld6* fld7* fld8* fld9* fld10* fld11* fld12* fld13* fld14* fld15* fld16*]
                      *global*)]
    (new out-types ast)))

(s/fdef vbapzmove
  :args (s/cat :numchnls valid-i? :startndx valid-i? :sig valid-ar? :dur valid-i? :spread valid-i? :fldnum valid-i? :fld1* valid-i?* :fld2* valid-i?* :fld3* valid-i?* :fld4* valid-i?* :fld5* valid-i?* :fld6* valid-i?* :fld7* valid-i?* :fld8* valid-i?* :fld9* valid-i?* :fld10* valid-i?* :fld11* valid-i?* :fld12* valid-i?* :fld13* valid-i?* :fld14* valid-i?* :fld15* valid-i?* :fld16* valid-i?* ))
(stest/instrument `vbapzmove)

(defn gausstrig
  {:arglists '([kamp kcps kdev & imode* ifrst1*] [kamp kcps kdev & imode* ifrst1*])}
  [amp cps dev & [ mode* frst1* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "gausstrig"
                      [amp cps dev mode* frst1*]
                      *global*)]
    (new out-types ast)))

(s/fdef gausstrig
  :args (s/alt
         :kkkii (s/cat :amp valid-kr? :cps valid-kr? :dev valid-kr? :mode* valid-i?* :frst1* valid-i?* )
         ))
(stest/instrument `gausstrig)

(defn gausstrig:a
  {:arglists '([kamp kcps kdev & imode* ifrst1*])}
  [amp cps dev & [ mode* frst1* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "gausstrig"
                      [amp cps dev mode* frst1*]
                      *global*)]
    (new out-types ast)))

(s/fdef gausstrig:a
  :args (s/cat :amp valid-kr? :cps valid-kr? :dev valid-kr? :mode* valid-i?* :frst1* valid-i?* ))
(stest/instrument `gausstrig:a)

(defn gausstrig:k
  {:arglists '([kamp kcps kdev & imode* ifrst1*])}
  [amp cps dev & [ mode* frst1* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "gausstrig"
                      [amp cps dev mode* frst1*]
                      *global*)]
    (new out-types ast)))

(s/fdef gausstrig:k
  :args (s/cat :amp valid-kr? :cps valid-kr? :dev valid-kr? :mode* valid-i?* :frst1* valid-i?* ))
(stest/instrument `gausstrig:k)

(defn imageload
  {:arglists '([Silename])}
  [ilename]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "imageload"
                      [ilename]
                      *global*)]
    (new out-types ast)))

(s/fdef imageload
  :args (s/cat :ilename valid-S? ))
(stest/instrument `imageload)

(defn imageload:i
  {:arglists '([Silename])}
  [ilename]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "imageload"
                      [ilename]
                      *global*)]
    (new out-types ast)))

(s/fdef imageload:i
  :args (s/cat :ilename valid-S? ))
(stest/instrument `imageload:i)

(defn samphold
  {:arglists '([xsig xgate & ival* ivstor*] [xsig xgate & ival* ivstor*])}
  [sig gate & [ val* vstor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "samphold"
                      [sig gate val* vstor*]
                      *global*)]
    (new out-types ast)))

(s/fdef samphold
  :args (s/alt
         :xxii (s/cat :sig valid-x? :gate valid-x? :val* valid-i?* :vstor* valid-i?* )
         ))
(stest/instrument `samphold)

(defn samphold:a
  {:arglists '([xsig xgate & ival* ivstor*])}
  [sig gate & [ val* vstor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "samphold"
                      [sig gate val* vstor*]
                      *global*)]
    (new out-types ast)))

(s/fdef samphold:a
  :args (s/cat :sig valid-x? :gate valid-x? :val* valid-i?* :vstor* valid-i?* ))
(stest/instrument `samphold:a)

(defn samphold:k
  {:arglists '([xsig xgate & ival* ivstor*])}
  [sig gate & [ val* vstor* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "samphold"
                      [sig gate val* vstor*]
                      *global*)]
    (new out-types ast)))

(s/fdef samphold:k
  :args (s/cat :sig valid-x? :gate valid-x? :val* valid-i?* :vstor* valid-i?* ))
(stest/instrument `samphold:k)

(defn zkwm
  {:arglists '([ksig kindex & imix*])}
  [sig index & [ mix* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "zkwm"
                      [sig index mix*]
                      *global*)]
    (new out-types ast)))

(s/fdef zkwm
  :args (s/cat :sig valid-kr? :index valid-kr? :mix* valid-i?* ))
(stest/instrument `zkwm)

(defn streson
  {:arglists '([asig kfr kfdbgain])}
  [sig fr fdbgain]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "streson"
                      [sig fr fdbgain]
                      *global*)]
    (new out-types ast)))

(s/fdef streson
  :args (s/cat :sig valid-ar? :fr valid-kr? :fdbgain valid-kr? ))
(stest/instrument `streson)

(defn streson:a
  {:arglists '([asig kfr kfdbgain])}
  [sig fr fdbgain]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "streson"
                      [sig fr fdbgain]
                      *global*)]
    (new out-types ast)))

(s/fdef streson:a
  :args (s/cat :sig valid-ar? :fr valid-kr? :fdbgain valid-kr? ))
(stest/instrument `streson:a)

(defn oscil
  {:arglists '([aamp acps itableArr & iphase*] [aamp acps & itable* iphase*] [aamp kcps itableArr & iphase*] [aamp kcps & itable* iphase*] [kamp acps itableArr & iphase*] [kamp acps & itable* iphase*] [kamp kcps itableArr & iphase*] [kamp kcps & itable* iphase*] [kamp kcps & itable* iphase*])}
  [amp cps table & [ phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "oscil"
                      [amp cps table phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef oscil
  :args (s/alt
         :aaiArri (s/cat :amp valid-ar? :cps valid-ar? :table valid-iArr? :phase* valid-i?* )
         ))
(stest/instrument `oscil)

(defn oscil:a
  {:arglists '([aamp acps itableArr & iphase*] [aamp acps & itable* iphase*] [aamp kcps itableArr & iphase*] [aamp kcps & itable* iphase*] [kamp acps itableArr & iphase*] [kamp acps & itable* iphase*] [kamp kcps itableArr & iphase*] [kamp kcps & itable* iphase*])}
  [amp cps table & [ phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "oscil"
                      [amp cps table phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef oscil:a
  :args (s/alt
         :aaiArri (s/cat :amp valid-ar? :cps valid-ar? :table valid-iArr? :phase* valid-i?* )
         ))
(stest/instrument `oscil:a)

(defn oscil:k
  {:arglists '([kamp kcps & itable* iphase*])}
  [amp cps & [ table* phase* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "oscil"
                      [amp cps table* phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef oscil:k
  :args (s/cat :amp valid-kr? :cps valid-kr? :table* valid-i?* :phase* valid-i?* ))
(stest/instrument `oscil:k)

(defn statevar
  {:arglists '([ain xcenter-frequency xq & iosamps* istor*])}
  [in center-frequency q & [ osamps* stor* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "statevar"
                      [in center-frequency q osamps* stor*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef statevar
  :args (s/cat :in valid-ar? :center-frequency valid-x? :q valid-x? :osamps* valid-i?* :stor* valid-i?* ))
(stest/instrument `statevar)

(defn pchbend
  {:arglists '([& imin* imax*] [& imin* imax*])}
  [& [ min* max* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "pchbend"
                      [min* max*]
                      *global*)]
    (new out-types ast)))

(s/fdef pchbend
  :args (s/alt
         :ii (s/cat :min* valid-i?* :max* valid-i?* )
         ))
(stest/instrument `pchbend)

(defn pchbend:i
  {:arglists '([& imin* imax*])}
  [& [ min* max* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "pchbend"
                      [min* max*]
                      *global*)]
    (new out-types ast)))

(s/fdef pchbend:i
  :args (s/cat :min* valid-i?* :max* valid-i?* ))
(stest/instrument `pchbend:i)

(defn pchbend:k
  {:arglists '([& imin* imax*])}
  [& [ min* max* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "pchbend"
                      [min* max*]
                      *global*)]
    (new out-types ast)))

(s/fdef pchbend:k
  :args (s/cat :min* valid-i?* :max* valid-i?* ))
(stest/instrument `pchbend:k)

(defn ATSaddnz
  {:arglists '([ktimepnt Satsfile ibands & ibandoffset* ibandincr*] [ktimepnt iatsfile ibands & ibandoffset* ibandincr*])}
  [timepnt atsfile bands & [ bandoffset* bandincr* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "ATSaddnz"
                      [timepnt atsfile bands bandoffset* bandincr*]
                      *global*)]
    (new out-types ast)))

(s/fdef ATSaddnz
  :args (s/alt
         :kSiii (s/cat :timepnt valid-kr? :atsfile valid-S? :bands valid-i? :bandoffset* valid-i?* :bandincr* valid-i?* )
         ))
(stest/instrument `ATSaddnz)

(defn ATSaddnz:a
  {:arglists '([ktimepnt Satsfile ibands & ibandoffset* ibandincr*] [ktimepnt iatsfile ibands & ibandoffset* ibandincr*])}
  [timepnt atsfile bands & [ bandoffset* bandincr* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "ATSaddnz"
                      [timepnt atsfile bands bandoffset* bandincr*]
                      *global*)]
    (new out-types ast)))

(s/fdef ATSaddnz:a
  :args (s/alt
         :kSiii (s/cat :timepnt valid-kr? :atsfile valid-S? :bands valid-i? :bandoffset* valid-i?* :bandincr* valid-i?* )
         ))
(stest/instrument `ATSaddnz:a)

(defn spat3dt
  {:arglists '([ioutft iX iY iZ idistortion ift imode irlen & iftnocl*])}
  [outft X Y Z distortion ft mode rlen & [ ftnocl* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "spat3dt"
                      [outft X Y Z distortion ft mode rlen ftnocl*]
                      *global*)]
    (new out-types ast)))

(s/fdef spat3dt
  :args (s/cat :outft valid-i? :X valid-i? :Y valid-i? :Z valid-i? :distortion valid-i? :ft valid-i? :mode valid-i? :rlen valid-i? :ftnocl* valid-i?* ))
(stest/instrument `spat3dt)

(defn ATSbufread
  {:arglists '([ktimepnt kfmod Satsfile ipartials & ipartialoffset* ipartialincr*] [ktimepnt kfmod iatsfile ipartials & ipartialoffset* ipartialincr*])}
  [timepnt fmod atsfile partials & [ partialoffset* partialincr* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "ATSbufread"
                      [timepnt fmod atsfile partials partialoffset* partialincr*]
                      *global*)]
    (new out-types ast)))

(s/fdef ATSbufread
  :args (s/alt
         :kkSiii (s/cat :timepnt valid-kr? :fmod valid-kr? :atsfile valid-S? :partials valid-i? :partialoffset* valid-i?* :partialincr* valid-i?* )
         ))
(stest/instrument `ATSbufread)

(defn pitchamdf
  {:arglists '([asig imincps imaxcps & icps* imedi* idowns* iexcps* irmsmedi*])}
  [sig mincps maxcps & [ cps* medi* downs* excps* rmsmedi* ]]
  (let [out-types-quoted '[ControlSignal ControlSignal]
        out-types [ControlSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "pitchamdf"
                      [sig mincps maxcps cps* medi* downs* excps* rmsmedi*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef pitchamdf
  :args (s/cat :sig valid-ar? :mincps valid-i? :maxcps valid-i? :cps* valid-i?* :medi* valid-i?* :downs* valid-i?* :excps* valid-i?* :rmsmedi* valid-i?* ))
(stest/instrument `pitchamdf)

(defn vibr
  {:arglists '([kAverageAmp kAverageFreq itable])}
  [AverageAmp AverageFreq table]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "vibr"
                      [AverageAmp AverageFreq table]
                      *global*)]
    (new out-types ast)))

(s/fdef vibr
  :args (s/cat :AverageAmp valid-kr? :AverageFreq valid-kr? :table valid-i? ))
(stest/instrument `vibr)

(defn vibr:k
  {:arglists '([kAverageAmp kAverageFreq itable])}
  [AverageAmp AverageFreq table]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "vibr"
                      [AverageAmp AverageFreq table]
                      *global*)]
    (new out-types ast)))

(s/fdef vibr:k
  :args (s/cat :AverageAmp valid-kr? :AverageFreq valid-kr? :table valid-i? ))
(stest/instrument `vibr:k)

(defn zfilter2
  {:arglists '([asig kdamp kfreq iM iN & ib1* ib2* ibM3* ia4* ia5* iaN6* iaN7* iaN8* iaN9* iaN10* iaN11* iaN12* iaN13* iaN14* iaN15* iaN16*])}
  [sig damp freq M N & [ b1* b2* bM3* a4* a5* aN6* aN7* aN8* aN9* aN10* aN11* aN12* aN13* aN14* aN15* aN16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "zfilter2"
                      [sig damp freq M N b1* b2* bM3* a4* a5* aN6* aN7* aN8* aN9* aN10* aN11* aN12* aN13* aN14* aN15* aN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef zfilter2
  :args (s/cat :sig valid-ar? :damp valid-kr? :freq valid-kr? :M valid-i? :N valid-i? :b1* valid-i?* :b2* valid-i?* :bM3* valid-i?* :a4* valid-i?* :a5* valid-i?* :aN6* valid-i?* :aN7* valid-i?* :aN8* valid-i?* :aN9* valid-i?* :aN10* valid-i?* :aN11* valid-i?* :aN12* valid-i?* :aN13* valid-i?* :aN14* valid-i?* :aN15* valid-i?* :aN16* valid-i?* ))
(stest/instrument `zfilter2)

(defn zfilter2:a
  {:arglists '([asig kdamp kfreq iM iN & ib1* ib2* ibM3* ia4* ia5* iaN6* iaN7* iaN8* iaN9* iaN10* iaN11* iaN12* iaN13* iaN14* iaN15* iaN16*])}
  [sig damp freq M N & [ b1* b2* bM3* a4* a5* aN6* aN7* aN8* aN9* aN10* aN11* aN12* aN13* aN14* aN15* aN16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "zfilter2"
                      [sig damp freq M N b1* b2* bM3* a4* a5* aN6* aN7* aN8* aN9* aN10* aN11* aN12* aN13* aN14* aN15* aN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef zfilter2:a
  :args (s/cat :sig valid-ar? :damp valid-kr? :freq valid-kr? :M valid-i? :N valid-i? :b1* valid-i?* :b2* valid-i?* :bM3* valid-i?* :a4* valid-i?* :a5* valid-i?* :aN6* valid-i?* :aN7* valid-i?* :aN8* valid-i?* :aN9* valid-i?* :aN10* valid-i?* :aN11* valid-i?* :aN12* valid-i?* :aN13* valid-i?* :aN14* valid-i?* :aN15* valid-i?* :aN16* valid-i?* ))
(stest/instrument `zfilter2:a)

(defn vtablea
  {:arglists '([aindex ktable kinterp ixmode & aout1* aout2* aout3* aoutN4* aoutN5* aoutN6* aoutN7* aoutN8* aoutN9* aoutN10* aoutN11* aoutN12* aoutN13* aoutN14* aoutN15* aoutN16* aoutN17* aoutN18* aoutN19* aoutN20* aoutN21* aoutN22* aoutN23* aoutN24* aoutN25* aoutN26* aoutN27* aoutN28* aoutN29* aoutN30* aoutN31* aoutN32*])}
  [index table interp xmode & [ out1* out2* out3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16* outN17* outN18* outN19* outN20* outN21* outN22* outN23* outN24* outN25* outN26* outN27* outN28* outN29* outN30* outN31* outN32* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vtablea"
                      [index table interp xmode out1* out2* out3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16* outN17* outN18* outN19* outN20* outN21* outN22* outN23* outN24* outN25* outN26* outN27* outN28* outN29* outN30* outN31* outN32*]
                      *global*)]
    (new out-types ast)))

(s/fdef vtablea
  :args (s/cat :index valid-ar? :table valid-kr? :interp valid-kr? :xmode valid-i? :out1* valid-ar?* :out2* valid-ar?* :out3* valid-ar?* :outN4* valid-ar?* :outN5* valid-ar?* :outN6* valid-ar?* :outN7* valid-ar?* :outN8* valid-ar?* :outN9* valid-ar?* :outN10* valid-ar?* :outN11* valid-ar?* :outN12* valid-ar?* :outN13* valid-ar?* :outN14* valid-ar?* :outN15* valid-ar?* :outN16* valid-ar?* :outN17* valid-ar?* :outN18* valid-ar?* :outN19* valid-ar?* :outN20* valid-ar?* :outN21* valid-ar?* :outN22* valid-ar?* :outN23* valid-ar?* :outN24* valid-ar?* :outN25* valid-ar?* :outN26* valid-ar?* :outN27* valid-ar?* :outN28* valid-ar?* :outN29* valid-ar?* :outN30* valid-ar?* :outN31* valid-ar?* :outN32* valid-ar?* ))
(stest/instrument `vtablea)

(defn spat3d
  {:arglists '([ain kX kY kZ idistortion ift imode imdel iovr & istor*])}
  [in X Y Z distortion ft mode mdel ovr & [ stor* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "spat3d"
                      [in X Y Z distortion ft mode mdel ovr stor*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef spat3d
  :args (s/cat :in valid-ar? :X valid-kr? :Y valid-kr? :Z valid-kr? :distortion valid-i? :ft valid-i? :mode valid-i? :mdel valid-i? :ovr valid-i? :stor* valid-i?* ))
(stest/instrument `spat3d)

(defn foutk
  {:arglists '([Sfilename iformat & kout1* kout2* kout3* koutN4* koutN5* koutN6* koutN7* koutN8* koutN9* koutN10* koutN11* koutN12* koutN13* koutN14* koutN15* koutN16*] [ifilename iformat & kout1* kout2* kout3* koutN4* koutN5* koutN6* koutN7* koutN8* koutN9* koutN10* koutN11* koutN12* koutN13* koutN14* koutN15* koutN16*])}
  [filename format & [ out1* out2* out3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "foutk"
                      [filename format out1* out2* out3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef foutk
  :args (s/alt
         :Sikkkkkkkkkkkkkkkk (s/cat :filename valid-S? :format valid-i? :out1* valid-kr?* :out2* valid-kr?* :out3* valid-kr?* :outN4* valid-kr?* :outN5* valid-kr?* :outN6* valid-kr?* :outN7* valid-kr?* :outN8* valid-kr?* :outN9* valid-kr?* :outN10* valid-kr?* :outN11* valid-kr?* :outN12* valid-kr?* :outN13* valid-kr?* :outN14* valid-kr?* :outN15* valid-kr?* :outN16* valid-kr?* )
         ))
(stest/instrument `foutk)

(defn syncgrain
  {:arglists '([kamp kfreq kpitch kgrsize kprate ifun6 ifun7 iolaps])}
  [amp freq pitch grsize prate fun6 fun7 olaps]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "syncgrain"
                      [amp freq pitch grsize prate fun6 fun7 olaps]
                      *global*)]
    (new out-types ast)))

(s/fdef syncgrain
  :args (s/cat :amp valid-kr? :freq valid-kr? :pitch valid-kr? :grsize valid-kr? :prate valid-kr? :fun6 valid-i? :fun7 valid-i? :olaps valid-i? ))
(stest/instrument `syncgrain)

(defn syncgrain:a
  {:arglists '([kamp kfreq kpitch kgrsize kprate ifun6 ifun7 iolaps])}
  [amp freq pitch grsize prate fun6 fun7 olaps]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "syncgrain"
                      [amp freq pitch grsize prate fun6 fun7 olaps]
                      *global*)]
    (new out-types ast)))

(s/fdef syncgrain:a
  :args (s/cat :amp valid-kr? :freq valid-kr? :pitch valid-kr? :grsize valid-kr? :prate valid-kr? :fun6 valid-i? :fun7 valid-i? :olaps valid-i? ))
(stest/instrument `syncgrain:a)

(defn reverb
  {:arglists '([asig krvt & iskip*])}
  [sig rvt & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "reverb"
                      [sig rvt skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef reverb
  :args (s/cat :sig valid-ar? :rvt valid-kr? :skip* valid-i?* ))
(stest/instrument `reverb)

(defn reverb:a
  {:arglists '([asig krvt & iskip*])}
  [sig rvt & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "reverb"
                      [sig rvt skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef reverb:a
  :args (s/cat :sig valid-ar? :rvt valid-kr? :skip* valid-i?* ))
(stest/instrument `reverb:a)

(defn ATSinfo
  {:arglists '([Satsfile ilocation] [iatsfile ilocation])}
  [atsfile location]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ATSinfo"
                      [atsfile location]
                      *global*)]
    (new out-types ast)))

(s/fdef ATSinfo
  :args (s/alt
         :Si (s/cat :atsfile valid-S? :location valid-i? )
         ))
(stest/instrument `ATSinfo)

(defn ATSinfo:i
  {:arglists '([Satsfile ilocation] [iatsfile ilocation])}
  [atsfile location]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ATSinfo"
                      [atsfile location]
                      *global*)]
    (new out-types ast)))

(s/fdef ATSinfo:i
  :args (s/alt
         :Si (s/cat :atsfile valid-S? :location valid-i? )
         ))
(stest/instrument `ATSinfo:i)

(defn compress2
  {:arglists '([aasig acsig kthresh kloknee khiknee kratio katt krel ilook])}
  [asig csig thresh loknee hiknee ratio att rel look]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "compress2"
                      [asig csig thresh loknee hiknee ratio att rel look]
                      *global*)]
    (new out-types ast)))

(s/fdef compress2
  :args (s/cat :asig valid-ar? :csig valid-ar? :thresh valid-kr? :loknee valid-kr? :hiknee valid-kr? :ratio valid-kr? :att valid-kr? :rel valid-kr? :look valid-i? ))
(stest/instrument `compress2)

(defn compress2:a
  {:arglists '([aasig acsig kthresh kloknee khiknee kratio katt krel ilook])}
  [asig csig thresh loknee hiknee ratio att rel look]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "compress2"
                      [asig csig thresh loknee hiknee ratio att rel look]
                      *global*)]
    (new out-types ast)))

(s/fdef compress2:a
  :args (s/cat :asig valid-ar? :csig valid-ar? :thresh valid-kr? :loknee valid-kr? :hiknee valid-kr? :ratio valid-kr? :att valid-kr? :rel valid-kr? :look valid-i? ))
(stest/instrument `compress2:a)

(defn table3
  {:arglists '([xindex itable & ixmode* ixoff* iwrap*] [iindex itable & ixmode* ixoff* iwrap*] [xindex itable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "table3"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef table3
  :args (s/alt
         :xiiii (s/cat :index valid-x? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* )
         ))
(stest/instrument `table3)

(defn table3:a
  {:arglists '([xindex itable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "table3"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef table3:a
  :args (s/cat :index valid-x? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* ))
(stest/instrument `table3:a)

(defn table3:i
  {:arglists '([iindex itable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "table3"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef table3:i
  :args (s/cat :index valid-i? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* ))
(stest/instrument `table3:i)

(defn table3:k
  {:arglists '([xindex itable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "table3"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef table3:k
  :args (s/cat :index valid-x? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* ))
(stest/instrument `table3:k)

(defn outkpc
  {:arglists '([kchn kprog kmin kmax])}
  [chn prog min max]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outkpc"
                      [chn prog min max]
                      *global*)]
    (new out-types ast)))

(s/fdef outkpc
  :args (s/cat :chn valid-kr? :prog valid-kr? :min valid-kr? :max valid-kr? ))
(stest/instrument `outkpc)

(defn ntom
  {:arglists '([Snote] [Snote])}
  [note]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ntom"
                      [note]
                      *global*)]
    (new out-types ast)))

(s/fdef ntom
  :args (s/alt
         :S (s/cat :note valid-S? )
         ))
(stest/instrument `ntom)

(defn ntom:i
  {:arglists '([Snote])}
  [note]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ntom"
                      [note]
                      *global*)]
    (new out-types ast)))

(s/fdef ntom:i
  :args (s/cat :note valid-S? ))
(stest/instrument `ntom:i)

(defn ntom:k
  {:arglists '([Snote])}
  [note]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "ntom"
                      [note]
                      *global*)]
    (new out-types ast)))

(s/fdef ntom:k
  :args (s/cat :note valid-S? ))
(stest/instrument `ntom:k)

(defn wterrain
  {:arglists '([kamp kpch k_xcenter k_ycenter k_xradius k_yradius itabx itaby])}
  [amp pch _xcenter _ycenter _xradius _yradius tabx taby]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "wterrain"
                      [amp pch _xcenter _ycenter _xradius _yradius tabx taby]
                      *global*)]
    (new out-types ast)))

(s/fdef wterrain
  :args (s/cat :amp valid-kr? :pch valid-kr? :_xcenter valid-kr? :_ycenter valid-kr? :_xradius valid-kr? :_yradius valid-kr? :tabx valid-i? :taby valid-i? ))
(stest/instrument `wterrain)

(defn wterrain:a
  {:arglists '([kamp kpch k_xcenter k_ycenter k_xradius k_yradius itabx itaby])}
  [amp pch _xcenter _ycenter _xradius _yradius tabx taby]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "wterrain"
                      [amp pch _xcenter _ycenter _xradius _yradius tabx taby]
                      *global*)]
    (new out-types ast)))

(s/fdef wterrain:a
  :args (s/cat :amp valid-kr? :pch valid-kr? :_xcenter valid-kr? :_ycenter valid-kr? :_xradius valid-kr? :_yradius valid-kr? :tabx valid-i? :taby valid-i? ))
(stest/instrument `wterrain:a)

(defn ftsave
  {:arglists '([Sfilename iflag & ifn1* ifn2* ifn3* ifn4* ifn5* ifn6* ifn7* ifn8* ifn9* ifn10* ifn11* ifn12* ifn13* ifn14* ifn15* ifn16*] [ifilename iflag & ifn1* ifn2* ifn3* ifn4* ifn5* ifn6* ifn7* ifn8* ifn9* ifn10* ifn11* ifn12* ifn13* ifn14* ifn15* ifn16*])}
  [filename flag & [ fn1* fn2* fn3* fn4* fn5* fn6* fn7* fn8* fn9* fn10* fn11* fn12* fn13* fn14* fn15* fn16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "ftsave"
                      [filename flag fn1* fn2* fn3* fn4* fn5* fn6* fn7* fn8* fn9* fn10* fn11* fn12* fn13* fn14* fn15* fn16*]
                      *global*)]
    (new out-types ast)))

(s/fdef ftsave
  :args (s/alt
         :Siiiiiiiiiiiiiiiii (s/cat :filename valid-S? :flag valid-i? :fn1* valid-i?* :fn2* valid-i?* :fn3* valid-i?* :fn4* valid-i?* :fn5* valid-i?* :fn6* valid-i?* :fn7* valid-i?* :fn8* valid-i?* :fn9* valid-i?* :fn10* valid-i?* :fn11* valid-i?* :fn12* valid-i?* :fn13* valid-i?* :fn14* valid-i?* :fn15* valid-i?* :fn16* valid-i?* )
         ))
(stest/instrument `ftsave)

(defn vdelayxws
  {:arglists '([ain1 ain2 adl imd iws & ist*])}
  [in1 in2 dl md ws & [ st* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "vdelayxws"
                      [in1 in2 dl md ws st*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef vdelayxws
  :args (s/cat :in1 valid-ar? :in2 valid-ar? :dl valid-ar? :md valid-i? :ws valid-i? :st* valid-i?* ))
(stest/instrument `vdelayxws)

(defn midipolyaftertouch
  {:arglists '([xpolyaftertouch xcontrollervalue & ilow* ihigh*])}
  [polyaftertouch controllervalue & [ low* high* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "midipolyaftertouch"
                      [polyaftertouch controllervalue low* high*]
                      *global*)]
    (new out-types ast)))

(s/fdef midipolyaftertouch
  :args (s/cat :polyaftertouch valid-x? :controllervalue valid-x? :low* valid-i?* :high* valid-i?* ))
(stest/instrument `midipolyaftertouch)

(defn vpvoc
  {:arglists '([ktimpnt kfmod Sfile & ispecwp* itable*] [ktimpnt kfmod ifile & ispecwp* itable*])}
  [timpnt fmod file & [ specwp* table* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "vpvoc"
                      [timpnt fmod file specwp* table*]
                      *global*)]
    (new out-types ast)))

(s/fdef vpvoc
  :args (s/alt
         :kkSii (s/cat :timpnt valid-kr? :fmod valid-kr? :file valid-S? :specwp* valid-i?* :table* valid-i?* )
         ))
(stest/instrument `vpvoc)

(defn vpvoc:a
  {:arglists '([ktimpnt kfmod Sfile & ispecwp* itable*] [ktimpnt kfmod ifile & ispecwp* itable*])}
  [timpnt fmod file & [ specwp* table* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "vpvoc"
                      [timpnt fmod file specwp* table*]
                      *global*)]
    (new out-types ast)))

(s/fdef vpvoc:a
  :args (s/alt
         :kkSii (s/cat :timpnt valid-kr? :fmod valid-kr? :file valid-S? :specwp* valid-i?* :table* valid-i?* )
         ))
(stest/instrument `vpvoc:a)

(defn rect2pol
  {:arglists '([kinArr])}
  [in]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "rect2pol"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef rect2pol
  :args (s/cat :in valid-kArr? ))
(stest/instrument `rect2pol)

(defn rect2pol:kArr
  {:arglists '([kinArr])}
  [in]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "rect2pol"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef rect2pol:kArr
  :args (s/cat :in valid-kArr? ))
(stest/instrument `rect2pol:kArr)

(defn vaset
  {:arglists '([kval kindex avar])}
  [val index var]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vaset"
                      [val index var]
                      *global*)]
    (new out-types ast)))

(s/fdef vaset
  :args (s/cat :val valid-kr? :index valid-kr? :var valid-ar? ))
(stest/instrument `vaset)

(defn pvsynth
  {:arglists '([fsrc & iinit*])}
  [src & [ init* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pvsynth"
                      [src init*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsynth
  :args (s/cat :src valid-f? :init* valid-i?* ))
(stest/instrument `pvsynth)

(defn pvsynth:a
  {:arglists '([fsrc & iinit*])}
  [src & [ init* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pvsynth"
                      [src init*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsynth:a
  :args (s/cat :src valid-f? :init* valid-i?* ))
(stest/instrument `pvsynth:a)

(defn fmanal
  {:arglists '([are aim])}
  [re im]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "fmanal"
                      [re im]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef fmanal
  :args (s/cat :re valid-ar? :im valid-ar? ))
(stest/instrument `fmanal)

(defn scoreline_i
  {:arglists '([Sin])}
  [in]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "scoreline_i"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef scoreline_i
  :args (s/cat :in valid-S? ))
(stest/instrument `scoreline_i)

(defn combinv
  {:arglists '([asig krvt ilpt & iskip* insmps*])}
  [sig rvt lpt & [ skip* nsmps* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "combinv"
                      [sig rvt lpt skip* nsmps*]
                      *global*)]
    (new out-types ast)))

(s/fdef combinv
  :args (s/cat :sig valid-ar? :rvt valid-kr? :lpt valid-i? :skip* valid-i?* :nsmps* valid-i?* ))
(stest/instrument `combinv)

(defn combinv:a
  {:arglists '([asig krvt ilpt & iskip* insmps*])}
  [sig rvt lpt & [ skip* nsmps* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "combinv"
                      [sig rvt lpt skip* nsmps*]
                      *global*)]
    (new out-types ast)))

(s/fdef combinv:a
  :args (s/cat :sig valid-ar? :rvt valid-kr? :lpt valid-i? :skip* valid-i?* :nsmps* valid-i?* ))
(stest/instrument `combinv:a)

(defn outiat
  {:arglists '([ichn ivalue imin imax])}
  [chn value min max]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outiat"
                      [chn value min max]
                      *global*)]
    (new out-types ast)))

(s/fdef outiat
  :args (s/cat :chn valid-i? :value valid-i? :min valid-i? :max valid-i? ))
(stest/instrument `outiat)

(defn pvsmooth
  {:arglists '([fsigin xacf xfcf])}
  [sigin acf fcf]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsmooth"
                      [sigin acf fcf]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsmooth
  :args (s/cat :sigin valid-f? :acf valid-x? :fcf valid-x? ))
(stest/instrument `pvsmooth)

(defn pvsmooth:f
  {:arglists '([fsigin xacf xfcf])}
  [sigin acf fcf]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsmooth"
                      [sigin acf fcf]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsmooth:f
  :args (s/cat :sigin valid-f? :acf valid-x? :fcf valid-x? ))
(stest/instrument `pvsmooth:f)

(defn hsboscil
  {:arglists '([kamp ktone kbrite ibasfreq iwfn ioctfn & ioctcnt* iphase*])}
  [amp tone brite basfreq wfn octfn & [ octcnt* phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "hsboscil"
                      [amp tone brite basfreq wfn octfn octcnt* phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef hsboscil
  :args (s/cat :amp valid-kr? :tone valid-kr? :brite valid-kr? :basfreq valid-i? :wfn valid-i? :octfn valid-i? :octcnt* valid-i?* :phase* valid-i?* ))
(stest/instrument `hsboscil)

(defn hsboscil:a
  {:arglists '([kamp ktone kbrite ibasfreq iwfn ioctfn & ioctcnt* iphase*])}
  [amp tone brite basfreq wfn octfn & [ octcnt* phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "hsboscil"
                      [amp tone brite basfreq wfn octfn octcnt* phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef hsboscil:a
  :args (s/cat :amp valid-kr? :tone valid-kr? :brite valid-kr? :basfreq valid-i? :wfn valid-i? :octfn valid-i? :octcnt* valid-i?* :phase* valid-i?* ))
(stest/instrument `hsboscil:a)

(defn deltap
  {:arglists '([kdlt & idlt*])}
  [dlt & [ dlt* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "deltap"
                      [dlt dlt*]
                      *global*)]
    (new out-types ast)))

(s/fdef deltap
  :args (s/cat :dlt valid-kr? :dlt* valid-i?* ))
(stest/instrument `deltap)

(defn deltap:a
  {:arglists '([kdlt & idlt*])}
  [dlt & [ dlt* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "deltap"
                      [dlt dlt*]
                      *global*)]
    (new out-types ast)))

(s/fdef deltap:a
  :args (s/cat :dlt valid-kr? :dlt* valid-i?* ))
(stest/instrument `deltap:a)

(defn turnoff
  {:arglists '( [inst] [knst])}
  []
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "turnoff"
                      []
                      *global*)]
    (new out-types ast)))

(s/fdef turnoff
  :args (s/alt
         :i (s/cat :nst valid-i? )
         ))
(stest/instrument `turnoff)

(defn wgpluck
  {:arglists '([icps iamp kpick iplk idamp ifilt axcite])}
  [cps amp pick plk damp filt xcite]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "wgpluck"
                      [cps amp pick plk damp filt xcite]
                      *global*)]
    (new out-types ast)))

(s/fdef wgpluck
  :args (s/cat :cps valid-i? :amp valid-i? :pick valid-kr? :plk valid-i? :damp valid-i? :filt valid-i? :xcite valid-ar? ))
(stest/instrument `wgpluck)

(defn wgpluck:a
  {:arglists '([icps iamp kpick iplk idamp ifilt axcite])}
  [cps amp pick plk damp filt xcite]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "wgpluck"
                      [cps amp pick plk damp filt xcite]
                      *global*)]
    (new out-types ast)))

(s/fdef wgpluck:a
  :args (s/cat :cps valid-i? :amp valid-i? :pick valid-kr? :plk valid-i? :damp valid-i? :filt valid-i? :xcite valid-ar? ))
(stest/instrument `wgpluck:a)

(defn sndwarpst
  {:arglists '([xamp xtimewarp xresample ifn4 ibeg iwsize irandw ioverlap ifn9 itimemode])}
  [amp timewarp resample fn4 beg wsize randw overlap fn9 timemode]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "sndwarpst"
                      [amp timewarp resample fn4 beg wsize randw overlap fn9 timemode]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef sndwarpst
  :args (s/cat :amp valid-x? :timewarp valid-x? :resample valid-x? :fn4 valid-i? :beg valid-i? :wsize valid-i? :randw valid-i? :overlap valid-i? :fn9 valid-i? :timemode valid-i? ))
(stest/instrument `sndwarpst)

(defn transegr
  {:arglists '([ia idur itype & ib1* idur2* itype3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*] [ia idur itype & ib1* idur2* itype3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a dur type & [ b1* dur2* type3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "transegr"
                      [a dur type b1* dur2* type3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef transegr
  :args (s/alt
         :iiiiiiiiiiiiiiiiiii (s/cat :a valid-i? :dur valid-i? :type valid-i? :b1* valid-i?* :dur2* valid-i?* :type3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* )
         ))
(stest/instrument `transegr)

(defn transegr:a
  {:arglists '([ia idur itype & ib1* idur2* itype3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a dur type & [ b1* dur2* type3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "transegr"
                      [a dur type b1* dur2* type3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef transegr:a
  :args (s/cat :a valid-i? :dur valid-i? :type valid-i? :b1* valid-i?* :dur2* valid-i?* :type3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* ))
(stest/instrument `transegr:a)

(defn transegr:k
  {:arglists '([ia idur itype & ib1* idur2* itype3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a dur type & [ b1* dur2* type3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "transegr"
                      [a dur type b1* dur2* type3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef transegr:k
  :args (s/cat :a valid-i? :dur valid-i? :type valid-i? :b1* valid-i?* :dur2* valid-i?* :type3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* ))
(stest/instrument `transegr:k)

(defn betarand
  {:arglists '([krange kalpha kbeta] [krange kalpha kbeta] [krange kalpha kbeta])}
  [range alpha beta]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "betarand"
                      [range alpha beta]
                      *global*)]
    (new out-types ast)))

(s/fdef betarand
  :args (s/alt
         :kkk (s/cat :range valid-kr? :alpha valid-kr? :beta valid-kr? )
         ))
(stest/instrument `betarand)

(defn betarand:a
  {:arglists '([krange kalpha kbeta])}
  [range alpha beta]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "betarand"
                      [range alpha beta]
                      *global*)]
    (new out-types ast)))

(s/fdef betarand:a
  :args (s/cat :range valid-kr? :alpha valid-kr? :beta valid-kr? ))
(stest/instrument `betarand:a)

(defn betarand:i
  {:arglists '([krange kalpha kbeta])}
  [range alpha beta]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "betarand"
                      [range alpha beta]
                      *global*)]
    (new out-types ast)))

(s/fdef betarand:i
  :args (s/cat :range valid-kr? :alpha valid-kr? :beta valid-kr? ))
(stest/instrument `betarand:i)

(defn betarand:k
  {:arglists '([krange kalpha kbeta])}
  [range alpha beta]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "betarand"
                      [range alpha beta]
                      *global*)]
    (new out-types ast)))

(s/fdef betarand:k
  :args (s/cat :range valid-kr? :alpha valid-kr? :beta valid-kr? ))
(stest/instrument `betarand:k)

(defn ATSinterpread
  {:arglists '([kfreq])}
  [freq]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "ATSinterpread"
                      [freq]
                      *global*)]
    (new out-types ast)))

(s/fdef ATSinterpread
  :args (s/cat :freq valid-kr? ))
(stest/instrument `ATSinterpread)

(defn ATSinterpread:k
  {:arglists '([kfreq])}
  [freq]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "ATSinterpread"
                      [freq]
                      *global*)]
    (new out-types ast)))

(s/fdef ATSinterpread:k
  :args (s/cat :freq valid-kr? ))
(stest/instrument `ATSinterpread:k)

(defn vcella
  {:arglists '([ktrig kreinit ioutFunc initStateFunc iRuleFunc ielements irulelen & iradius*])}
  [trig reinit outFunc nitStateFunc RuleFunc elements rulelen & [ radius* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vcella"
                      [trig reinit outFunc nitStateFunc RuleFunc elements rulelen radius*]
                      *global*)]
    (new out-types ast)))

(s/fdef vcella
  :args (s/cat :trig valid-kr? :reinit valid-kr? :outFunc valid-i? :nitStateFunc valid-i? :RuleFunc valid-i? :elements valid-i? :rulelen valid-i? :radius* valid-i?* ))
(stest/instrument `vcella)

(defn vpow
  {:arglists '([itable kval kelements & kdstoffset* kverbose*])}
  [table val elements & [ dstoffset* verbose* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vpow"
                      [table val elements dstoffset* verbose*]
                      *global*)]
    (new out-types ast)))

(s/fdef vpow
  :args (s/cat :table valid-i? :val valid-kr? :elements valid-kr? :dstoffset* valid-kr?* :verbose* valid-kr?* ))
(stest/instrument `vpow)

(defn strindexk
  {:arglists '([Sarg1 Sarg2])}
  [arg1 arg2]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "strindexk"
                      [arg1 arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef strindexk
  :args (s/cat :arg1 valid-S? :arg2 valid-S? ))
(stest/instrument `strindexk)

(defn strindexk:k
  {:arglists '([Sarg1 Sarg2])}
  [arg1 arg2]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "strindexk"
                      [arg1 arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef strindexk:k
  :args (s/cat :arg1 valid-S? :arg2 valid-S? ))
(stest/instrument `strindexk:k)

(defn sflooper
  {:arglists '([ivel inotenum kamp kpitch ipreindex kloopstart kloopend kcrossfade & istart* imode* ifenv* iskip*])}
  [vel notenum amp pitch preindex loopstart loopend crossfade & [ start* mode* fenv* skip* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "sflooper"
                      [vel notenum amp pitch preindex loopstart loopend crossfade start* mode* fenv* skip*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef sflooper
  :args (s/cat :vel valid-i? :notenum valid-i? :amp valid-kr? :pitch valid-kr? :preindex valid-i? :loopstart valid-kr? :loopend valid-kr? :crossfade valid-kr? :start* valid-i?* :mode* valid-i?* :fenv* valid-i?* :skip* valid-i?* ))
(stest/instrument `sflooper)

(defn diskgrain
  {:arglists '([Sfname kamp kfreq kpitch kgrsize kprate ifun iolaps & imaxgrsize* ioffset*])}
  [fname amp freq pitch grsize prate fun olaps & [ maxgrsize* offset* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "diskgrain"
                      [fname amp freq pitch grsize prate fun olaps maxgrsize* offset*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef diskgrain
  :args (s/cat :fname valid-S? :amp valid-kr? :freq valid-kr? :pitch valid-kr? :grsize valid-kr? :prate valid-kr? :fun valid-i? :olaps valid-i? :maxgrsize* valid-i?* :offset* valid-i?* ))
(stest/instrument `diskgrain)

(defn expon
  {:arglists '([ia idur ib] [ia idur ib])}
  [a dur b]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "expon"
                      [a dur b]
                      *global*)]
    (new out-types ast)))

(s/fdef expon
  :args (s/alt
         :iii (s/cat :a valid-i? :dur valid-i? :b valid-i? )
         ))
(stest/instrument `expon)

(defn expon:a
  {:arglists '([ia idur ib])}
  [a dur b]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "expon"
                      [a dur b]
                      *global*)]
    (new out-types ast)))

(s/fdef expon:a
  :args (s/cat :a valid-i? :dur valid-i? :b valid-i? ))
(stest/instrument `expon:a)

(defn expon:k
  {:arglists '([ia idur ib])}
  [a dur b]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "expon"
                      [a dur b]
                      *global*)]
    (new out-types ast)))

(s/fdef expon:k
  :args (s/cat :a valid-i? :dur valid-i? :b valid-i? ))
(stest/instrument `expon:k)

(defn fmrhode
  {:arglists '([kamp kfreq kc3 kc4 kvdepth kvrate ifn7 ifn8 ifn9 ifn10 ivfn])}
  [amp freq c3 c4 vdepth vrate fn7 fn8 fn9 fn10 vfn]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fmrhode"
                      [amp freq c3 c4 vdepth vrate fn7 fn8 fn9 fn10 vfn]
                      *global*)]
    (new out-types ast)))

(s/fdef fmrhode
  :args (s/cat :amp valid-kr? :freq valid-kr? :c3 valid-kr? :c4 valid-kr? :vdepth valid-kr? :vrate valid-kr? :fn7 valid-i? :fn8 valid-i? :fn9 valid-i? :fn10 valid-i? :vfn valid-i? ))
(stest/instrument `fmrhode)

(defn fmrhode:a
  {:arglists '([kamp kfreq kc3 kc4 kvdepth kvrate ifn7 ifn8 ifn9 ifn10 ivfn])}
  [amp freq c3 c4 vdepth vrate fn7 fn8 fn9 fn10 vfn]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fmrhode"
                      [amp freq c3 c4 vdepth vrate fn7 fn8 fn9 fn10 vfn]
                      *global*)]
    (new out-types ast)))

(s/fdef fmrhode:a
  :args (s/cat :amp valid-kr? :freq valid-kr? :c3 valid-kr? :c4 valid-kr? :vdepth valid-kr? :vrate valid-kr? :fn7 valid-i? :fn8 valid-i? :fn9 valid-i? :fn10 valid-i? :vfn valid-i? ))
(stest/instrument `fmrhode:a)

(defn strlen
  {:arglists '([Sstr])}
  [str]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "strlen"
                      [str]
                      *global*)]
    (new out-types ast)))

(s/fdef strlen
  :args (s/cat :str valid-S? ))
(stest/instrument `strlen)

(defn strlen:i
  {:arglists '([Sstr])}
  [str]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "strlen"
                      [str]
                      *global*)]
    (new out-types ast)))

(s/fdef strlen:i
  :args (s/cat :str valid-S? ))
(stest/instrument `strlen:i)

(defn vbaplsinit
  {:arglists '([idim ilsnum ilsarrayArr] [idim ilsnum & ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray* ilsarray*])}
  [dim lsnum lsarray]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vbaplsinit"
                      [dim lsnum lsarray]
                      *global*)]
    (new out-types ast)))

(s/fdef vbaplsinit
  :args (s/alt
         :iiiArr (s/cat :dim valid-i? :lsnum valid-i? :lsarray valid-iArr? )
         ))
(stest/instrument `vbaplsinit)

(defn wgflute
  {:arglists '([kamp kfreq kjet iatt idetk kngain kvibf kvamp & itable* iminfreq* ijetrf* iendrf*])}
  [amp freq jet att detk ngain vibf vamp & [ table* minfreq* jetrf* endrf* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "wgflute"
                      [amp freq jet att detk ngain vibf vamp table* minfreq* jetrf* endrf*]
                      *global*)]
    (new out-types ast)))

(s/fdef wgflute
  :args (s/cat :amp valid-kr? :freq valid-kr? :jet valid-kr? :att valid-i? :detk valid-i? :ngain valid-kr? :vibf valid-kr? :vamp valid-kr? :table* valid-i?* :minfreq* valid-i?* :jetrf* valid-i?* :endrf* valid-i?* ))
(stest/instrument `wgflute)

(defn wgflute:a
  {:arglists '([kamp kfreq kjet iatt idetk kngain kvibf kvamp & itable* iminfreq* ijetrf* iendrf*])}
  [amp freq jet att detk ngain vibf vamp & [ table* minfreq* jetrf* endrf* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "wgflute"
                      [amp freq jet att detk ngain vibf vamp table* minfreq* jetrf* endrf*]
                      *global*)]
    (new out-types ast)))

(s/fdef wgflute:a
  :args (s/cat :amp valid-kr? :freq valid-kr? :jet valid-kr? :att valid-i? :detk valid-i? :ngain valid-kr? :vibf valid-kr? :vamp valid-kr? :table* valid-i?* :minfreq* valid-i?* :jetrf* valid-i?* :endrf* valid-i?* ))
(stest/instrument `wgflute:a)

(defn serialWrite
  {:arglists '([iPort SBytes] [iPort kBytes])}
  [Port Bytes]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "serialWrite"
                      [Port Bytes]
                      *global*)]
    (new out-types ast)))

(s/fdef serialWrite
  :args (s/alt
         :iS (s/cat :Port valid-i? :Bytes valid-S? )
         ))
(stest/instrument `serialWrite)

(defn inletf
  {:arglists '([Sname])}
  [name]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "inletf"
                      [name]
                      *global*)]
    (new out-types ast)))

(s/fdef inletf
  :args (s/cat :name valid-S? ))
(stest/instrument `inletf)

(defn inletf:f
  {:arglists '([Sname])}
  [name]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "inletf"
                      [name]
                      *global*)]
    (new out-types ast)))

(s/fdef inletf:f
  :args (s/cat :name valid-S? ))
(stest/instrument `inletf:f)

(defn lposcil
  {:arglists '([kamp kfreqratio kloop kend & itable* iphase*])}
  [amp freqratio loop end & [ table* phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "lposcil"
                      [amp freqratio loop end table* phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef lposcil
  :args (s/cat :amp valid-kr? :freqratio valid-kr? :loop valid-kr? :end valid-kr? :table* valid-i?* :phase* valid-i?* ))
(stest/instrument `lposcil)

(defn lposcil:a
  {:arglists '([kamp kfreqratio kloop kend & itable* iphase*])}
  [amp freqratio loop end & [ table* phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "lposcil"
                      [amp freqratio loop end table* phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef lposcil:a
  :args (s/cat :amp valid-kr? :freqratio valid-kr? :loop valid-kr? :end valid-kr? :table* valid-i?* :phase* valid-i?* ))
(stest/instrument `lposcil:a)

(defn strupperk
  {:arglists '([Ssrc])}
  [src]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "strupperk"
                      [src]
                      *global*)]
    (new out-types ast)))

(s/fdef strupperk
  :args (s/cat :src valid-S? ))
(stest/instrument `strupperk)

(defn strupperk:S
  {:arglists '([Ssrc])}
  [src]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "strupperk"
                      [src]
                      *global*)]
    (new out-types ast)))

(s/fdef strupperk:S
  :args (s/cat :src valid-S? ))
(stest/instrument `strupperk:S)

(defn noteondur2
  {:arglists '([ichn inum ivel idur])}
  [chn num vel dur]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "noteondur2"
                      [chn num vel dur]
                      *global*)]
    (new out-types ast)))

(s/fdef noteondur2
  :args (s/cat :chn valid-i? :num valid-i? :vel valid-i? :dur valid-i? ))
(stest/instrument `noteondur2)

(defn vdivv_i
  {:arglists '([ifn1 ifn2 ielements & idstoffset* isrcoffset*])}
  [fn1 fn2 elements & [ dstoffset* srcoffset* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vdivv_i"
                      [fn1 fn2 elements dstoffset* srcoffset*]
                      *global*)]
    (new out-types ast)))

(s/fdef vdivv_i
  :args (s/cat :fn1 valid-i? :fn2 valid-i? :elements valid-i? :dstoffset* valid-i?* :srcoffset* valid-i?* ))
(stest/instrument `vdivv_i)

(defn rewindscore
  {:arglists '()}
  []
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "rewindscore"
                      []
                      *global*)]
    (new out-types ast)))


(defn serialEnd
  {:arglists '([iPort])}
  [Port]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "serialEnd"
                      [Port]
                      *global*)]
    (new out-types ast)))

(s/fdef serialEnd
  :args (s/cat :Port valid-i? ))
(stest/instrument `serialEnd)

(defn initc14
  {:arglists '([ichan ictlno2 ictlno3 ivalue])}
  [chan ctlno2 ctlno3 value]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "initc14"
                      [chan ctlno2 ctlno3 value]
                      *global*)]
    (new out-types ast)))

(s/fdef initc14
  :args (s/cat :chan valid-i? :ctlno2 valid-i? :ctlno3 valid-i? :value valid-i? ))
(stest/instrument `initc14)

(defn marimba
  {:arglists '([kamp kfreq ihrd ipos imp kvibf kvamp ivibfn idec & idoubles* itriples*])}
  [amp freq hrd pos mp vibf vamp vibfn dec & [ doubles* triples* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "marimba"
                      [amp freq hrd pos mp vibf vamp vibfn dec doubles* triples*]
                      *global*)]
    (new out-types ast)))

(s/fdef marimba
  :args (s/cat :amp valid-kr? :freq valid-kr? :hrd valid-i? :pos valid-i? :mp valid-i? :vibf valid-kr? :vamp valid-kr? :vibfn valid-i? :dec valid-i? :doubles* valid-i?* :triples* valid-i?* ))
(stest/instrument `marimba)

(defn marimba:a
  {:arglists '([kamp kfreq ihrd ipos imp kvibf kvamp ivibfn idec & idoubles* itriples*])}
  [amp freq hrd pos mp vibf vamp vibfn dec & [ doubles* triples* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "marimba"
                      [amp freq hrd pos mp vibf vamp vibfn dec doubles* triples*]
                      *global*)]
    (new out-types ast)))

(s/fdef marimba:a
  :args (s/cat :amp valid-kr? :freq valid-kr? :hrd valid-i? :pos valid-i? :mp valid-i? :vibf valid-kr? :vamp valid-kr? :vibfn valid-i? :dec valid-i? :doubles* valid-i?* :triples* valid-i?* ))
(stest/instrument `marimba:a)

(defn pvsmorph
  {:arglists '([fsig1 fsig2 kampint kfrqint])}
  [sig1 sig2 ampint frqint]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsmorph"
                      [sig1 sig2 ampint frqint]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsmorph
  :args (s/cat :sig1 valid-f? :sig2 valid-f? :ampint valid-kr? :frqint valid-kr? ))
(stest/instrument `pvsmorph)

(defn pvsmorph:f
  {:arglists '([fsig1 fsig2 kampint kfrqint])}
  [sig1 sig2 ampint frqint]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsmorph"
                      [sig1 sig2 ampint frqint]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsmorph:f
  :args (s/cat :sig1 valid-f? :sig2 valid-f? :ampint valid-kr? :frqint valid-kr? ))
(stest/instrument `pvsmorph:f)

(defn linlin
  {:arglists '([kin ksrclo ksrchi kdstlo kdsthi])}
  [in srclo srchi dstlo dsthi]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "linlin"
                      [in srclo srchi dstlo dsthi]
                      *global*)]
    (new out-types ast)))

(s/fdef linlin
  :args (s/cat :in valid-kr? :srclo valid-kr? :srchi valid-kr? :dstlo valid-kr? :dsthi valid-kr? ))
(stest/instrument `linlin)

(defn linlin:k
  {:arglists '([kin ksrclo ksrchi kdstlo kdsthi])}
  [in srclo srchi dstlo dsthi]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "linlin"
                      [in srclo srchi dstlo dsthi]
                      *global*)]
    (new out-types ast)))

(s/fdef linlin:k
  :args (s/cat :in valid-kr? :srclo valid-kr? :srchi valid-kr? :dstlo valid-kr? :dsthi valid-kr? ))
(stest/instrument `linlin:k)

(defn vdelayxs
  {:arglists '([ain1 ain2 adl imd iws & ist*])}
  [in1 in2 dl md ws & [ st* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "vdelayxs"
                      [in1 in2 dl md ws st*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef vdelayxs
  :args (s/cat :in1 valid-ar? :in2 valid-ar? :dl valid-ar? :md valid-i? :ws valid-i? :st* valid-i?* ))
(stest/instrument `vdelayxs)

(defn wgclar
  {:arglists '([kamp kfreq kstiff iatt idetk kngain kvibf kvamp & itable* iminfreq*])}
  [amp freq stiff att detk ngain vibf vamp & [ table* minfreq* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "wgclar"
                      [amp freq stiff att detk ngain vibf vamp table* minfreq*]
                      *global*)]
    (new out-types ast)))

(s/fdef wgclar
  :args (s/cat :amp valid-kr? :freq valid-kr? :stiff valid-kr? :att valid-i? :detk valid-i? :ngain valid-kr? :vibf valid-kr? :vamp valid-kr? :table* valid-i?* :minfreq* valid-i?* ))
(stest/instrument `wgclar)

(defn wgclar:a
  {:arglists '([kamp kfreq kstiff iatt idetk kngain kvibf kvamp & itable* iminfreq*])}
  [amp freq stiff att detk ngain vibf vamp & [ table* minfreq* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "wgclar"
                      [amp freq stiff att detk ngain vibf vamp table* minfreq*]
                      *global*)]
    (new out-types ast)))

(s/fdef wgclar:a
  :args (s/cat :amp valid-kr? :freq valid-kr? :stiff valid-kr? :att valid-i? :detk valid-i? :ngain valid-kr? :vibf valid-kr? :vamp valid-kr? :table* valid-i?* :minfreq* valid-i?* ))
(stest/instrument `wgclar:a)

(defn midion
  {:arglists '([kchn knum kvel])}
  [chn num vel]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "midion"
                      [chn num vel]
                      *global*)]
    (new out-types ast)))

(s/fdef midion
  :args (s/cat :chn valid-kr? :num valid-kr? :vel valid-kr? ))
(stest/instrument `midion)

(defn serialBegin
  {:arglists '([SPortName & ibaudRate*])}
  [PortName & [ baudRate* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "serialBegin"
                      [PortName baudRate*]
                      *global*)]
    (new out-types ast)))

(s/fdef serialBegin
  :args (s/cat :PortName valid-S? :baudRate* valid-i?* ))
(stest/instrument `serialBegin)

(defn serialBegin:i
  {:arglists '([SPortName & ibaudRate*])}
  [PortName & [ baudRate* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "serialBegin"
                      [PortName baudRate*]
                      *global*)]
    (new out-types ast)))

(s/fdef serialBegin:i
  :args (s/cat :PortName valid-S? :baudRate* valid-i?* ))
(stest/instrument `serialBegin:i)

(defn vaddv_i
  {:arglists '([ifn1 ifn2 ielements & idstoffset* isrcoffset*])}
  [fn1 fn2 elements & [ dstoffset* srcoffset* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vaddv_i"
                      [fn1 fn2 elements dstoffset* srcoffset*]
                      *global*)]
    (new out-types ast)))

(s/fdef vaddv_i
  :args (s/cat :fn1 valid-i? :fn2 valid-i? :elements valid-i? :dstoffset* valid-i?* :srcoffset* valid-i?* ))
(stest/instrument `vaddv_i)

(defn sfplay3m
  {:arglists '([ivel inotenum xamp xfreq ipreindex & iflag* ioffset* ienv*])}
  [vel notenum amp freq preindex & [ flag* offset* env* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sfplay3m"
                      [vel notenum amp freq preindex flag* offset* env*]
                      *global*)]
    (new out-types ast)))

(s/fdef sfplay3m
  :args (s/cat :vel valid-i? :notenum valid-i? :amp valid-x? :freq valid-x? :preindex valid-i? :flag* valid-i?* :offset* valid-i?* :env* valid-i?* ))
(stest/instrument `sfplay3m)

(defn sfplay3m:a
  {:arglists '([ivel inotenum xamp xfreq ipreindex & iflag* ioffset* ienv*])}
  [vel notenum amp freq preindex & [ flag* offset* env* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sfplay3m"
                      [vel notenum amp freq preindex flag* offset* env*]
                      *global*)]
    (new out-types ast)))

(s/fdef sfplay3m:a
  :args (s/cat :vel valid-i? :notenum valid-i? :amp valid-x? :freq valid-x? :preindex valid-i? :flag* valid-i?* :offset* valid-i?* :env* valid-i?* ))
(stest/instrument `sfplay3m:a)

(defn strupper
  {:arglists '([Ssrc])}
  [src]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "strupper"
                      [src]
                      *global*)]
    (new out-types ast)))

(s/fdef strupper
  :args (s/cat :src valid-S? ))
(stest/instrument `strupper)

(defn strupper:S
  {:arglists '([Ssrc])}
  [src]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "strupper"
                      [src]
                      *global*)]
    (new out-types ast)))

(s/fdef strupper:S
  :args (s/cat :src valid-S? ))
(stest/instrument `strupper:S)

(defn soundin
  {:arglists '([Sfilcod & iskptim* iformat* iskipinit* ibufsize*] [ifilcod & iskptim* iformat* iskipinit* ibufsize*])}
  [filcod & [ skptim* format* skipinit* bufsize* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "soundin"
                      [filcod skptim* format* skipinit* bufsize*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef soundin
  :args (s/alt
         :Siiii (s/cat :filcod valid-S? :skptim* valid-i?* :format* valid-i?* :skipinit* valid-i?* :bufsize* valid-i?* )
         ))
(stest/instrument `soundin)

(defn vco2ift
  {:arglists '([icps & iwave* inyx*])}
  [cps & [ wave* nyx* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "vco2ift"
                      [cps wave* nyx*]
                      *global*)]
    (new out-types ast)))

(s/fdef vco2ift
  :args (s/cat :cps valid-i? :wave* valid-i?* :nyx* valid-i?* ))
(stest/instrument `vco2ift)

(defn vco2ift:i
  {:arglists '([icps & iwave* inyx*])}
  [cps & [ wave* nyx* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "vco2ift"
                      [cps wave* nyx*]
                      *global*)]
    (new out-types ast)))

(s/fdef vco2ift:i
  :args (s/cat :cps valid-i? :wave* valid-i?* :nyx* valid-i?* ))
(stest/instrument `vco2ift:i)

(defn resonr
  {:arglists '([asig xcenter-frequency xbandwidth & iscale* iskip*])}
  [sig center-frequency bandwidth & [ scale* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "resonr"
                      [sig center-frequency bandwidth scale* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef resonr
  :args (s/cat :sig valid-ar? :center-frequency valid-x? :bandwidth valid-x? :scale* valid-i?* :skip* valid-i?* ))
(stest/instrument `resonr)

(defn resonr:a
  {:arglists '([asig xcenter-frequency xbandwidth & iscale* iskip*])}
  [sig center-frequency bandwidth & [ scale* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "resonr"
                      [sig center-frequency bandwidth scale* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef resonr:a
  :args (s/cat :sig valid-ar? :center-frequency valid-x? :bandwidth valid-x? :scale* valid-i?* :skip* valid-i?* ))
(stest/instrument `resonr:a)

(defn lpslot
  {:arglists '([islot])}
  [slot]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "lpslot"
                      [slot]
                      *global*)]
    (new out-types ast)))

(s/fdef lpslot
  :args (s/cat :slot valid-i? ))
(stest/instrument `lpslot)

(defn bqrez
  {:arglists '([asig xcutoff-frequency xresonance & imode* iskip*])}
  [sig cutoff-frequency resonance & [ mode* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "bqrez"
                      [sig cutoff-frequency resonance mode* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef bqrez
  :args (s/cat :sig valid-ar? :cutoff-frequency valid-x? :resonance valid-x? :mode* valid-i?* :skip* valid-i?* ))
(stest/instrument `bqrez)

(defn bqrez:a
  {:arglists '([asig xcutoff-frequency xresonance & imode* iskip*])}
  [sig cutoff-frequency resonance & [ mode* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "bqrez"
                      [sig cutoff-frequency resonance mode* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef bqrez:a
  :args (s/cat :sig valid-ar? :cutoff-frequency valid-x? :resonance valid-x? :mode* valid-i?* :skip* valid-i?* ))
(stest/instrument `bqrez:a)

(defn resonxk
  {:arglists '([ksig kcenter-frequency kbandwidth & inumlayer* iscale* istor*])}
  [sig center-frequency bandwidth & [ numlayer* scale* stor* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "resonxk"
                      [sig center-frequency bandwidth numlayer* scale* stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef resonxk
  :args (s/cat :sig valid-kr? :center-frequency valid-kr? :bandwidth valid-kr? :numlayer* valid-i?* :scale* valid-i?* :stor* valid-i?* ))
(stest/instrument `resonxk)

(defn resonxk:k
  {:arglists '([ksig kcenter-frequency kbandwidth & inumlayer* iscale* istor*])}
  [sig center-frequency bandwidth & [ numlayer* scale* stor* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "resonxk"
                      [sig center-frequency bandwidth numlayer* scale* stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef resonxk:k
  :args (s/cat :sig valid-kr? :center-frequency valid-kr? :bandwidth valid-kr? :numlayer* valid-i?* :scale* valid-i?* :stor* valid-i?* ))
(stest/instrument `resonxk:k)

(defn phaser1
  {:arglists '([asig kfreq kord kfeedback & iskip*])}
  [sig freq ord feedback & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "phaser1"
                      [sig freq ord feedback skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef phaser1
  :args (s/cat :sig valid-ar? :freq valid-kr? :ord valid-kr? :feedback valid-kr? :skip* valid-i?* ))
(stest/instrument `phaser1)

(defn phaser1:a
  {:arglists '([asig kfreq kord kfeedback & iskip*])}
  [sig freq ord feedback & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "phaser1"
                      [sig freq ord feedback skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef phaser1:a
  :args (s/cat :sig valid-ar? :freq valid-kr? :ord valid-kr? :feedback valid-kr? :skip* valid-i?* ))
(stest/instrument `phaser1:a)

(defn dconv
  {:arglists '([asig isize itable])}
  [sig size table]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "dconv"
                      [sig size table]
                      *global*)]
    (new out-types ast)))

(s/fdef dconv
  :args (s/cat :sig valid-ar? :size valid-i? :table valid-i? ))
(stest/instrument `dconv)

(defn dconv:a
  {:arglists '([asig isize itable])}
  [sig size table]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "dconv"
                      [sig size table]
                      *global*)]
    (new out-types ast)))

(s/fdef dconv:a
  :args (s/cat :sig valid-ar? :size valid-i? :table valid-i? ))
(stest/instrument `dconv:a)

(defn vbapz
  {:arglists '([inumchnls istartndx asig kazim & kelev* kspread* ispread*])}
  [numchnls startndx sig azim & [ elev* spread* spread* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vbapz"
                      [numchnls startndx sig azim elev* spread* spread*]
                      *global*)]
    (new out-types ast)))

(s/fdef vbapz
  :args (s/cat :numchnls valid-i? :startndx valid-i? :sig valid-ar? :azim valid-kr? :elev* valid-kr?* :spread* valid-kr?* :spread* valid-i?* ))
(stest/instrument `vbapz)

(defn lowres
  {:arglists '([asig acutoff aresonance & iskip*] [asig acutoff kresonance & iskip*] [asig kcutoff aresonance & iskip*] [asig kcutoff kresonance & iskip*])}
  [sig cutoff resonance & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "lowres"
                      [sig cutoff resonance skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef lowres
  :args (s/alt
         :aaai (s/cat :sig valid-ar? :cutoff valid-ar? :resonance valid-ar? :skip* valid-i?* )
         ))
(stest/instrument `lowres)

(defn lowres:a
  {:arglists '([asig acutoff aresonance & iskip*] [asig acutoff kresonance & iskip*] [asig kcutoff aresonance & iskip*] [asig kcutoff kresonance & iskip*])}
  [sig cutoff resonance & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "lowres"
                      [sig cutoff resonance skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef lowres:a
  :args (s/alt
         :aaai (s/cat :sig valid-ar? :cutoff valid-ar? :resonance valid-ar? :skip* valid-i?* )
         ))
(stest/instrument `lowres:a)

(defn deltapn
  {:arglists '([xnumsamps & inumsamps*])}
  [numsamps & [ numsamps* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "deltapn"
                      [numsamps numsamps*]
                      *global*)]
    (new out-types ast)))

(s/fdef deltapn
  :args (s/cat :numsamps valid-x? :numsamps* valid-i?* ))
(stest/instrument `deltapn)

(defn deltapn:a
  {:arglists '([xnumsamps & inumsamps*])}
  [numsamps & [ numsamps* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "deltapn"
                      [numsamps numsamps*]
                      *global*)]
    (new out-types ast)))

(s/fdef deltapn:a
  :args (s/cat :numsamps valid-x? :numsamps* valid-i?* ))
(stest/instrument `deltapn:a)

(defn instr
  {:arglists '()}
  []
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "instr"
                      []
                      *global*)]
    (new out-types ast)))


(defn miditempo
  {:arglists '()}
  []
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "miditempo"
                      []
                      *global*)]
    (new out-types ast)))


(defn miditempo:k
  {:arglists '()}
  []
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "miditempo"
                      []
                      *global*)]
    (new out-types ast)))


(defn oscil3
  {:arglists '([aamp acps itableArr & iphase*] [aamp acps & itable* iphase*] [aamp kcps itableArr & iphase*] [aamp kcps & itable* iphase*] [kamp acps itableArr & iphase*] [kamp acps & itable* iphase*] [kamp kcps itableArr & iphase*] [kamp kcps & itable* iphase*] [kamp kcps itableArr & iphase*] [kamp kcps & itable* iphase*])}
  [amp cps table & [ phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "oscil3"
                      [amp cps table phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef oscil3
  :args (s/alt
         :aaiArri (s/cat :amp valid-ar? :cps valid-ar? :table valid-iArr? :phase* valid-i?* )
         ))
(stest/instrument `oscil3)

(defn oscil3:a
  {:arglists '([aamp acps itableArr & iphase*] [aamp acps & itable* iphase*] [aamp kcps itableArr & iphase*] [aamp kcps & itable* iphase*] [kamp acps itableArr & iphase*] [kamp acps & itable* iphase*] [kamp kcps itableArr & iphase*] [kamp kcps & itable* iphase*])}
  [amp cps table & [ phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "oscil3"
                      [amp cps table phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef oscil3:a
  :args (s/alt
         :aaiArri (s/cat :amp valid-ar? :cps valid-ar? :table valid-iArr? :phase* valid-i?* )
         ))
(stest/instrument `oscil3:a)

(defn oscil3:k
  {:arglists '([kamp kcps itableArr & iphase*] [kamp kcps & itable* iphase*])}
  [amp cps table & [ phase* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "oscil3"
                      [amp cps table phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef oscil3:k
  :args (s/alt
         :kkiArri (s/cat :amp valid-kr? :cps valid-kr? :table valid-iArr? :phase* valid-i?* )
         ))
(stest/instrument `oscil3:k)

(defn octmidib
  {:arglists '([& irange*] [& irange*])}
  [& [ range* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "octmidib"
                      [range*]
                      *global*)]
    (new out-types ast)))

(s/fdef octmidib
  :args (s/alt
         :i (s/cat :range* valid-i?* )
         ))
(stest/instrument `octmidib)

(defn octmidib:i
  {:arglists '([& irange*])}
  [& [ range* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "octmidib"
                      [range*]
                      *global*)]
    (new out-types ast)))

(s/fdef octmidib:i
  :args (s/cat :range* valid-i?* ))
(stest/instrument `octmidib:i)

(defn octmidib:k
  {:arglists '([& irange*])}
  [& [ range* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "octmidib"
                      [range*]
                      *global*)]
    (new out-types ast)))

(s/fdef octmidib:k
  :args (s/cat :range* valid-i?* ))
(stest/instrument `octmidib:k)

(defn vtabwa
  {:arglists '([aindex itable & ainarg1* ainarg2* ainarg3* ainargN4* ainargN5* ainargN6* ainargN7* ainargN8* ainargN9* ainargN10* ainargN11* ainargN12* ainargN13* ainargN14* ainargN15* ainargN16* ainargN17* ainargN18* ainargN19* ainargN20* ainargN21* ainargN22* ainargN23* ainargN24* ainargN25* ainargN26* ainargN27* ainargN28* ainargN29* ainargN30* ainargN31* ainargN32*])}
  [index table & [ inarg1* inarg2* inarg3* inargN4* inargN5* inargN6* inargN7* inargN8* inargN9* inargN10* inargN11* inargN12* inargN13* inargN14* inargN15* inargN16* inargN17* inargN18* inargN19* inargN20* inargN21* inargN22* inargN23* inargN24* inargN25* inargN26* inargN27* inargN28* inargN29* inargN30* inargN31* inargN32* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vtabwa"
                      [index table inarg1* inarg2* inarg3* inargN4* inargN5* inargN6* inargN7* inargN8* inargN9* inargN10* inargN11* inargN12* inargN13* inargN14* inargN15* inargN16* inargN17* inargN18* inargN19* inargN20* inargN21* inargN22* inargN23* inargN24* inargN25* inargN26* inargN27* inargN28* inargN29* inargN30* inargN31* inargN32*]
                      *global*)]
    (new out-types ast)))

(s/fdef vtabwa
  :args (s/cat :index valid-ar? :table valid-i? :inarg1* valid-ar?* :inarg2* valid-ar?* :inarg3* valid-ar?* :inargN4* valid-ar?* :inargN5* valid-ar?* :inargN6* valid-ar?* :inargN7* valid-ar?* :inargN8* valid-ar?* :inargN9* valid-ar?* :inargN10* valid-ar?* :inargN11* valid-ar?* :inargN12* valid-ar?* :inargN13* valid-ar?* :inargN14* valid-ar?* :inargN15* valid-ar?* :inargN16* valid-ar?* :inargN17* valid-ar?* :inargN18* valid-ar?* :inargN19* valid-ar?* :inargN20* valid-ar?* :inargN21* valid-ar?* :inargN22* valid-ar?* :inargN23* valid-ar?* :inargN24* valid-ar?* :inargN25* valid-ar?* :inargN26* valid-ar?* :inargN27* valid-ar?* :inargN28* valid-ar?* :inargN29* valid-ar?* :inargN30* valid-ar?* :inargN31* valid-ar?* :inargN32* valid-ar?* ))
(stest/instrument `vtabwa)

(defn gendyc
  {:arglists '([kamp kampdist kdurdist kadpar kddpar kminfreq kmaxfreq kampscl kdurscl & initcps* knum*] [kamp kampdist kdurdist kadpar kddpar kminfreq kmaxfreq kampscl kdurscl & initcps* knum*])}
  [amp ampdist durdist adpar ddpar minfreq maxfreq ampscl durscl & [ nitcps* num* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "gendyc"
                      [amp ampdist durdist adpar ddpar minfreq maxfreq ampscl durscl nitcps* num*]
                      *global*)]
    (new out-types ast)))

(s/fdef gendyc
  :args (s/alt
         :kkkkkkkkkik (s/cat :amp valid-kr? :ampdist valid-kr? :durdist valid-kr? :adpar valid-kr? :ddpar valid-kr? :minfreq valid-kr? :maxfreq valid-kr? :ampscl valid-kr? :durscl valid-kr? :nitcps* valid-i?* :num* valid-kr?* )
         ))
(stest/instrument `gendyc)

(defn gendyc:a
  {:arglists '([kamp kampdist kdurdist kadpar kddpar kminfreq kmaxfreq kampscl kdurscl & initcps* knum*])}
  [amp ampdist durdist adpar ddpar minfreq maxfreq ampscl durscl & [ nitcps* num* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "gendyc"
                      [amp ampdist durdist adpar ddpar minfreq maxfreq ampscl durscl nitcps* num*]
                      *global*)]
    (new out-types ast)))

(s/fdef gendyc:a
  :args (s/cat :amp valid-kr? :ampdist valid-kr? :durdist valid-kr? :adpar valid-kr? :ddpar valid-kr? :minfreq valid-kr? :maxfreq valid-kr? :ampscl valid-kr? :durscl valid-kr? :nitcps* valid-i?* :num* valid-kr?* ))
(stest/instrument `gendyc:a)

(defn gendyc:k
  {:arglists '([kamp kampdist kdurdist kadpar kddpar kminfreq kmaxfreq kampscl kdurscl & initcps* knum*])}
  [amp ampdist durdist adpar ddpar minfreq maxfreq ampscl durscl & [ nitcps* num* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "gendyc"
                      [amp ampdist durdist adpar ddpar minfreq maxfreq ampscl durscl nitcps* num*]
                      *global*)]
    (new out-types ast)))

(s/fdef gendyc:k
  :args (s/cat :amp valid-kr? :ampdist valid-kr? :durdist valid-kr? :adpar valid-kr? :ddpar valid-kr? :minfreq valid-kr? :maxfreq valid-kr? :ampscl valid-kr? :durscl valid-kr? :nitcps* valid-i?* :num* valid-kr?* ))
(stest/instrument `gendyc:k)

(defn inx
  {:arglists '()}
  []
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "inx"
                      []
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))


(defn pvsfread
  {:arglists '([ktimpt Stable & ichan*] [ktimpt itable & ichan*])}
  [timpt table & [ chan* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsfread"
                      [timpt table chan*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsfread
  :args (s/alt
         :kSi (s/cat :timpt valid-kr? :table valid-S? :chan* valid-i?* )
         ))
(stest/instrument `pvsfread)

(defn pvsfread:f
  {:arglists '([ktimpt Stable & ichan*] [ktimpt itable & ichan*])}
  [timpt table & [ chan* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsfread"
                      [timpt table chan*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsfread:f
  :args (s/alt
         :kSi (s/cat :timpt valid-kr? :table valid-S? :chan* valid-i?* )
         ))
(stest/instrument `pvsfread:f)

(defn tlineto
  {:arglists '([ksig ktime ktrig])}
  [sig time trig]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "tlineto"
                      [sig time trig]
                      *global*)]
    (new out-types ast)))

(s/fdef tlineto
  :args (s/cat :sig valid-kr? :time valid-kr? :trig valid-kr? ))
(stest/instrument `tlineto)

(defn tlineto:k
  {:arglists '([ksig ktime ktrig])}
  [sig time trig]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "tlineto"
                      [sig time trig]
                      *global*)]
    (new out-types ast)))

(s/fdef tlineto:k
  :args (s/cat :sig valid-kr? :time valid-kr? :trig valid-kr? ))
(stest/instrument `tlineto:k)

(defn filelen
  {:arglists '([Sfilcod & iallowraw*] [ifilcod & iallowraw*])}
  [filcod & [ allowraw* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "filelen"
                      [filcod allowraw*]
                      *global*)]
    (new out-types ast)))

(s/fdef filelen
  :args (s/alt
         :Si (s/cat :filcod valid-S? :allowraw* valid-i?* )
         ))
(stest/instrument `filelen)

(defn filelen:i
  {:arglists '([Sfilcod & iallowraw*] [ifilcod & iallowraw*])}
  [filcod & [ allowraw* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "filelen"
                      [filcod allowraw*]
                      *global*)]
    (new out-types ast)))

(s/fdef filelen:i
  :args (s/alt
         :Si (s/cat :filcod valid-S? :allowraw* valid-i?* )
         ))
(stest/instrument `filelen:i)

(defn tabmorph
  {:arglists '([kindex kweightpoint ktabnum3 ktabnum4 & ifn1* ifn2* ifn3* ifn4* ifnN5* ifnN6* ifnN7* ifnN8* ifnN9* ifnN10* ifnN11* ifnN12* ifnN13* ifnN14* ifnN15* ifnN16*])}
  [index weightpoint tabnum3 tabnum4 & [ fn1* fn2* fn3* fn4* fnN5* fnN6* fnN7* fnN8* fnN9* fnN10* fnN11* fnN12* fnN13* fnN14* fnN15* fnN16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "tabmorph"
                      [index weightpoint tabnum3 tabnum4 fn1* fn2* fn3* fn4* fnN5* fnN6* fnN7* fnN8* fnN9* fnN10* fnN11* fnN12* fnN13* fnN14* fnN15* fnN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef tabmorph
  :args (s/cat :index valid-kr? :weightpoint valid-kr? :tabnum3 valid-kr? :tabnum4 valid-kr? :fn1* valid-i?* :fn2* valid-i?* :fn3* valid-i?* :fn4* valid-i?* :fnN5* valid-i?* :fnN6* valid-i?* :fnN7* valid-i?* :fnN8* valid-i?* :fnN9* valid-i?* :fnN10* valid-i?* :fnN11* valid-i?* :fnN12* valid-i?* :fnN13* valid-i?* :fnN14* valid-i?* :fnN15* valid-i?* :fnN16* valid-i?* ))
(stest/instrument `tabmorph)

(defn tabmorph:k
  {:arglists '([kindex kweightpoint ktabnum3 ktabnum4 & ifn1* ifn2* ifn3* ifn4* ifnN5* ifnN6* ifnN7* ifnN8* ifnN9* ifnN10* ifnN11* ifnN12* ifnN13* ifnN14* ifnN15* ifnN16*])}
  [index weightpoint tabnum3 tabnum4 & [ fn1* fn2* fn3* fn4* fnN5* fnN6* fnN7* fnN8* fnN9* fnN10* fnN11* fnN12* fnN13* fnN14* fnN15* fnN16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "tabmorph"
                      [index weightpoint tabnum3 tabnum4 fn1* fn2* fn3* fn4* fnN5* fnN6* fnN7* fnN8* fnN9* fnN10* fnN11* fnN12* fnN13* fnN14* fnN15* fnN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef tabmorph:k
  :args (s/cat :index valid-kr? :weightpoint valid-kr? :tabnum3 valid-kr? :tabnum4 valid-kr? :fn1* valid-i?* :fn2* valid-i?* :fn3* valid-i?* :fn4* valid-i?* :fnN5* valid-i?* :fnN6* valid-i?* :fnN7* valid-i?* :fnN8* valid-i?* :fnN9* valid-i?* :fnN10* valid-i?* :fnN11* valid-i?* :fnN12* valid-i?* :fnN13* valid-i?* :fnN14* valid-i?* :fnN15* valid-i?* :fnN16* valid-i?* ))
(stest/instrument `tabmorph:k)

(defn deltap3
  {:arglists '([xdlt & idlt*])}
  [dlt & [ dlt* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "deltap3"
                      [dlt dlt*]
                      *global*)]
    (new out-types ast)))

(s/fdef deltap3
  :args (s/cat :dlt valid-x? :dlt* valid-i?* ))
(stest/instrument `deltap3)

(defn deltap3:a
  {:arglists '([xdlt & idlt*])}
  [dlt & [ dlt* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "deltap3"
                      [dlt dlt*]
                      *global*)]
    (new out-types ast)))

(s/fdef deltap3:a
  :args (s/cat :dlt valid-x? :dlt* valid-i?* ))
(stest/instrument `deltap3:a)

(defn tbvcf
  {:arglists '([asig xcutoff-frequency xresonance kdistortion kasym & iskip*])}
  [sig cutoff-frequency resonance distortion asym & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tbvcf"
                      [sig cutoff-frequency resonance distortion asym skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef tbvcf
  :args (s/cat :sig valid-ar? :cutoff-frequency valid-x? :resonance valid-x? :distortion valid-kr? :asym valid-kr? :skip* valid-i?* ))
(stest/instrument `tbvcf)

(defn tbvcf:a
  {:arglists '([asig xcutoff-frequency xresonance kdistortion kasym & iskip*])}
  [sig cutoff-frequency resonance distortion asym & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tbvcf"
                      [sig cutoff-frequency resonance distortion asym skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef tbvcf:a
  :args (s/cat :sig valid-ar? :cutoff-frequency valid-x? :resonance valid-x? :distortion valid-kr? :asym valid-kr? :skip* valid-i?* ))
(stest/instrument `tbvcf:a)

(defn sc_lag
  {:arglists '([ain klagtime & initialvalue*] [kin klagtime & initialvalue*])}
  [in lagtime & [ nitialvalue* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sc_lag"
                      [in lagtime nitialvalue*]
                      *global*)]
    (new out-types ast)))

(s/fdef sc_lag
  :args (s/alt
         :aki (s/cat :in valid-ar? :lagtime valid-kr? :nitialvalue* valid-i?* )
         ))
(stest/instrument `sc_lag)

(defn sc_lag:a
  {:arglists '([ain klagtime & initialvalue*])}
  [in lagtime & [ nitialvalue* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sc_lag"
                      [in lagtime nitialvalue*]
                      *global*)]
    (new out-types ast)))

(s/fdef sc_lag:a
  :args (s/cat :in valid-ar? :lagtime valid-kr? :nitialvalue* valid-i?* ))
(stest/instrument `sc_lag:a)

(defn sc_lag:k
  {:arglists '([kin klagtime & initialvalue*])}
  [in lagtime & [ nitialvalue* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "sc_lag"
                      [in lagtime nitialvalue*]
                      *global*)]
    (new out-types ast)))

(s/fdef sc_lag:k
  :args (s/cat :in valid-kr? :lagtime valid-kr? :nitialvalue* valid-i?* ))
(stest/instrument `sc_lag:k)

(defn cpuprc
  {:arglists '([Sinsname ipercent] [iinsname ipercent])}
  [insname percent]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "cpuprc"
                      [insname percent]
                      *global*)]
    (new out-types ast)))

(s/fdef cpuprc
  :args (s/alt
         :Si (s/cat :insname valid-S? :percent valid-i? )
         ))
(stest/instrument `cpuprc)

(defn ATSadd
  {:arglists '([ktimepnt kfmod Satsfile itable ipartials & ipartialoffset* ipartialincr* igatefn*] [ktimepnt kfmod iatsfile itable ipartials & ipartialoffset* ipartialincr* igatefn*])}
  [timepnt fmod atsfile table partials & [ partialoffset* partialincr* gatefn* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "ATSadd"
                      [timepnt fmod atsfile table partials partialoffset* partialincr* gatefn*]
                      *global*)]
    (new out-types ast)))

(s/fdef ATSadd
  :args (s/alt
         :kkSiiiii (s/cat :timepnt valid-kr? :fmod valid-kr? :atsfile valid-S? :table valid-i? :partials valid-i? :partialoffset* valid-i?* :partialincr* valid-i?* :gatefn* valid-i?* )
         ))
(stest/instrument `ATSadd)

(defn ATSadd:a
  {:arglists '([ktimepnt kfmod Satsfile itable ipartials & ipartialoffset* ipartialincr* igatefn*] [ktimepnt kfmod iatsfile itable ipartials & ipartialoffset* ipartialincr* igatefn*])}
  [timepnt fmod atsfile table partials & [ partialoffset* partialincr* gatefn* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "ATSadd"
                      [timepnt fmod atsfile table partials partialoffset* partialincr* gatefn*]
                      *global*)]
    (new out-types ast)))

(s/fdef ATSadd:a
  :args (s/alt
         :kkSiiiii (s/cat :timepnt valid-kr? :fmod valid-kr? :atsfile valid-S? :table valid-i? :partials valid-i? :partialoffset* valid-i?* :partialincr* valid-i?* :gatefn* valid-i?* )
         ))
(stest/instrument `ATSadd:a)

(defn vsubv_i
  {:arglists '([ifn1 ifn2 ielements & idstoffset* isrcoffset*])}
  [fn1 fn2 elements & [ dstoffset* srcoffset* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vsubv_i"
                      [fn1 fn2 elements dstoffset* srcoffset*]
                      *global*)]
    (new out-types ast)))

(s/fdef vsubv_i
  :args (s/cat :fn1 valid-i? :fn2 valid-i? :elements valid-i? :dstoffset* valid-i?* :srcoffset* valid-i?* ))
(stest/instrument `vsubv_i)

(defn vadd_i
  {:arglists '([itable ival ielements & idstoffset*])}
  [table val elements & [ dstoffset* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vadd_i"
                      [table val elements dstoffset*]
                      *global*)]
    (new out-types ast)))

(s/fdef vadd_i
  :args (s/cat :table valid-i? :val valid-i? :elements valid-i? :dstoffset* valid-i?* ))
(stest/instrument `vadd_i)

(defn scale
  {:arglists '([kinput kmax kmin])}
  [input max min]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "scale"
                      [input max min]
                      *global*)]
    (new out-types ast)))

(s/fdef scale
  :args (s/cat :input valid-kr? :max valid-kr? :min valid-kr? ))
(stest/instrument `scale)

(defn scale:k
  {:arglists '([kinput kmax kmin])}
  [input max min]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "scale"
                      [input max min]
                      *global*)]
    (new out-types ast)))

(s/fdef scale:k
  :args (s/cat :input valid-kr? :max valid-kr? :min valid-kr? ))
(stest/instrument `scale:k)

(defn ceps
  {:arglists '([kmagsArr kcoefs])}
  [mags coefs]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "ceps"
                      [mags coefs]
                      *global*)]
    (new out-types ast)))

(s/fdef ceps
  :args (s/cat :mags valid-kArr? :coefs valid-kr? ))
(stest/instrument `ceps)

(defn ceps:kArr
  {:arglists '([kmagsArr kcoefs])}
  [mags coefs]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "ceps"
                      [mags coefs]
                      *global*)]
    (new out-types ast)))

(s/fdef ceps:kArr
  :args (s/cat :mags valid-kArr? :coefs valid-kr? ))
(stest/instrument `ceps:kArr)

(defn hrtfearly
  {:arglists '([asrc xsrcx xsrcy xsrcz xlstnrx xlstnry xlstnrz Sfilel Sfiler idefroom & ifade* isr* iorder* ithreed* kheadrot* iroomx* iroomy* iroomz* iwallhigh* iwalllow* iwallgain1* iwallgain1* iwallgain1* ifloorhigh* ifloorlow* ifloorgain1* ifloorgain1* ifloorgain1* iceilinghigh* iceilinglow* iceilinggain1* iceilinggain1* iceilinggain1*])}
  [src srcx srcy srcz lstnrx lstnry lstnrz filel filer defroom & [ fade* sr* order* threed* headrot* roomx* roomy* roomz* wallhigh* walllow* wallgain1* wallgain1* wallgain1* floorhigh* floorlow* floorgain1* floorgain1* floorgain1* ceilinghigh* ceilinglow* ceilinggain1* ceilinggain1* ceilinggain1* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal Variable Variable Variable]
        out-types [AudioSignal AudioSignal Variable Variable Variable]
        ast (ast-node out-types-quoted
                      "hrtfearly"
                      [src srcx srcy srcz lstnrx lstnry lstnrz filel filer defroom fade* sr* order* threed* headrot* roomx* roomy* roomz* wallhigh* walllow* wallgain1* wallgain1* wallgain1* floorhigh* floorlow* floorgain1* floorgain1* floorgain1* ceilinghigh* ceilinglow* ceilinggain1* ceilinggain1* ceilinggain1*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef hrtfearly
  :args (s/cat :src valid-ar? :srcx valid-x? :srcy valid-x? :srcz valid-x? :lstnrx valid-x? :lstnry valid-x? :lstnrz valid-x? :filel valid-S? :filer valid-S? :defroom valid-i? :fade* valid-i?* :sr* valid-i?* :order* valid-i?* :threed* valid-i?* :headrot* valid-kr?* :roomx* valid-i?* :roomy* valid-i?* :roomz* valid-i?* :wallhigh* valid-i?* :walllow* valid-i?* :wallgain1* valid-i?* :wallgain1* valid-i?* :wallgain1* valid-i?* :floorhigh* valid-i?* :floorlow* valid-i?* :floorgain1* valid-i?* :floorgain1* valid-i?* :floorgain1* valid-i?* :ceilinghigh* valid-i?* :ceilinglow* valid-i?* :ceilinggain1* valid-i?* :ceilinggain1* valid-i?* :ceilinggain1* valid-i?* ))
(stest/instrument `hrtfearly)

(defn s32b14
  {:arglists '([ichan ictlno_msb2 ictlno_lsb3 imin4 imax5 initvalue6 ifn7 ictlno_msb8 ictlno_lsb9 imin10 imax11 initvalue12 ifn13 ifn14 ifn15 ifn16 ifn17 ifn18 ifn19 ifn20 ifn21 ifn22 ifn23 ifn24 ifn25 ifn26 ifn27 ifn28 ifn29 ifn30 ifn31 ifn32 ifn33 ifn34 ifn35 ifn36 ifn37 ifn38 ifn39 ifn40 ifn41 ifn42 ifn43 ifn44 ifn45 ifn46 ifn47 ifn48 ifn49 ifn50 ifn51 ifn52 ifn53 ifn54 ifn55 ifn56 ifn57 ifn58 ifn59 ifn60 ifn61 ifn62 ifn63 ifn64 ifn65 ifn66 ifn67 ifn68 ifn69 ifn70 ifn71 ifn72 ifn73 ifn74 ifn75 ifn76 ifn77 ifn78 ifn79 ifn80 ifn81 ifn82 ifn83 ifn84 ifn85 ifn86 ifn87 ifn88 ifn89 ifn90 ifn91 ifn92 ifn93 ifn94 ifn95 ifn96 ifn97 ifn98 ifn99 ifn100 ifn101 ifn102 ifn103 ifn104 ifn105 ifn106 ifn107 ifn108 ifn109 ifn110 ifn111 ifn112 ifn113 ifn114 ifn115 ifn116 ifn117 ifn118 ifn119 ifn120 ifn121 ifn122 ifn123 ifn124 ifn125 ifn126 ifn127 ifn128 ifn129 ifn130 ifn131 ifn132 ifn133 ifn134 ifn135 ifn136 ifn137 ifn138 ifn139 ifn140 ifn141 ifn142 ifn143 ifn144 ifn145 ifn146 ifn147 ifn148 ifn149 ifn150 ifn151 ifn152 ifn153 ifn154 ifn155 ifn156 ifn157 ifn158 ifn159 ifn160 ifn161] [ichan ictlno_msb2 ictlno_lsb3 imin4 imax5 initvalue6 ifn7 ictlno_msb8 ictlno_lsb9 imin10 imax11 initvalue12 ifn13 ifn14 ifn15 ifn16 ifn17 ifn18 ifn19 ifn20 ifn21 ifn22 ifn23 ifn24 ifn25 ifn26 ifn27 ifn28 ifn29 ifn30 ifn31 ifn32 ifn33 ifn34 ifn35 ifn36 ifn37 ifn38 ifn39 ifn40 ifn41 ifn42 ifn43 ifn44 ifn45 ifn46 ifn47 ifn48 ifn49 ifn50 ifn51 ifn52 ifn53 ifn54 ifn55 ifn56 ifn57 ifn58 ifn59 ifn60 ifn61 ifn62 ifn63 ifn64 ifn65 ifn66 ifn67 ifn68 ifn69 ifn70 ifn71 ifn72 ifn73 ifn74 ifn75 ifn76 ifn77 ifn78 ifn79 ifn80 ifn81 ifn82 ifn83 ifn84 ifn85 ifn86 ifn87 ifn88 ifn89 ifn90 ifn91 ifn92 ifn93 ifn94 ifn95 ifn96 ifn97 ifn98 ifn99 ifn100 ifn101 ifn102 ifn103 ifn104 ifn105 ifn106 ifn107 ifn108 ifn109 ifn110 ifn111 ifn112 ifn113 ifn114 ifn115 ifn116 ifn117 ifn118 ifn119 ifn120 ifn121 ifn122 ifn123 ifn124 ifn125 ifn126 ifn127 ifn128 ifn129 ifn130 ifn131 ifn132 ifn133 ifn134 ifn135 ifn136 ifn137 ifn138 ifn139 ifn140 ifn141 ifn142 ifn143 ifn144 ifn145 ifn146 ifn147 ifn148 ifn149 ifn150 ifn151 ifn152 ifn153 ifn154 ifn155 ifn156 ifn157 ifn158 ifn159 ifn160 ifn161 ifn162 ifn163 ifn164 ifn165 ifn166 ifn167 ifn168 ifn169 ifn170 ifn171 ifn172 ifn173 ifn174 ifn175 ifn176 ifn177 ifn178 ifn179 ifn180 ifn181 ifn182 ifn183 ifn184 ifn185 ifn186 ifn187 ifn188 ifn189 ifn190 ifn191 ifn192 ifn193])}
  [chan ctlno_msb2 ctlno_lsb3 min4 max5 nitvalue6 fn7 ctlno_msb8 ctlno_lsb9 min10 max11 nitvalue12 fn13 fn14 fn15 fn16 fn17 fn18 fn19 fn20 fn21 fn22 fn23 fn24 fn25 fn26 fn27 fn28 fn29 fn30 fn31 fn32 fn33 fn34 fn35 fn36 fn37 fn38 fn39 fn40 fn41 fn42 fn43 fn44 fn45 fn46 fn47 fn48 fn49 fn50 fn51 fn52 fn53 fn54 fn55 fn56 fn57 fn58 fn59 fn60 fn61 fn62 fn63 fn64 fn65 fn66 fn67 fn68 fn69 fn70 fn71 fn72 fn73 fn74 fn75 fn76 fn77 fn78 fn79 fn80 fn81 fn82 fn83 fn84 fn85 fn86 fn87 fn88 fn89 fn90 fn91 fn92 fn93 fn94 fn95 fn96 fn97 fn98 fn99 fn100 fn101 fn102 fn103 fn104 fn105 fn106 fn107 fn108 fn109 fn110 fn111 fn112 fn113 fn114 fn115 fn116 fn117 fn118 fn119 fn120 fn121 fn122 fn123 fn124 fn125 fn126 fn127 fn128 fn129 fn130 fn131 fn132 fn133 fn134 fn135 fn136 fn137 fn138 fn139 fn140 fn141 fn142 fn143 fn144 fn145 fn146 fn147 fn148 fn149 fn150 fn151 fn152 fn153 fn154 fn155 fn156 fn157 fn158 fn159 fn160 fn161]
  (let [out-types-quoted '[Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable]
        out-types [Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable]
        ast (ast-node out-types-quoted
                      "s32b14"
                      [chan ctlno_msb2 ctlno_lsb3 min4 max5 nitvalue6 fn7 ctlno_msb8 ctlno_lsb9 min10 max11 nitvalue12 fn13 fn14 fn15 fn16 fn17 fn18 fn19 fn20 fn21 fn22 fn23 fn24 fn25 fn26 fn27 fn28 fn29 fn30 fn31 fn32 fn33 fn34 fn35 fn36 fn37 fn38 fn39 fn40 fn41 fn42 fn43 fn44 fn45 fn46 fn47 fn48 fn49 fn50 fn51 fn52 fn53 fn54 fn55 fn56 fn57 fn58 fn59 fn60 fn61 fn62 fn63 fn64 fn65 fn66 fn67 fn68 fn69 fn70 fn71 fn72 fn73 fn74 fn75 fn76 fn77 fn78 fn79 fn80 fn81 fn82 fn83 fn84 fn85 fn86 fn87 fn88 fn89 fn90 fn91 fn92 fn93 fn94 fn95 fn96 fn97 fn98 fn99 fn100 fn101 fn102 fn103 fn104 fn105 fn106 fn107 fn108 fn109 fn110 fn111 fn112 fn113 fn114 fn115 fn116 fn117 fn118 fn119 fn120 fn121 fn122 fn123 fn124 fn125 fn126 fn127 fn128 fn129 fn130 fn131 fn132 fn133 fn134 fn135 fn136 fn137 fn138 fn139 fn140 fn141 fn142 fn143 fn144 fn145 fn146 fn147 fn148 fn149 fn150 fn151 fn152 fn153 fn154 fn155 fn156 fn157 fn158 fn159 fn160 fn161]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef s32b14
  :args (s/alt
         :iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii (s/cat :chan valid-i? :ctlno_msb2 valid-i? :ctlno_lsb3 valid-i? :min4 valid-i? :max5 valid-i? :nitvalue6 valid-i? :fn7 valid-i? :ctlno_msb8 valid-i? :ctlno_lsb9 valid-i? :min10 valid-i? :max11 valid-i? :nitvalue12 valid-i? :fn13 valid-i? :fn14 valid-i? :fn15 valid-i? :fn16 valid-i? :fn17 valid-i? :fn18 valid-i? :fn19 valid-i? :fn20 valid-i? :fn21 valid-i? :fn22 valid-i? :fn23 valid-i? :fn24 valid-i? :fn25 valid-i? :fn26 valid-i? :fn27 valid-i? :fn28 valid-i? :fn29 valid-i? :fn30 valid-i? :fn31 valid-i? :fn32 valid-i? :fn33 valid-i? :fn34 valid-i? :fn35 valid-i? :fn36 valid-i? :fn37 valid-i? :fn38 valid-i? :fn39 valid-i? :fn40 valid-i? :fn41 valid-i? :fn42 valid-i? :fn43 valid-i? :fn44 valid-i? :fn45 valid-i? :fn46 valid-i? :fn47 valid-i? :fn48 valid-i? :fn49 valid-i? :fn50 valid-i? :fn51 valid-i? :fn52 valid-i? :fn53 valid-i? :fn54 valid-i? :fn55 valid-i? :fn56 valid-i? :fn57 valid-i? :fn58 valid-i? :fn59 valid-i? :fn60 valid-i? :fn61 valid-i? :fn62 valid-i? :fn63 valid-i? :fn64 valid-i? :fn65 valid-i? :fn66 valid-i? :fn67 valid-i? :fn68 valid-i? :fn69 valid-i? :fn70 valid-i? :fn71 valid-i? :fn72 valid-i? :fn73 valid-i? :fn74 valid-i? :fn75 valid-i? :fn76 valid-i? :fn77 valid-i? :fn78 valid-i? :fn79 valid-i? :fn80 valid-i? :fn81 valid-i? :fn82 valid-i? :fn83 valid-i? :fn84 valid-i? :fn85 valid-i? :fn86 valid-i? :fn87 valid-i? :fn88 valid-i? :fn89 valid-i? :fn90 valid-i? :fn91 valid-i? :fn92 valid-i? :fn93 valid-i? :fn94 valid-i? :fn95 valid-i? :fn96 valid-i? :fn97 valid-i? :fn98 valid-i? :fn99 valid-i? :fn100 valid-i? :fn101 valid-i? :fn102 valid-i? :fn103 valid-i? :fn104 valid-i? :fn105 valid-i? :fn106 valid-i? :fn107 valid-i? :fn108 valid-i? :fn109 valid-i? :fn110 valid-i? :fn111 valid-i? :fn112 valid-i? :fn113 valid-i? :fn114 valid-i? :fn115 valid-i? :fn116 valid-i? :fn117 valid-i? :fn118 valid-i? :fn119 valid-i? :fn120 valid-i? :fn121 valid-i? :fn122 valid-i? :fn123 valid-i? :fn124 valid-i? :fn125 valid-i? :fn126 valid-i? :fn127 valid-i? :fn128 valid-i? :fn129 valid-i? :fn130 valid-i? :fn131 valid-i? :fn132 valid-i? :fn133 valid-i? :fn134 valid-i? :fn135 valid-i? :fn136 valid-i? :fn137 valid-i? :fn138 valid-i? :fn139 valid-i? :fn140 valid-i? :fn141 valid-i? :fn142 valid-i? :fn143 valid-i? :fn144 valid-i? :fn145 valid-i? :fn146 valid-i? :fn147 valid-i? :fn148 valid-i? :fn149 valid-i? :fn150 valid-i? :fn151 valid-i? :fn152 valid-i? :fn153 valid-i? :fn154 valid-i? :fn155 valid-i? :fn156 valid-i? :fn157 valid-i? :fn158 valid-i? :fn159 valid-i? :fn160 valid-i? :fn161 valid-i? )
         ))
(stest/instrument `s32b14)

(defn maxabs
  {:arglists '([ain1 & ain1* ain2* ain3* ain4* ain5* ain6* ain7* ain8* ain9* ain10* ain11* ain12* ain13* ain14* ain15* ain16* ain17* ain18* ain19* ain20* ain21* ain22* ain23* ain24* ain25* ain26* ain27* ain28* ain29* ain30* ain31* ain32*] [kin1 & kin1* kin2* kin3* kin4* kin5* kin6* kin7* kin8* kin9* kin10* kin11* kin12* kin13* kin14* kin15* kin16*])}
  [in1 & [ in1* in2* in3* in4* in5* in6* in7* in8* in9* in10* in11* in12* in13* in14* in15* in16* in17* in18* in19* in20* in21* in22* in23* in24* in25* in26* in27* in28* in29* in30* in31* in32* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "maxabs"
                      [in1 in1* in2* in3* in4* in5* in6* in7* in8* in9* in10* in11* in12* in13* in14* in15* in16* in17* in18* in19* in20* in21* in22* in23* in24* in25* in26* in27* in28* in29* in30* in31* in32*]
                      *global*)]
    (new out-types ast)))

(s/fdef maxabs
  :args (s/alt
         :aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa (s/cat :in1 valid-ar? :in1* valid-ar?* :in2* valid-ar?* :in3* valid-ar?* :in4* valid-ar?* :in5* valid-ar?* :in6* valid-ar?* :in7* valid-ar?* :in8* valid-ar?* :in9* valid-ar?* :in10* valid-ar?* :in11* valid-ar?* :in12* valid-ar?* :in13* valid-ar?* :in14* valid-ar?* :in15* valid-ar?* :in16* valid-ar?* :in17* valid-ar?* :in18* valid-ar?* :in19* valid-ar?* :in20* valid-ar?* :in21* valid-ar?* :in22* valid-ar?* :in23* valid-ar?* :in24* valid-ar?* :in25* valid-ar?* :in26* valid-ar?* :in27* valid-ar?* :in28* valid-ar?* :in29* valid-ar?* :in30* valid-ar?* :in31* valid-ar?* :in32* valid-ar?* )
         ))
(stest/instrument `maxabs)

(defn maxabs:a
  {:arglists '([ain1 & ain1* ain2* ain3* ain4* ain5* ain6* ain7* ain8* ain9* ain10* ain11* ain12* ain13* ain14* ain15* ain16* ain17* ain18* ain19* ain20* ain21* ain22* ain23* ain24* ain25* ain26* ain27* ain28* ain29* ain30* ain31* ain32*])}
  [in1 & [ in1* in2* in3* in4* in5* in6* in7* in8* in9* in10* in11* in12* in13* in14* in15* in16* in17* in18* in19* in20* in21* in22* in23* in24* in25* in26* in27* in28* in29* in30* in31* in32* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "maxabs"
                      [in1 in1* in2* in3* in4* in5* in6* in7* in8* in9* in10* in11* in12* in13* in14* in15* in16* in17* in18* in19* in20* in21* in22* in23* in24* in25* in26* in27* in28* in29* in30* in31* in32*]
                      *global*)]
    (new out-types ast)))

(s/fdef maxabs:a
  :args (s/cat :in1 valid-ar? :in1* valid-ar?* :in2* valid-ar?* :in3* valid-ar?* :in4* valid-ar?* :in5* valid-ar?* :in6* valid-ar?* :in7* valid-ar?* :in8* valid-ar?* :in9* valid-ar?* :in10* valid-ar?* :in11* valid-ar?* :in12* valid-ar?* :in13* valid-ar?* :in14* valid-ar?* :in15* valid-ar?* :in16* valid-ar?* :in17* valid-ar?* :in18* valid-ar?* :in19* valid-ar?* :in20* valid-ar?* :in21* valid-ar?* :in22* valid-ar?* :in23* valid-ar?* :in24* valid-ar?* :in25* valid-ar?* :in26* valid-ar?* :in27* valid-ar?* :in28* valid-ar?* :in29* valid-ar?* :in30* valid-ar?* :in31* valid-ar?* :in32* valid-ar?* ))
(stest/instrument `maxabs:a)

(defn maxabs:k
  {:arglists '([kin1 & kin1* kin2* kin3* kin4* kin5* kin6* kin7* kin8* kin9* kin10* kin11* kin12* kin13* kin14* kin15* kin16*])}
  [in1 & [ in1* in2* in3* in4* in5* in6* in7* in8* in9* in10* in11* in12* in13* in14* in15* in16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "maxabs"
                      [in1 in1* in2* in3* in4* in5* in6* in7* in8* in9* in10* in11* in12* in13* in14* in15* in16*]
                      *global*)]
    (new out-types ast)))

(s/fdef maxabs:k
  :args (s/cat :in1 valid-kr? :in1* valid-kr?* :in2* valid-kr?* :in3* valid-kr?* :in4* valid-kr?* :in5* valid-kr?* :in6* valid-kr?* :in7* valid-kr?* :in8* valid-kr?* :in9* valid-kr?* :in10* valid-kr?* :in11* valid-kr?* :in12* valid-kr?* :in13* valid-kr?* :in14* valid-kr?* :in15* valid-kr?* :in16* valid-kr?* ))
(stest/instrument `maxabs:k)

(defn timeinsts
  {:arglists '()}
  []
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "timeinsts"
                      []
                      *global*)]
    (new out-types ast)))


(defn timeinsts:k
  {:arglists '()}
  []
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "timeinsts"
                      []
                      *global*)]
    (new out-types ast)))


(defn outq
  {:arglists '([& asig1* asig2* asig3* asig4* asig5* asig6* asig7* asig8* asig9* asig10* asig11* asig12* asig13* asig14* asig15* asig16* asig17* asig18* asig19* asig20* asig21* asig22* asig23* asig24* asig25* asig26* asig27* asig28* asig29* asig30* asig31* asig32*])}
  [& [ sig1* sig2* sig3* sig4* sig5* sig6* sig7* sig8* sig9* sig10* sig11* sig12* sig13* sig14* sig15* sig16* sig17* sig18* sig19* sig20* sig21* sig22* sig23* sig24* sig25* sig26* sig27* sig28* sig29* sig30* sig31* sig32* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outq"
                      [sig1* sig2* sig3* sig4* sig5* sig6* sig7* sig8* sig9* sig10* sig11* sig12* sig13* sig14* sig15* sig16* sig17* sig18* sig19* sig20* sig21* sig22* sig23* sig24* sig25* sig26* sig27* sig28* sig29* sig30* sig31* sig32*]
                      *global*)]
    (new out-types ast)))

(s/fdef outq
  :args (s/cat :sig1* valid-ar?* :sig2* valid-ar?* :sig3* valid-ar?* :sig4* valid-ar?* :sig5* valid-ar?* :sig6* valid-ar?* :sig7* valid-ar?* :sig8* valid-ar?* :sig9* valid-ar?* :sig10* valid-ar?* :sig11* valid-ar?* :sig12* valid-ar?* :sig13* valid-ar?* :sig14* valid-ar?* :sig15* valid-ar?* :sig16* valid-ar?* :sig17* valid-ar?* :sig18* valid-ar?* :sig19* valid-ar?* :sig20* valid-ar?* :sig21* valid-ar?* :sig22* valid-ar?* :sig23* valid-ar?* :sig24* valid-ar?* :sig25* valid-ar?* :sig26* valid-ar?* :sig27* valid-ar?* :sig28* valid-ar?* :sig29* valid-ar?* :sig30* valid-ar?* :sig31* valid-ar?* :sig32* valid-ar?* ))
(stest/instrument `outq)

(defn lpread
  {:arglists '([ktimpnt Sfilcod & inpoles* ifrmrate*] [ktimpnt ifilcod & inpoles* ifrmrate*])}
  [timpnt filcod & [ npoles* frmrate* ]]
  (let [out-types-quoted '[ControlSignal ControlSignal ControlSignal ControlSignal]
        out-types [ControlSignal ControlSignal ControlSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "lpread"
                      [timpnt filcod npoles* frmrate*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef lpread
  :args (s/alt
         :kSii (s/cat :timpnt valid-kr? :filcod valid-S? :npoles* valid-i?* :frmrate* valid-i?* )
         ))
(stest/instrument `lpread)

(defn strtod
  {:arglists '([Sindex] [iindex])}
  [index]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "strtod"
                      [index]
                      *global*)]
    (new out-types ast)))

(s/fdef strtod
  :args (s/alt
         :S (s/cat :index valid-S? )
         ))
(stest/instrument `strtod)

(defn strtod:i
  {:arglists '([Sindex] [iindex])}
  [index]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "strtod"
                      [index]
                      *global*)]
    (new out-types ast)))

(s/fdef strtod:i
  :args (s/alt
         :S (s/cat :index valid-S? )
         ))
(stest/instrument `strtod:i)

(defn ziw
  {:arglists '([isig iindex])}
  [sig index]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "ziw"
                      [sig index]
                      *global*)]
    (new out-types ast)))

(s/fdef ziw
  :args (s/cat :sig valid-i? :index valid-i? ))
(stest/instrument `ziw)

(defn sprintf
  {:arglists '([Sformatstring & xarg1* xarg2* xarg3* xarg4* xarg5* xarg6* xarg7* xarg8* xarg9* xarg10* xarg11* xarg12* xarg13* xarg14* xarg15* xarg16*])}
  [formatstring & [ arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16* ]]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "sprintf"
                      [formatstring arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16*]
                      *global*)]
    (new out-types ast)))

(s/fdef sprintf
  :args (s/cat :formatstring valid-S? :arg1* valid-x?* :arg2* valid-x?* :arg3* valid-x?* :arg4* valid-x?* :arg5* valid-x?* :arg6* valid-x?* :arg7* valid-x?* :arg8* valid-x?* :arg9* valid-x?* :arg10* valid-x?* :arg11* valid-x?* :arg12* valid-x?* :arg13* valid-x?* :arg14* valid-x?* :arg15* valid-x?* :arg16* valid-x?* ))
(stest/instrument `sprintf)

(defn sprintf:S
  {:arglists '([Sformatstring & xarg1* xarg2* xarg3* xarg4* xarg5* xarg6* xarg7* xarg8* xarg9* xarg10* xarg11* xarg12* xarg13* xarg14* xarg15* xarg16*])}
  [formatstring & [ arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16* ]]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "sprintf"
                      [formatstring arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16*]
                      *global*)]
    (new out-types ast)))

(s/fdef sprintf:S
  :args (s/cat :formatstring valid-S? :arg1* valid-x?* :arg2* valid-x?* :arg3* valid-x?* :arg4* valid-x?* :arg5* valid-x?* :arg6* valid-x?* :arg7* valid-x?* :arg8* valid-x?* :arg9* valid-x?* :arg10* valid-x?* :arg11* valid-x?* :arg12* valid-x?* :arg13* valid-x?* :arg14* valid-x?* :arg15* valid-x?* :arg16* valid-x?* ))
(stest/instrument `sprintf:S)

(defn rifft
  {:arglists '([iinArr] [kinArr])}
  [in]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "rifft"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef rifft
  :args (s/alt
         :iArr (s/cat :in valid-iArr? )
         ))
(stest/instrument `rifft)

(defn rifft:iArr
  {:arglists '([iinArr])}
  [in]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "rifft"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef rifft:iArr
  :args (s/cat :in valid-iArr? ))
(stest/instrument `rifft:iArr)

(defn rifft:kArr
  {:arglists '([kinArr])}
  [in]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "rifft"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef rifft:kArr
  :args (s/cat :in valid-kArr? ))
(stest/instrument `rifft:kArr)

(defn vwrap
  {:arglists '([itable kmin kmax ielements])}
  [table min max elements]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vwrap"
                      [table min max elements]
                      *global*)]
    (new out-types ast)))

(s/fdef vwrap
  :args (s/cat :table valid-i? :min valid-kr? :max valid-kr? :elements valid-i? ))
(stest/instrument `vwrap)

(defn strfromurl
  {:arglists '([StringURL])}
  [tringURL]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "strfromurl"
                      [tringURL]
                      *global*)]
    (new out-types ast)))

(s/fdef strfromurl
  :args (s/cat :tringURL valid-S? ))
(stest/instrument `strfromurl)

(defn strfromurl:S
  {:arglists '([StringURL])}
  [tringURL]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "strfromurl"
                      [tringURL]
                      *global*)]
    (new out-types ast)))

(s/fdef strfromurl:S
  :args (s/cat :tringURL valid-S? ))
(stest/instrument `strfromurl:S)

(defn vtablewa
  {:arglists '([aindex ktable ixmode & ainarg1* ainarg2* ainarg3* ainargN4* ainargN5* ainargN6* ainargN7* ainargN8* ainargN9* ainargN10* ainargN11* ainargN12* ainargN13* ainargN14* ainargN15* ainargN16* ainargN17* ainargN18* ainargN19* ainargN20* ainargN21* ainargN22* ainargN23* ainargN24* ainargN25* ainargN26* ainargN27* ainargN28* ainargN29* ainargN30* ainargN31* ainargN32*])}
  [index table xmode & [ inarg1* inarg2* inarg3* inargN4* inargN5* inargN6* inargN7* inargN8* inargN9* inargN10* inargN11* inargN12* inargN13* inargN14* inargN15* inargN16* inargN17* inargN18* inargN19* inargN20* inargN21* inargN22* inargN23* inargN24* inargN25* inargN26* inargN27* inargN28* inargN29* inargN30* inargN31* inargN32* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vtablewa"
                      [index table xmode inarg1* inarg2* inarg3* inargN4* inargN5* inargN6* inargN7* inargN8* inargN9* inargN10* inargN11* inargN12* inargN13* inargN14* inargN15* inargN16* inargN17* inargN18* inargN19* inargN20* inargN21* inargN22* inargN23* inargN24* inargN25* inargN26* inargN27* inargN28* inargN29* inargN30* inargN31* inargN32*]
                      *global*)]
    (new out-types ast)))

(s/fdef vtablewa
  :args (s/cat :index valid-ar? :table valid-kr? :xmode valid-i? :inarg1* valid-ar?* :inarg2* valid-ar?* :inarg3* valid-ar?* :inargN4* valid-ar?* :inargN5* valid-ar?* :inargN6* valid-ar?* :inargN7* valid-ar?* :inargN8* valid-ar?* :inargN9* valid-ar?* :inargN10* valid-ar?* :inargN11* valid-ar?* :inargN12* valid-ar?* :inargN13* valid-ar?* :inargN14* valid-ar?* :inargN15* valid-ar?* :inargN16* valid-ar?* :inargN17* valid-ar?* :inargN18* valid-ar?* :inargN19* valid-ar?* :inargN20* valid-ar?* :inargN21* valid-ar?* :inargN22* valid-ar?* :inargN23* valid-ar?* :inargN24* valid-ar?* :inargN25* valid-ar?* :inargN26* valid-ar?* :inargN27* valid-ar?* :inargN28* valid-ar?* :inargN29* valid-ar?* :inargN30* valid-ar?* :inargN31* valid-ar?* :inargN32* valid-ar?* ))
(stest/instrument `vtablewa)

(defn sfplaym
  {:arglists '([ivel inotenum xamp xfreq ipreindex & iflag* ioffset* ienv*])}
  [vel notenum amp freq preindex & [ flag* offset* env* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sfplaym"
                      [vel notenum amp freq preindex flag* offset* env*]
                      *global*)]
    (new out-types ast)))

(s/fdef sfplaym
  :args (s/cat :vel valid-i? :notenum valid-i? :amp valid-x? :freq valid-x? :preindex valid-i? :flag* valid-i?* :offset* valid-i?* :env* valid-i?* ))
(stest/instrument `sfplaym)

(defn sfplaym:a
  {:arglists '([ivel inotenum xamp xfreq ipreindex & iflag* ioffset* ienv*])}
  [vel notenum amp freq preindex & [ flag* offset* env* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sfplaym"
                      [vel notenum amp freq preindex flag* offset* env*]
                      *global*)]
    (new out-types ast)))

(s/fdef sfplaym:a
  :args (s/cat :vel valid-i? :notenum valid-i? :amp valid-x? :freq valid-x? :preindex valid-i? :flag* valid-i?* :offset* valid-i?* :env* valid-i?* ))
(stest/instrument `sfplaym:a)

(defn OSCinit
  {:arglists '([iport])}
  [port]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "OSCinit"
                      [port]
                      *global*)]
    (new out-types ast)))

(s/fdef OSCinit
  :args (s/cat :port valid-i? ))
(stest/instrument `OSCinit)

(defn OSCinit:i
  {:arglists '([iport])}
  [port]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "OSCinit"
                      [port]
                      *global*)]
    (new out-types ast)))

(s/fdef OSCinit:i
  :args (s/cat :port valid-i? ))
(stest/instrument `OSCinit:i)

(defn sc_trig
  {:arglists '([ain kdur] [kin kdur])}
  [in dur]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sc_trig"
                      [in dur]
                      *global*)]
    (new out-types ast)))

(s/fdef sc_trig
  :args (s/alt
         :ak (s/cat :in valid-ar? :dur valid-kr? )
         ))
(stest/instrument `sc_trig)

(defn sc_trig:a
  {:arglists '([ain kdur])}
  [in dur]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sc_trig"
                      [in dur]
                      *global*)]
    (new out-types ast)))

(s/fdef sc_trig:a
  :args (s/cat :in valid-ar? :dur valid-kr? ))
(stest/instrument `sc_trig:a)

(defn sc_trig:k
  {:arglists '([kin kdur])}
  [in dur]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "sc_trig"
                      [in dur]
                      *global*)]
    (new out-types ast)))

(s/fdef sc_trig:k
  :args (s/cat :in valid-kr? :dur valid-kr? ))
(stest/instrument `sc_trig:k)

(defn gbuzz
  {:arglists '([xamp xcps knh klh kmul itable & iphase*])}
  [amp cps nh lh mul table & [ phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "gbuzz"
                      [amp cps nh lh mul table phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef gbuzz
  :args (s/cat :amp valid-x? :cps valid-x? :nh valid-kr? :lh valid-kr? :mul valid-kr? :table valid-i? :phase* valid-i?* ))
(stest/instrument `gbuzz)

(defn gbuzz:a
  {:arglists '([xamp xcps knh klh kmul itable & iphase*])}
  [amp cps nh lh mul table & [ phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "gbuzz"
                      [amp cps nh lh mul table phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef gbuzz:a
  :args (s/cat :amp valid-x? :cps valid-x? :nh valid-kr? :lh valid-kr? :mul valid-kr? :table valid-i? :phase* valid-i?* ))
(stest/instrument `gbuzz:a)

(defn readscratch
  {:arglists '([& index*])}
  [& [ ndex* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "readscratch"
                      [ndex*]
                      *global*)]
    (new out-types ast)))

(s/fdef readscratch
  :args (s/cat :ndex* valid-i?* ))
(stest/instrument `readscratch)

(defn readscratch:i
  {:arglists '([& index*])}
  [& [ ndex* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "readscratch"
                      [ndex*]
                      *global*)]
    (new out-types ast)))

(s/fdef readscratch:i
  :args (s/cat :ndex* valid-i?* ))
(stest/instrument `readscratch:i)

(defn outipc
  {:arglists '([ichn iprog imin imax])}
  [chn prog min max]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outipc"
                      [chn prog min max]
                      *global*)]
    (new out-types ast)))

(s/fdef outipc
  :args (s/cat :chn valid-i? :prog valid-i? :min valid-i? :max valid-i? ))
(stest/instrument `outipc)

(defn diskin2
  {:arglists '([Sfilcod & kpitch* iskiptim* iwrap* iformat* iwsize* ibufsize* iskipinit* iskipinit*] [ifilcod & kpitch* iskiptim* iwrap* iformat* iwsize* ibufsize* iskipinit* iskipinit*] [Sfilcod & kpitch* iskiptim* iwrap* iformat* iwsize* ibufsize* iskipinit* iskipinit*] [ifilcod & kpitch* iskiptim* iwrap* iformat* iwsize* ibufsize* iskipinit* iskipinit*])}
  [filcod & [ pitch* skiptim* wrap* format* wsize* bufsize* skipinit* skipinit* ]]
  (let [out-types-quoted 'AudioArray
        out-types AudioArray
        ast (ast-node out-types-quoted
                      "diskin2"
                      [filcod pitch* skiptim* wrap* format* wsize* bufsize* skipinit* skipinit*]
                      *global*)]
    (new out-types ast)))

(s/fdef diskin2
  :args (s/alt
         :Skiiiiiii (s/cat :filcod valid-S? :pitch* valid-kr?* :skiptim* valid-i?* :wrap* valid-i?* :format* valid-i?* :wsize* valid-i?* :bufsize* valid-i?* :skipinit* valid-i?* :skipinit* valid-i?* )
         ))
(stest/instrument `diskin2)

(defn diskin2:aArr
  {:arglists '([Sfilcod & kpitch* iskiptim* iwrap* iformat* iwsize* ibufsize* iskipinit* iskipinit*] [ifilcod & kpitch* iskiptim* iwrap* iformat* iwsize* ibufsize* iskipinit* iskipinit*])}
  [filcod & [ pitch* skiptim* wrap* format* wsize* bufsize* skipinit* skipinit* ]]
  (let [out-types-quoted 'AudioArray
        out-types AudioArray
        ast (ast-node out-types-quoted
                      "diskin2"
                      [filcod pitch* skiptim* wrap* format* wsize* bufsize* skipinit* skipinit*]
                      *global*)]
    (new out-types ast)))

(s/fdef diskin2:aArr
  :args (s/alt
         :Skiiiiiii (s/cat :filcod valid-S? :pitch* valid-kr?* :skiptim* valid-i?* :wrap* valid-i?* :format* valid-i?* :wsize* valid-i?* :bufsize* valid-i?* :skipinit* valid-i?* :skipinit* valid-i?* )
         ))
(stest/instrument `diskin2:aArr)

(defn diskin2:a
  {:arglists '([Sfilcod & kpitch* iskiptim* iwrap* iformat* iwsize* ibufsize* iskipinit* iskipinit*] [ifilcod & kpitch* iskiptim* iwrap* iformat* iwsize* ibufsize* iskipinit* iskipinit*])}
  [filcod & [ pitch* skiptim* wrap* format* wsize* bufsize* skipinit* skipinit* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "diskin2"
                      [filcod pitch* skiptim* wrap* format* wsize* bufsize* skipinit* skipinit*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef diskin2:a
  :args (s/alt
         :Skiiiiiii (s/cat :filcod valid-S? :pitch* valid-kr?* :skiptim* valid-i?* :wrap* valid-i?* :format* valid-i?* :wsize* valid-i?* :bufsize* valid-i?* :skipinit* valid-i?* :skipinit* valid-i?* )
         ))
(stest/instrument `diskin2:a)

(defn inz
  {:arglists '([ksig1])}
  [sig1]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "inz"
                      [sig1]
                      *global*)]
    (new out-types ast)))

(s/fdef inz
  :args (s/cat :sig1 valid-kr? ))
(stest/instrument `inz)

(defn clockoff
  {:arglists '([inum])}
  [num]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "clockoff"
                      [num]
                      *global*)]
    (new out-types ast)))

(s/fdef clockoff
  :args (s/cat :num valid-i? ))
(stest/instrument `clockoff)

(defn zacl
  {:arglists '([kfirst klast])}
  [first last]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "zacl"
                      [first last]
                      *global*)]
    (new out-types ast)))

(s/fdef zacl
  :args (s/cat :first valid-kr? :last valid-kr? ))
(stest/instrument `zacl)

(defn cpsmidib
  {:arglists '([& irange*] [& irange*])}
  [& [ range* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "cpsmidib"
                      [range*]
                      *global*)]
    (new out-types ast)))

(s/fdef cpsmidib
  :args (s/alt
         :i (s/cat :range* valid-i?* )
         ))
(stest/instrument `cpsmidib)

(defn cpsmidib:i
  {:arglists '([& irange*])}
  [& [ range* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "cpsmidib"
                      [range*]
                      *global*)]
    (new out-types ast)))

(s/fdef cpsmidib:i
  :args (s/cat :range* valid-i?* ))
(stest/instrument `cpsmidib:i)

(defn cpsmidib:k
  {:arglists '([& irange*])}
  [& [ range* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "cpsmidib"
                      [range*]
                      *global*)]
    (new out-types ast)))

(s/fdef cpsmidib:k
  :args (s/cat :range* valid-i?* ))
(stest/instrument `cpsmidib:k)

(defn spat3di
  {:arglists '([ain iX iY iZ idistortion ift imode & istor*])}
  [in X Y Z distortion ft mode & [ stor* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "spat3di"
                      [in X Y Z distortion ft mode stor*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef spat3di
  :args (s/cat :in valid-ar? :X valid-i? :Y valid-i? :Z valid-i? :distortion valid-i? :ft valid-i? :mode valid-i? :stor* valid-i?* ))
(stest/instrument `spat3di)

(defn inletv
  {:arglists '([Sname])}
  [name]
  (let [out-types-quoted 'AudioArray
        out-types AudioArray
        ast (ast-node out-types-quoted
                      "inletv"
                      [name]
                      *global*)]
    (new out-types ast)))

(s/fdef inletv
  :args (s/cat :name valid-S? ))
(stest/instrument `inletv)

(defn inletv:aArr
  {:arglists '([Sname])}
  [name]
  (let [out-types-quoted 'AudioArray
        out-types AudioArray
        ast (ast-node out-types-quoted
                      "inletv"
                      [name]
                      *global*)]
    (new out-types ast)))

(s/fdef inletv:aArr
  :args (s/cat :name valid-S? ))
(stest/instrument `inletv:aArr)

(defn filter2
  {:arglists '([asig iM iN & ib1* ib2* ibM3* ia4* ia5* iaN6* iaN7* iaN8* iaN9* iaN10* iaN11* iaN12* iaN13* iaN14* iaN15* iaN16*] [ksig iM iN & ib1* ib2* ibM3* ia4* ia5* iaN6* iaN7* iaN8* iaN9* iaN10* iaN11* iaN12* iaN13* iaN14* iaN15* iaN16*])}
  [sig M N & [ b1* b2* bM3* a4* a5* aN6* aN7* aN8* aN9* aN10* aN11* aN12* aN13* aN14* aN15* aN16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "filter2"
                      [sig M N b1* b2* bM3* a4* a5* aN6* aN7* aN8* aN9* aN10* aN11* aN12* aN13* aN14* aN15* aN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef filter2
  :args (s/alt
         :aiiiiiiiiiiiiiiiiii (s/cat :sig valid-ar? :M valid-i? :N valid-i? :b1* valid-i?* :b2* valid-i?* :bM3* valid-i?* :a4* valid-i?* :a5* valid-i?* :aN6* valid-i?* :aN7* valid-i?* :aN8* valid-i?* :aN9* valid-i?* :aN10* valid-i?* :aN11* valid-i?* :aN12* valid-i?* :aN13* valid-i?* :aN14* valid-i?* :aN15* valid-i?* :aN16* valid-i?* )
         ))
(stest/instrument `filter2)

(defn filter2:a
  {:arglists '([asig iM iN & ib1* ib2* ibM3* ia4* ia5* iaN6* iaN7* iaN8* iaN9* iaN10* iaN11* iaN12* iaN13* iaN14* iaN15* iaN16*])}
  [sig M N & [ b1* b2* bM3* a4* a5* aN6* aN7* aN8* aN9* aN10* aN11* aN12* aN13* aN14* aN15* aN16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "filter2"
                      [sig M N b1* b2* bM3* a4* a5* aN6* aN7* aN8* aN9* aN10* aN11* aN12* aN13* aN14* aN15* aN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef filter2:a
  :args (s/cat :sig valid-ar? :M valid-i? :N valid-i? :b1* valid-i?* :b2* valid-i?* :bM3* valid-i?* :a4* valid-i?* :a5* valid-i?* :aN6* valid-i?* :aN7* valid-i?* :aN8* valid-i?* :aN9* valid-i?* :aN10* valid-i?* :aN11* valid-i?* :aN12* valid-i?* :aN13* valid-i?* :aN14* valid-i?* :aN15* valid-i?* :aN16* valid-i?* ))
(stest/instrument `filter2:a)

(defn filter2:k
  {:arglists '([ksig iM iN & ib1* ib2* ibM3* ia4* ia5* iaN6* iaN7* iaN8* iaN9* iaN10* iaN11* iaN12* iaN13* iaN14* iaN15* iaN16*])}
  [sig M N & [ b1* b2* bM3* a4* a5* aN6* aN7* aN8* aN9* aN10* aN11* aN12* aN13* aN14* aN15* aN16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "filter2"
                      [sig M N b1* b2* bM3* a4* a5* aN6* aN7* aN8* aN9* aN10* aN11* aN12* aN13* aN14* aN15* aN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef filter2:k
  :args (s/cat :sig valid-kr? :M valid-i? :N valid-i? :b1* valid-i?* :b2* valid-i?* :bM3* valid-i?* :a4* valid-i?* :a5* valid-i?* :aN6* valid-i?* :aN7* valid-i?* :aN8* valid-i?* :aN9* valid-i?* :aN10* valid-i?* :aN11* valid-i?* :aN12* valid-i?* :aN13* valid-i?* :aN14* valid-i?* :aN15* valid-i?* :aN16* valid-i?* ))
(stest/instrument `filter2:k)

(defn vcopy_i
  {:arglists '([ifn1 ifn2 ielements & idstoffset* isrcoffset*])}
  [fn1 fn2 elements & [ dstoffset* srcoffset* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vcopy_i"
                      [fn1 fn2 elements dstoffset* srcoffset*]
                      *global*)]
    (new out-types ast)))

(s/fdef vcopy_i
  :args (s/cat :fn1 valid-i? :fn2 valid-i? :elements valid-i? :dstoffset* valid-i?* :srcoffset* valid-i?* ))
(stest/instrument `vcopy_i)

(defn wgbow
  {:arglists '([kamp kfreq kpres krat kvibf kvamp & itable* iminfreq*])}
  [amp freq pres rat vibf vamp & [ table* minfreq* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "wgbow"
                      [amp freq pres rat vibf vamp table* minfreq*]
                      *global*)]
    (new out-types ast)))

(s/fdef wgbow
  :args (s/cat :amp valid-kr? :freq valid-kr? :pres valid-kr? :rat valid-kr? :vibf valid-kr? :vamp valid-kr? :table* valid-i?* :minfreq* valid-i?* ))
(stest/instrument `wgbow)

(defn wgbow:a
  {:arglists '([kamp kfreq kpres krat kvibf kvamp & itable* iminfreq*])}
  [amp freq pres rat vibf vamp & [ table* minfreq* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "wgbow"
                      [amp freq pres rat vibf vamp table* minfreq*]
                      *global*)]
    (new out-types ast)))

(s/fdef wgbow:a
  :args (s/cat :amp valid-kr? :freq valid-kr? :pres valid-kr? :rat valid-kr? :vibf valid-kr? :vamp valid-kr? :table* valid-i?* :minfreq* valid-i?* ))
(stest/instrument `wgbow:a)

(defn linenr
  {:arglists '([aamp irise idec iatdec] [kamp irise idec iatdec] [kamp irise idec iatdec])}
  [amp rise dec atdec]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "linenr"
                      [amp rise dec atdec]
                      *global*)]
    (new out-types ast)))

(s/fdef linenr
  :args (s/alt
         :aiii (s/cat :amp valid-ar? :rise valid-i? :dec valid-i? :atdec valid-i? )
         ))
(stest/instrument `linenr)

(defn linenr:a
  {:arglists '([aamp irise idec iatdec] [kamp irise idec iatdec])}
  [amp rise dec atdec]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "linenr"
                      [amp rise dec atdec]
                      *global*)]
    (new out-types ast)))

(s/fdef linenr:a
  :args (s/alt
         :aiii (s/cat :amp valid-ar? :rise valid-i? :dec valid-i? :atdec valid-i? )
         ))
(stest/instrument `linenr:a)

(defn linenr:k
  {:arglists '([kamp irise idec iatdec])}
  [amp rise dec atdec]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "linenr"
                      [amp rise dec atdec]
                      *global*)]
    (new out-types ast)))

(s/fdef linenr:k
  :args (s/cat :amp valid-kr? :rise valid-i? :dec valid-i? :atdec valid-i? ))
(stest/instrument `linenr:k)

(defn clip
  {:arglists '([asig imeth ilimit iarg])}
  [sig meth limit arg]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "clip"
                      [sig meth limit arg]
                      *global*)]
    (new out-types ast)))

(s/fdef clip
  :args (s/cat :sig valid-ar? :meth valid-i? :limit valid-i? :arg valid-i? ))
(stest/instrument `clip)

(defn clip:a
  {:arglists '([asig imeth ilimit iarg])}
  [sig meth limit arg]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "clip"
                      [sig meth limit arg]
                      *global*)]
    (new out-types ast)))

(s/fdef clip:a
  :args (s/cat :sig valid-ar? :meth valid-i? :limit valid-i? :arg valid-i? ))
(stest/instrument `clip:a)

(defn turnoff2
  {:arglists '([Sinsno kmode krelease] [iinsno kmode krelease] [iinsno kmode krelease] [iinsno kmode krelease] [kinsno kmode krelease])}
  [insno mode release]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "turnoff2"
                      [insno mode release]
                      *global*)]
    (new out-types ast)))

(s/fdef turnoff2
  :args (s/alt
         :Skk (s/cat :insno valid-S? :mode valid-kr? :release valid-kr? )
         ))
(stest/instrument `turnoff2)

(defn pol2rect
  {:arglists '([kmagsArr] [kmagsArr kphaseArr])}
  [mags]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "pol2rect"
                      [mags]
                      *global*)]
    (new out-types ast)))

(s/fdef pol2rect
  :args (s/alt
         :kArr (s/cat :mags valid-kArr? )
         ))
(stest/instrument `pol2rect)

(defn pol2rect:kArr
  {:arglists '([kmagsArr] [kmagsArr kphaseArr])}
  [mags]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "pol2rect"
                      [mags]
                      *global*)]
    (new out-types ast)))

(s/fdef pol2rect:kArr
  :args (s/alt
         :kArr (s/cat :mags valid-kArr? )
         ))
(stest/instrument `pol2rect:kArr)

(defn vexp
  {:arglists '([itable kval kelements & kdstoffset* kverbose*])}
  [table val elements & [ dstoffset* verbose* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vexp"
                      [table val elements dstoffset* verbose*]
                      *global*)]
    (new out-types ast)))

(s/fdef vexp
  :args (s/cat :table valid-i? :val valid-kr? :elements valid-kr? :dstoffset* valid-kr?* :verbose* valid-kr?* ))
(stest/instrument `vexp)

(defn tonex
  {:arglists '([asig ahp & inumlayer* iskip*] [asig khp & inumlayer* iskip*])}
  [sig hp & [ numlayer* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tonex"
                      [sig hp numlayer* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef tonex
  :args (s/alt
         :aaii (s/cat :sig valid-ar? :hp valid-ar? :numlayer* valid-i?* :skip* valid-i?* )
         ))
(stest/instrument `tonex)

(defn tonex:a
  {:arglists '([asig ahp & inumlayer* iskip*] [asig khp & inumlayer* iskip*])}
  [sig hp & [ numlayer* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tonex"
                      [sig hp numlayer* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef tonex:a
  :args (s/alt
         :aaii (s/cat :sig valid-ar? :hp valid-ar? :numlayer* valid-i?* :skip* valid-i?* )
         ))
(stest/instrument `tonex:a)

(defn trmix
  {:arglists '([fin1 fin2])}
  [in1 in2]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "trmix"
                      [in1 in2]
                      *global*)]
    (new out-types ast)))

(s/fdef trmix
  :args (s/cat :in1 valid-f? :in2 valid-f? ))
(stest/instrument `trmix)

(defn trmix:f
  {:arglists '([fin1 fin2])}
  [in1 in2]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "trmix"
                      [in1 in2]
                      *global*)]
    (new out-types ast)))

(s/fdef trmix:f
  :args (s/cat :in1 valid-f? :in2 valid-f? ))
(stest/instrument `trmix:f)

(defn inletkid
  {:arglists '([Sname SinstanceID])}
  [name instanceID]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "inletkid"
                      [name instanceID]
                      *global*)]
    (new out-types ast)))

(s/fdef inletkid
  :args (s/cat :name valid-S? :instanceID valid-S? ))
(stest/instrument `inletkid)

(defn inletkid:k
  {:arglists '([Sname SinstanceID])}
  [name instanceID]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "inletkid"
                      [name instanceID]
                      *global*)]
    (new out-types ast)))

(s/fdef inletkid:k
  :args (s/cat :name valid-S? :instanceID valid-S? ))
(stest/instrument `inletkid:k)

(defn cps2pch
  {:arglists '([ipch iequal])}
  [pch equal]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "cps2pch"
                      [pch equal]
                      *global*)]
    (new out-types ast)))

(s/fdef cps2pch
  :args (s/cat :pch valid-i? :equal valid-i? ))
(stest/instrument `cps2pch)

(defn cps2pch:i
  {:arglists '([ipch iequal])}
  [pch equal]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "cps2pch"
                      [pch equal]
                      *global*)]
    (new out-types ast)))

(s/fdef cps2pch:i
  :args (s/cat :pch valid-i? :equal valid-i? ))
(stest/instrument `cps2pch:i)

(defn jitter2
  {:arglists '([ktotamp kamp2 kcps3 kamp4 kcps5 kamp6 kcps7 & iopt*])}
  [totamp amp2 cps3 amp4 cps5 amp6 cps7 & [ opt* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "jitter2"
                      [totamp amp2 cps3 amp4 cps5 amp6 cps7 opt*]
                      *global*)]
    (new out-types ast)))

(s/fdef jitter2
  :args (s/cat :totamp valid-kr? :amp2 valid-kr? :cps3 valid-kr? :amp4 valid-kr? :cps5 valid-kr? :amp6 valid-kr? :cps7 valid-kr? :opt* valid-i?* ))
(stest/instrument `jitter2)

(defn jitter2:k
  {:arglists '([ktotamp kamp2 kcps3 kamp4 kcps5 kamp6 kcps7 & iopt*])}
  [totamp amp2 cps3 amp4 cps5 amp6 cps7 & [ opt* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "jitter2"
                      [totamp amp2 cps3 amp4 cps5 amp6 cps7 opt*]
                      *global*)]
    (new out-types ast)))

(s/fdef jitter2:k
  :args (s/cat :totamp valid-kr? :amp2 valid-kr? :cps3 valid-kr? :amp4 valid-kr? :cps5 valid-kr? :amp6 valid-kr? :cps7 valid-kr? :opt* valid-i?* ))
(stest/instrument `jitter2:k)

(defn fog
  {:arglists '([xamp xdens xtrans aspd koct kband kris kdur kdec iolaps ifna ifnb itotdur & iphase* itmode* iskip*])}
  [amp dens trans spd oct band ris dur dec olaps fna fnb totdur & [ phase* tmode* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fog"
                      [amp dens trans spd oct band ris dur dec olaps fna fnb totdur phase* tmode* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef fog
  :args (s/cat :amp valid-x? :dens valid-x? :trans valid-x? :spd valid-ar? :oct valid-kr? :band valid-kr? :ris valid-kr? :dur valid-kr? :dec valid-kr? :olaps valid-i? :fna valid-i? :fnb valid-i? :totdur valid-i? :phase* valid-i?* :tmode* valid-i?* :skip* valid-i?* ))
(stest/instrument `fog)

(defn fog:a
  {:arglists '([xamp xdens xtrans aspd koct kband kris kdur kdec iolaps ifna ifnb itotdur & iphase* itmode* iskip*])}
  [amp dens trans spd oct band ris dur dec olaps fna fnb totdur & [ phase* tmode* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fog"
                      [amp dens trans spd oct band ris dur dec olaps fna fnb totdur phase* tmode* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef fog:a
  :args (s/cat :amp valid-x? :dens valid-x? :trans valid-x? :spd valid-ar? :oct valid-kr? :band valid-kr? :ris valid-kr? :dur valid-kr? :dec valid-kr? :olaps valid-i? :fna valid-i? :fnb valid-i? :totdur valid-i? :phase* valid-i?* :tmode* valid-i?* :skip* valid-i?* ))
(stest/instrument `fog:a)

(defn inleta
  {:arglists '([Sname])}
  [name]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "inleta"
                      [name]
                      *global*)]
    (new out-types ast)))

(s/fdef inleta
  :args (s/cat :name valid-S? ))
(stest/instrument `inleta)

(defn inleta:a
  {:arglists '([Sname])}
  [name]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "inleta"
                      [name]
                      *global*)]
    (new out-types ast)))

(s/fdef inleta:a
  :args (s/cat :name valid-S? ))
(stest/instrument `inleta:a)

(defn expsegr
  {:arglists '([ia idur2 & ib1* idur2* ic3* irel4* iz5* iz6* iz7* iz8* iz9* iz10* iz11* iz12* iz13* iz14* iz15* iz16*] [ia idur2 & ib1* idur2* ic3* irel4* iz5* iz6* iz7* iz8* iz9* iz10* iz11* iz12* iz13* iz14* iz15* iz16*])}
  [a dur2 & [ b1* dur2* c3* rel4* z5* z6* z7* z8* z9* z10* z11* z12* z13* z14* z15* z16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "expsegr"
                      [a dur2 b1* dur2* c3* rel4* z5* z6* z7* z8* z9* z10* z11* z12* z13* z14* z15* z16*]
                      *global*)]
    (new out-types ast)))

(s/fdef expsegr
  :args (s/alt
         :iiiiiiiiiiiiiiiiii (s/cat :a valid-i? :dur2 valid-i? :b1* valid-i?* :dur2* valid-i?* :c3* valid-i?* :rel4* valid-i?* :z5* valid-i?* :z6* valid-i?* :z7* valid-i?* :z8* valid-i?* :z9* valid-i?* :z10* valid-i?* :z11* valid-i?* :z12* valid-i?* :z13* valid-i?* :z14* valid-i?* :z15* valid-i?* :z16* valid-i?* )
         ))
(stest/instrument `expsegr)

(defn expsegr:a
  {:arglists '([ia idur2 & ib1* idur2* ic3* irel4* iz5* iz6* iz7* iz8* iz9* iz10* iz11* iz12* iz13* iz14* iz15* iz16*])}
  [a dur2 & [ b1* dur2* c3* rel4* z5* z6* z7* z8* z9* z10* z11* z12* z13* z14* z15* z16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "expsegr"
                      [a dur2 b1* dur2* c3* rel4* z5* z6* z7* z8* z9* z10* z11* z12* z13* z14* z15* z16*]
                      *global*)]
    (new out-types ast)))

(s/fdef expsegr:a
  :args (s/cat :a valid-i? :dur2 valid-i? :b1* valid-i?* :dur2* valid-i?* :c3* valid-i?* :rel4* valid-i?* :z5* valid-i?* :z6* valid-i?* :z7* valid-i?* :z8* valid-i?* :z9* valid-i?* :z10* valid-i?* :z11* valid-i?* :z12* valid-i?* :z13* valid-i?* :z14* valid-i?* :z15* valid-i?* :z16* valid-i?* ))
(stest/instrument `expsegr:a)

(defn expsegr:k
  {:arglists '([ia idur2 & ib1* idur2* ic3* irel4* iz5* iz6* iz7* iz8* iz9* iz10* iz11* iz12* iz13* iz14* iz15* iz16*])}
  [a dur2 & [ b1* dur2* c3* rel4* z5* z6* z7* z8* z9* z10* z11* z12* z13* z14* z15* z16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "expsegr"
                      [a dur2 b1* dur2* c3* rel4* z5* z6* z7* z8* z9* z10* z11* z12* z13* z14* z15* z16*]
                      *global*)]
    (new out-types ast)))

(s/fdef expsegr:k
  :args (s/cat :a valid-i? :dur2 valid-i? :b1* valid-i?* :dur2* valid-i?* :c3* valid-i?* :rel4* valid-i?* :z5* valid-i?* :z6* valid-i?* :z7* valid-i?* :z8* valid-i?* :z9* valid-i?* :z10* valid-i?* :z11* valid-i?* :z12* valid-i?* :z13* valid-i?* :z14* valid-i?* :z15* valid-i?* :z16* valid-i?* ))
(stest/instrument `expsegr:k)

(defn expsegba
  {:arglists '([ia itim2 & ib1* itim2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a tim2 & [ b1* tim2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "expsegba"
                      [a tim2 b1* tim2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef expsegba
  :args (s/cat :a valid-i? :tim2 valid-i? :b1* valid-i?* :tim2* valid-i?* :c3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* ))
(stest/instrument `expsegba)

(defn expsegba:a
  {:arglists '([ia itim2 & ib1* itim2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a tim2 & [ b1* tim2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "expsegba"
                      [a tim2 b1* tim2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef expsegba:a
  :args (s/cat :a valid-i? :tim2 valid-i? :b1* valid-i?* :tim2* valid-i?* :c3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* ))
(stest/instrument `expsegba:a)

(defn ftconv
  {:arglists '([ain ift iplen & iskipsamples* iirlen* iskipinit*])}
  [in ft plen & [ skipsamples* irlen* skipinit* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "ftconv"
                      [in ft plen skipsamples* irlen* skipinit*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef ftconv
  :args (s/cat :in valid-ar? :ft valid-i? :plen valid-i? :skipsamples* valid-i?* :irlen* valid-i?* :skipinit* valid-i?* ))
(stest/instrument `ftconv)

(defn printf_i
  {:arglists '([Sformatstring & iarg1* iarg2* iarg3* iarg4* iarg5* iarg6* iarg7* iarg8* iarg9* iarg10* iarg11* iarg12* iarg13* iarg14* iarg15* iarg16*])}
  [formatstring & [ arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "printf_i"
                      [formatstring arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16*]
                      *global*)]
    (new out-types ast)))

(s/fdef printf_i
  :args (s/cat :formatstring valid-S? :arg1* valid-i?* :arg2* valid-i?* :arg3* valid-i?* :arg4* valid-i?* :arg5* valid-i?* :arg6* valid-i?* :arg7* valid-i?* :arg8* valid-i?* :arg9* valid-i?* :arg10* valid-i?* :arg11* valid-i?* :arg12* valid-i?* :arg13* valid-i?* :arg14* valid-i?* :arg15* valid-i?* :arg16* valid-i?* ))
(stest/instrument `printf_i)

(defn sum
  {:arglists '([& aarr1* aarr2* aarr3* aarr4* aarr5* aarr6* aarr7* aarr8* aarr9* aarr10* aarr11* aarr12* aarr13* aarr14* aarr15* aarr16* aarr17* aarr18* aarr19* aarr20* aarr21* aarr22* aarr23* aarr24* aarr25* aarr26* aarr27* aarr28* aarr29* aarr30* aarr31* aarr32*] [iarrArr] [karrArr])}
  [& [ arr1* arr2* arr3* arr4* arr5* arr6* arr7* arr8* arr9* arr10* arr11* arr12* arr13* arr14* arr15* arr16* arr17* arr18* arr19* arr20* arr21* arr22* arr23* arr24* arr25* arr26* arr27* arr28* arr29* arr30* arr31* arr32* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sum"
                      [arr1* arr2* arr3* arr4* arr5* arr6* arr7* arr8* arr9* arr10* arr11* arr12* arr13* arr14* arr15* arr16* arr17* arr18* arr19* arr20* arr21* arr22* arr23* arr24* arr25* arr26* arr27* arr28* arr29* arr30* arr31* arr32*]
                      *global*)]
    (new out-types ast)))

(s/fdef sum
  :args (s/alt
         :aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa (s/cat :arr1* valid-ar?* :arr2* valid-ar?* :arr3* valid-ar?* :arr4* valid-ar?* :arr5* valid-ar?* :arr6* valid-ar?* :arr7* valid-ar?* :arr8* valid-ar?* :arr9* valid-ar?* :arr10* valid-ar?* :arr11* valid-ar?* :arr12* valid-ar?* :arr13* valid-ar?* :arr14* valid-ar?* :arr15* valid-ar?* :arr16* valid-ar?* :arr17* valid-ar?* :arr18* valid-ar?* :arr19* valid-ar?* :arr20* valid-ar?* :arr21* valid-ar?* :arr22* valid-ar?* :arr23* valid-ar?* :arr24* valid-ar?* :arr25* valid-ar?* :arr26* valid-ar?* :arr27* valid-ar?* :arr28* valid-ar?* :arr29* valid-ar?* :arr30* valid-ar?* :arr31* valid-ar?* :arr32* valid-ar?* )
         ))
(stest/instrument `sum)

(defn sum:a
  {:arglists '([& aarr1* aarr2* aarr3* aarr4* aarr5* aarr6* aarr7* aarr8* aarr9* aarr10* aarr11* aarr12* aarr13* aarr14* aarr15* aarr16* aarr17* aarr18* aarr19* aarr20* aarr21* aarr22* aarr23* aarr24* aarr25* aarr26* aarr27* aarr28* aarr29* aarr30* aarr31* aarr32*])}
  [& [ arr1* arr2* arr3* arr4* arr5* arr6* arr7* arr8* arr9* arr10* arr11* arr12* arr13* arr14* arr15* arr16* arr17* arr18* arr19* arr20* arr21* arr22* arr23* arr24* arr25* arr26* arr27* arr28* arr29* arr30* arr31* arr32* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sum"
                      [arr1* arr2* arr3* arr4* arr5* arr6* arr7* arr8* arr9* arr10* arr11* arr12* arr13* arr14* arr15* arr16* arr17* arr18* arr19* arr20* arr21* arr22* arr23* arr24* arr25* arr26* arr27* arr28* arr29* arr30* arr31* arr32*]
                      *global*)]
    (new out-types ast)))

(s/fdef sum:a
  :args (s/cat :arr1* valid-ar?* :arr2* valid-ar?* :arr3* valid-ar?* :arr4* valid-ar?* :arr5* valid-ar?* :arr6* valid-ar?* :arr7* valid-ar?* :arr8* valid-ar?* :arr9* valid-ar?* :arr10* valid-ar?* :arr11* valid-ar?* :arr12* valid-ar?* :arr13* valid-ar?* :arr14* valid-ar?* :arr15* valid-ar?* :arr16* valid-ar?* :arr17* valid-ar?* :arr18* valid-ar?* :arr19* valid-ar?* :arr20* valid-ar?* :arr21* valid-ar?* :arr22* valid-ar?* :arr23* valid-ar?* :arr24* valid-ar?* :arr25* valid-ar?* :arr26* valid-ar?* :arr27* valid-ar?* :arr28* valid-ar?* :arr29* valid-ar?* :arr30* valid-ar?* :arr31* valid-ar?* :arr32* valid-ar?* ))
(stest/instrument `sum:a)

(defn sum:i
  {:arglists '([iarrArr])}
  [arr]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "sum"
                      [arr]
                      *global*)]
    (new out-types ast)))

(s/fdef sum:i
  :args (s/cat :arr valid-iArr? ))
(stest/instrument `sum:i)

(defn sum:k
  {:arglists '([karrArr])}
  [arr]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "sum"
                      [arr]
                      *global*)]
    (new out-types ast)))

(s/fdef sum:k
  :args (s/cat :arr valid-kArr? ))
(stest/instrument `sum:k)

(defn vtablewi
  {:arglists '([iindex itable ixmode & inarg1* inarg2* inarg3* inargN4* inargN5* inargN6* inargN7* inargN8* inargN9* inargN10* inargN11* inargN12* inargN13* inargN14* inargN15* inargN16*])}
  [index table xmode & [ narg1* narg2* narg3* nargN4* nargN5* nargN6* nargN7* nargN8* nargN9* nargN10* nargN11* nargN12* nargN13* nargN14* nargN15* nargN16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vtablewi"
                      [index table xmode narg1* narg2* narg3* nargN4* nargN5* nargN6* nargN7* nargN8* nargN9* nargN10* nargN11* nargN12* nargN13* nargN14* nargN15* nargN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef vtablewi
  :args (s/cat :index valid-i? :table valid-i? :xmode valid-i? :narg1* valid-i?* :narg2* valid-i?* :narg3* valid-i?* :nargN4* valid-i?* :nargN5* valid-i?* :nargN6* valid-i?* :nargN7* valid-i?* :nargN8* valid-i?* :nargN9* valid-i?* :nargN10* valid-i?* :nargN11* valid-i?* :nargN12* valid-i?* :nargN13* valid-i?* :nargN14* valid-i?* :nargN15* valid-i?* :nargN16* valid-i?* ))
(stest/instrument `vtablewi)

(defn resonx
  {:arglists '([asig xcenter-frequency xbandwidth & inumlayer* iscale* iskip*])}
  [sig center-frequency bandwidth & [ numlayer* scale* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "resonx"
                      [sig center-frequency bandwidth numlayer* scale* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef resonx
  :args (s/cat :sig valid-ar? :center-frequency valid-x? :bandwidth valid-x? :numlayer* valid-i?* :scale* valid-i?* :skip* valid-i?* ))
(stest/instrument `resonx)

(defn resonx:a
  {:arglists '([asig xcenter-frequency xbandwidth & inumlayer* iscale* iskip*])}
  [sig center-frequency bandwidth & [ numlayer* scale* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "resonx"
                      [sig center-frequency bandwidth numlayer* scale* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef resonx:a
  :args (s/cat :sig valid-ar? :center-frequency valid-x? :bandwidth valid-x? :numlayer* valid-i?* :scale* valid-i?* :skip* valid-i?* ))
(stest/instrument `resonx:a)

(defn lposcil3
  {:arglists '([kamp kfreqratio kloop kend & itable* iphase*])}
  [amp freqratio loop end & [ table* phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "lposcil3"
                      [amp freqratio loop end table* phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef lposcil3
  :args (s/cat :amp valid-kr? :freqratio valid-kr? :loop valid-kr? :end valid-kr? :table* valid-i?* :phase* valid-i?* ))
(stest/instrument `lposcil3)

(defn lposcil3:a
  {:arglists '([kamp kfreqratio kloop kend & itable* iphase*])}
  [amp freqratio loop end & [ table* phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "lposcil3"
                      [amp freqratio loop end table* phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef lposcil3:a
  :args (s/cat :amp valid-kr? :freqratio valid-kr? :loop valid-kr? :end valid-kr? :table* valid-i?* :phase* valid-i?* ))
(stest/instrument `lposcil3:a)

(defn flashtxt
  {:arglists '([iwhich String] [iwhich itring])}
  [which tring]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "flashtxt"
                      [which tring]
                      *global*)]
    (new out-types ast)))

(s/fdef flashtxt
  :args (s/alt
         :iS (s/cat :which valid-i? :tring valid-S? )
         ))
(stest/instrument `flashtxt)

(defn shiftout
  {:arglists '([kInArr & ioff*])}
  [In & [ off* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "shiftout"
                      [In off*]
                      *global*)]
    (new out-types ast)))

(s/fdef shiftout
  :args (s/cat :In valid-kArr? :off* valid-i?* ))
(stest/instrument `shiftout)

(defn shiftout:a
  {:arglists '([kInArr & ioff*])}
  [In & [ off* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "shiftout"
                      [In off*]
                      *global*)]
    (new out-types ast)))

(s/fdef shiftout:a
  :args (s/cat :In valid-kArr? :off* valid-i?* ))
(stest/instrument `shiftout:a)

(defn vsubv
  {:arglists '([ifn1 ifn2 kelements & kdstoffset* ksrcoffset* kverbose*])}
  [fn1 fn2 elements & [ dstoffset* srcoffset* verbose* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vsubv"
                      [fn1 fn2 elements dstoffset* srcoffset* verbose*]
                      *global*)]
    (new out-types ast)))

(s/fdef vsubv
  :args (s/cat :fn1 valid-i? :fn2 valid-i? :elements valid-kr? :dstoffset* valid-kr?* :srcoffset* valid-kr?* :verbose* valid-kr?* ))
(stest/instrument `vsubv)

(defn vmult_i
  {:arglists '([itable ival ielements & idstoffset*])}
  [table val elements & [ dstoffset* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vmult_i"
                      [table val elements dstoffset*]
                      *global*)]
    (new out-types ast)))

(s/fdef vmult_i
  :args (s/cat :table valid-i? :val valid-i? :elements valid-i? :dstoffset* valid-i?* ))
(stest/instrument `vmult_i)

(defn vactrol
  {:arglists '([asig & iup* idown*])}
  [sig & [ up* down* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "vactrol"
                      [sig up* down*]
                      *global*)]
    (new out-types ast)))

(s/fdef vactrol
  :args (s/cat :sig valid-ar? :up* valid-i?* :down* valid-i?* ))
(stest/instrument `vactrol)

(defn vactrol:a
  {:arglists '([asig & iup* idown*])}
  [sig & [ up* down* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "vactrol"
                      [sig up* down*]
                      *global*)]
    (new out-types ast)))

(s/fdef vactrol:a
  :args (s/cat :sig valid-ar? :up* valid-i?* :down* valid-i?* ))
(stest/instrument `vactrol:a)

(defn fillarray
  {:arglists '([& Sval1* Sval2* Svaln3* Svaln4* Svaln5* Svaln6* Svaln7* Svaln8* Svaln9* Svaln10* Svaln11* Svaln12* Svaln13* Svaln14* Svaln15* Svaln16*] [& ival1* ival2* ivaln3* ivaln4* ivaln5* ivaln6* ivaln7* ivaln8* ivaln9* ivaln10* ivaln11* ivaln12* ivaln13* ivaln14* ivaln15* ivaln16*] [& ival1* ival2* ivaln3* ivaln4* ivaln5* ivaln6* ivaln7* ivaln8* ivaln9* ivaln10* ivaln11* ivaln12* ivaln13* ivaln14* ivaln15* ivaln16*])}
  [& [ val1* val2* valn3* valn4* valn5* valn6* valn7* valn8* valn9* valn10* valn11* valn12* valn13* valn14* valn15* valn16* ]]
  (let [out-types-quoted 'StringArray
        out-types StringArray
        ast (ast-node out-types-quoted
                      "fillarray"
                      [val1* val2* valn3* valn4* valn5* valn6* valn7* valn8* valn9* valn10* valn11* valn12* valn13* valn14* valn15* valn16*]
                      *global*)]
    (new out-types ast)))

(s/fdef fillarray
  :args (s/alt
         :SSSSSSSSSSSSSSSS (s/cat :val1* valid-S?* :val2* valid-S?* :valn3* valid-S?* :valn4* valid-S?* :valn5* valid-S?* :valn6* valid-S?* :valn7* valid-S?* :valn8* valid-S?* :valn9* valid-S?* :valn10* valid-S?* :valn11* valid-S?* :valn12* valid-S?* :valn13* valid-S?* :valn14* valid-S?* :valn15* valid-S?* :valn16* valid-S?* )
         ))
(stest/instrument `fillarray)

(defn fillarray:SArr
  {:arglists '([& Sval1* Sval2* Svaln3* Svaln4* Svaln5* Svaln6* Svaln7* Svaln8* Svaln9* Svaln10* Svaln11* Svaln12* Svaln13* Svaln14* Svaln15* Svaln16*])}
  [& [ val1* val2* valn3* valn4* valn5* valn6* valn7* valn8* valn9* valn10* valn11* valn12* valn13* valn14* valn15* valn16* ]]
  (let [out-types-quoted 'StringArray
        out-types StringArray
        ast (ast-node out-types-quoted
                      "fillarray"
                      [val1* val2* valn3* valn4* valn5* valn6* valn7* valn8* valn9* valn10* valn11* valn12* valn13* valn14* valn15* valn16*]
                      *global*)]
    (new out-types ast)))

(s/fdef fillarray:SArr
  :args (s/cat :val1* valid-S?* :val2* valid-S?* :valn3* valid-S?* :valn4* valid-S?* :valn5* valid-S?* :valn6* valid-S?* :valn7* valid-S?* :valn8* valid-S?* :valn9* valid-S?* :valn10* valid-S?* :valn11* valid-S?* :valn12* valid-S?* :valn13* valid-S?* :valn14* valid-S?* :valn15* valid-S?* :valn16* valid-S?* ))
(stest/instrument `fillarray:SArr)

(defn fillarray:iArr
  {:arglists '([& ival1* ival2* ivaln3* ivaln4* ivaln5* ivaln6* ivaln7* ivaln8* ivaln9* ivaln10* ivaln11* ivaln12* ivaln13* ivaln14* ivaln15* ivaln16*])}
  [& [ val1* val2* valn3* valn4* valn5* valn6* valn7* valn8* valn9* valn10* valn11* valn12* valn13* valn14* valn15* valn16* ]]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "fillarray"
                      [val1* val2* valn3* valn4* valn5* valn6* valn7* valn8* valn9* valn10* valn11* valn12* valn13* valn14* valn15* valn16*]
                      *global*)]
    (new out-types ast)))

(s/fdef fillarray:iArr
  :args (s/cat :val1* valid-i?* :val2* valid-i?* :valn3* valid-i?* :valn4* valid-i?* :valn5* valid-i?* :valn6* valid-i?* :valn7* valid-i?* :valn8* valid-i?* :valn9* valid-i?* :valn10* valid-i?* :valn11* valid-i?* :valn12* valid-i?* :valn13* valid-i?* :valn14* valid-i?* :valn15* valid-i?* :valn16* valid-i?* ))
(stest/instrument `fillarray:iArr)

(defn fillarray:kArr
  {:arglists '([& ival1* ival2* ivaln3* ivaln4* ivaln5* ivaln6* ivaln7* ivaln8* ivaln9* ivaln10* ivaln11* ivaln12* ivaln13* ivaln14* ivaln15* ivaln16*])}
  [& [ val1* val2* valn3* valn4* valn5* valn6* valn7* valn8* valn9* valn10* valn11* valn12* valn13* valn14* valn15* valn16* ]]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "fillarray"
                      [val1* val2* valn3* valn4* valn5* valn6* valn7* valn8* valn9* valn10* valn11* valn12* valn13* valn14* valn15* valn16*]
                      *global*)]
    (new out-types ast)))

(s/fdef fillarray:kArr
  :args (s/cat :val1* valid-i?* :val2* valid-i?* :valn3* valid-i?* :valn4* valid-i?* :valn5* valid-i?* :valn6* valid-i?* :valn7* valid-i?* :valn8* valid-i?* :valn9* valid-i?* :valn10* valid-i?* :valn11* valid-i?* :valn12* valid-i?* :valn13* valid-i?* :valn14* valid-i?* :valn15* valid-i?* :valn16* valid-i?* ))
(stest/instrument `fillarray:kArr)

(defn event_i
  {:arglists '([Sscorechar Sinsname & idelay1* idur2* ip3* ip4* ip5* ip6* ip7* ip8* ip9* ip10* ip11* ip12* ip13* ip14* ip15* ip16*] [Sscorechar iinsname & idelay1* idur2* ip3* ip4* ip5* ip6* ip7* ip8* ip9* ip10* ip11* ip12* ip13* ip14* ip15* ip16*])}
  [scorechar insname & [ delay1* dur2* p3* p4* p5* p6* p7* p8* p9* p10* p11* p12* p13* p14* p15* p16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "event_i"
                      [scorechar insname delay1* dur2* p3* p4* p5* p6* p7* p8* p9* p10* p11* p12* p13* p14* p15* p16*]
                      *global*)]
    (new out-types ast)))

(s/fdef event_i
  :args (s/alt
         :SSiiiiiiiiiiiiiiii (s/cat :scorechar valid-S? :insname valid-S? :delay1* valid-i?* :dur2* valid-i?* :p3* valid-i?* :p4* valid-i?* :p5* valid-i?* :p6* valid-i?* :p7* valid-i?* :p8* valid-i?* :p9* valid-i?* :p10* valid-i?* :p11* valid-i?* :p12* valid-i?* :p13* valid-i?* :p14* valid-i?* :p15* valid-i?* :p16* valid-i?* )
         ))
(stest/instrument `event_i)

(defn maca
  {:arglists '([& asig1* asig2* asig3* asig4* asig5* asig6* asig7* asig8* asig9* asig10* asig11* asig12* asig13* asig14* asig15* asig16* asig17* asig18* asig19* asig20* asig21* asig22* asig23* asig24* asig25* asig26* asig27* asig28* asig29* asig30* asig31* asig32*])}
  [& [ sig1* sig2* sig3* sig4* sig5* sig6* sig7* sig8* sig9* sig10* sig11* sig12* sig13* sig14* sig15* sig16* sig17* sig18* sig19* sig20* sig21* sig22* sig23* sig24* sig25* sig26* sig27* sig28* sig29* sig30* sig31* sig32* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "maca"
                      [sig1* sig2* sig3* sig4* sig5* sig6* sig7* sig8* sig9* sig10* sig11* sig12* sig13* sig14* sig15* sig16* sig17* sig18* sig19* sig20* sig21* sig22* sig23* sig24* sig25* sig26* sig27* sig28* sig29* sig30* sig31* sig32*]
                      *global*)]
    (new out-types ast)))

(s/fdef maca
  :args (s/cat :sig1* valid-ar?* :sig2* valid-ar?* :sig3* valid-ar?* :sig4* valid-ar?* :sig5* valid-ar?* :sig6* valid-ar?* :sig7* valid-ar?* :sig8* valid-ar?* :sig9* valid-ar?* :sig10* valid-ar?* :sig11* valid-ar?* :sig12* valid-ar?* :sig13* valid-ar?* :sig14* valid-ar?* :sig15* valid-ar?* :sig16* valid-ar?* :sig17* valid-ar?* :sig18* valid-ar?* :sig19* valid-ar?* :sig20* valid-ar?* :sig21* valid-ar?* :sig22* valid-ar?* :sig23* valid-ar?* :sig24* valid-ar?* :sig25* valid-ar?* :sig26* valid-ar?* :sig27* valid-ar?* :sig28* valid-ar?* :sig29* valid-ar?* :sig30* valid-ar?* :sig31* valid-ar?* :sig32* valid-ar?* ))
(stest/instrument `maca)

(defn maca:a
  {:arglists '([& asig1* asig2* asig3* asig4* asig5* asig6* asig7* asig8* asig9* asig10* asig11* asig12* asig13* asig14* asig15* asig16* asig17* asig18* asig19* asig20* asig21* asig22* asig23* asig24* asig25* asig26* asig27* asig28* asig29* asig30* asig31* asig32*])}
  [& [ sig1* sig2* sig3* sig4* sig5* sig6* sig7* sig8* sig9* sig10* sig11* sig12* sig13* sig14* sig15* sig16* sig17* sig18* sig19* sig20* sig21* sig22* sig23* sig24* sig25* sig26* sig27* sig28* sig29* sig30* sig31* sig32* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "maca"
                      [sig1* sig2* sig3* sig4* sig5* sig6* sig7* sig8* sig9* sig10* sig11* sig12* sig13* sig14* sig15* sig16* sig17* sig18* sig19* sig20* sig21* sig22* sig23* sig24* sig25* sig26* sig27* sig28* sig29* sig30* sig31* sig32*]
                      *global*)]
    (new out-types ast)))

(s/fdef maca:a
  :args (s/cat :sig1* valid-ar?* :sig2* valid-ar?* :sig3* valid-ar?* :sig4* valid-ar?* :sig5* valid-ar?* :sig6* valid-ar?* :sig7* valid-ar?* :sig8* valid-ar?* :sig9* valid-ar?* :sig10* valid-ar?* :sig11* valid-ar?* :sig12* valid-ar?* :sig13* valid-ar?* :sig14* valid-ar?* :sig15* valid-ar?* :sig16* valid-ar?* :sig17* valid-ar?* :sig18* valid-ar?* :sig19* valid-ar?* :sig20* valid-ar?* :sig21* valid-ar?* :sig22* valid-ar?* :sig23* valid-ar?* :sig24* valid-ar?* :sig25* valid-ar?* :sig26* valid-ar?* :sig27* valid-ar?* :sig28* valid-ar?* :sig29* valid-ar?* :sig30* valid-ar?* :sig31* valid-ar?* :sig32* valid-ar?* ))
(stest/instrument `maca:a)

(defn freeverb
  {:arglists '([ainL ainR kRoomSize kHFDamp & iSRate* iSkip*])}
  [inL inR RoomSize HFDamp & [ SRate* Skip* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "freeverb"
                      [inL inR RoomSize HFDamp SRate* Skip*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef freeverb
  :args (s/cat :inL valid-ar? :inR valid-ar? :RoomSize valid-kr? :HFDamp valid-kr? :SRate* valid-i?* :Skip* valid-i?* ))
(stest/instrument `freeverb)

(defn dot
  {:arglists '([iarr1Arr iarg2Arr] [karr1Arr karg2Arr])}
  [arr1 arg2]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "dot"
                      [arr1 arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef dot
  :args (s/alt
         :iArriArr (s/cat :arr1 valid-iArr? :arg2 valid-iArr? )
         ))
(stest/instrument `dot)

(defn dot:i
  {:arglists '([iarr1Arr iarg2Arr])}
  [arr1 arg2]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "dot"
                      [arr1 arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef dot:i
  :args (s/cat :arr1 valid-iArr? :arg2 valid-iArr? ))
(stest/instrument `dot:i)

(defn dot:k
  {:arglists '([karr1Arr karg2Arr])}
  [arr1 arg2]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "dot"
                      [arr1 arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef dot:k
  :args (s/cat :arr1 valid-kArr? :arg2 valid-kArr? ))
(stest/instrument `dot:k)

(defn sfinstrm
  {:arglists '([ivel inotenum xamp xfreq instrnum ifilhandle & iflag* ioffset* ioffset*])}
  [vel notenum amp freq nstrnum filhandle & [ flag* offset* offset* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sfinstrm"
                      [vel notenum amp freq nstrnum filhandle flag* offset* offset*]
                      *global*)]
    (new out-types ast)))

(s/fdef sfinstrm
  :args (s/cat :vel valid-i? :notenum valid-i? :amp valid-x? :freq valid-x? :nstrnum valid-i? :filhandle valid-i? :flag* valid-i?* :offset* valid-i?* :offset* valid-i?* ))
(stest/instrument `sfinstrm)

(defn sfinstrm:a
  {:arglists '([ivel inotenum xamp xfreq instrnum ifilhandle & iflag* ioffset* ioffset*])}
  [vel notenum amp freq nstrnum filhandle & [ flag* offset* offset* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sfinstrm"
                      [vel notenum amp freq nstrnum filhandle flag* offset* offset*]
                      *global*)]
    (new out-types ast)))

(s/fdef sfinstrm:a
  :args (s/cat :vel valid-i? :notenum valid-i? :amp valid-x? :freq valid-x? :nstrnum valid-i? :filhandle valid-i? :flag* valid-i?* :offset* valid-i?* :offset* valid-i?* ))
(stest/instrument `sfinstrm:a)

(defn tableikt
  {:arglists '([xindex ktable & ixmode* ixoff* iwrap*] [xindex ktable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tableikt"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef tableikt
  :args (s/alt
         :xkiii (s/cat :index valid-x? :table valid-kr? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* )
         ))
(stest/instrument `tableikt)

(defn tableikt:a
  {:arglists '([xindex ktable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tableikt"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef tableikt:a
  :args (s/cat :index valid-x? :table valid-kr? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* ))
(stest/instrument `tableikt:a)

(defn tableikt:k
  {:arglists '([xindex ktable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "tableikt"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef tableikt:k
  :args (s/cat :index valid-x? :table valid-kr? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* ))
(stest/instrument `tableikt:k)

(defn rand
  {:arglists '([xamp iseed & isel* ioffset*] [xamp iseed & isel* ioffset*])}
  [amp seed & [ sel* offset* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "rand"
                      [amp seed sel* offset*]
                      *global*)]
    (new out-types ast)))

(s/fdef rand
  :args (s/alt
         :xiii (s/cat :amp valid-x? :seed valid-i? :sel* valid-i?* :offset* valid-i?* )
         ))
(stest/instrument `rand)

(defn rand:a
  {:arglists '([xamp iseed & isel* ioffset*])}
  [amp seed & [ sel* offset* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "rand"
                      [amp seed sel* offset*]
                      *global*)]
    (new out-types ast)))

(s/fdef rand:a
  :args (s/cat :amp valid-x? :seed valid-i? :sel* valid-i?* :offset* valid-i?* ))
(stest/instrument `rand:a)

(defn rand:k
  {:arglists '([xamp iseed & isel* ioffset*])}
  [amp seed & [ sel* offset* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "rand"
                      [amp seed sel* offset*]
                      *global*)]
    (new out-types ast)))

(s/fdef rand:k
  :args (s/cat :amp valid-x? :seed valid-i? :sel* valid-i?* :offset* valid-i?* ))
(stest/instrument `rand:k)

(defn butterbr
  {:arglists '([asig xfreq xband & iskip*])}
  [sig freq band & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "butterbr"
                      [sig freq band skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef butterbr
  :args (s/cat :sig valid-ar? :freq valid-x? :band valid-x? :skip* valid-i?* ))
(stest/instrument `butterbr)

(defn butterbr:a
  {:arglists '([asig xfreq xband & iskip*])}
  [sig freq band & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "butterbr"
                      [sig freq band skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef butterbr:a
  :args (s/cat :sig valid-ar? :freq valid-x? :band valid-x? :skip* valid-i?* ))
(stest/instrument `butterbr:a)

(defn mute
  {:arglists '([Sinsname & iswitch*] [iinsname & iswitch*])}
  [insname & [ switch* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "mute"
                      [insname switch*]
                      *global*)]
    (new out-types ast)))

(s/fdef mute
  :args (s/alt
         :Si (s/cat :insname valid-S? :switch* valid-i?* )
         ))
(stest/instrument `mute)

(defn midic7
  {:arglists '([ictlno imin imax & itable*] [ictlno kmin kmax & itable*])}
  [ctlno min max & [ table* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "midic7"
                      [ctlno min max table*]
                      *global*)]
    (new out-types ast)))

(s/fdef midic7
  :args (s/alt
         :iiii (s/cat :ctlno valid-i? :min valid-i? :max valid-i? :table* valid-i?* )
         ))
(stest/instrument `midic7)

(defn midic7:i
  {:arglists '([ictlno imin imax & itable*])}
  [ctlno min max & [ table* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "midic7"
                      [ctlno min max table*]
                      *global*)]
    (new out-types ast)))

(s/fdef midic7:i
  :args (s/cat :ctlno valid-i? :min valid-i? :max valid-i? :table* valid-i?* ))
(stest/instrument `midic7:i)

(defn midic7:k
  {:arglists '([ictlno kmin kmax & itable*])}
  [ctlno min max & [ table* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "midic7"
                      [ctlno min max table*]
                      *global*)]
    (new out-types ast)))

(s/fdef midic7:k
  :args (s/cat :ctlno valid-i? :min valid-kr? :max valid-kr? :table* valid-i?* ))
(stest/instrument `midic7:k)

(defn pdhalfy
  {:arglists '([ain kShapeAmount & ibipolar* ifullscale*])}
  [in ShapeAmount & [ bipolar* fullscale* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pdhalfy"
                      [in ShapeAmount bipolar* fullscale*]
                      *global*)]
    (new out-types ast)))

(s/fdef pdhalfy
  :args (s/cat :in valid-ar? :ShapeAmount valid-kr? :bipolar* valid-i?* :fullscale* valid-i?* ))
(stest/instrument `pdhalfy)

(defn pdhalfy:a
  {:arglists '([ain kShapeAmount & ibipolar* ifullscale*])}
  [in ShapeAmount & [ bipolar* fullscale* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pdhalfy"
                      [in ShapeAmount bipolar* fullscale*]
                      *global*)]
    (new out-types ast)))

(s/fdef pdhalfy:a
  :args (s/cat :in valid-ar? :ShapeAmount valid-kr? :bipolar* valid-i?* :fullscale* valid-i?* ))
(stest/instrument `pdhalfy:a)

(defn cbrt
  {:arglists '([iargArr] [kargArr])}
  [arg]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "cbrt"
                      [arg]
                      *global*)]
    (new out-types ast)))

(s/fdef cbrt
  :args (s/alt
         :iArr (s/cat :arg valid-iArr? )
         ))
(stest/instrument `cbrt)

(defn cbrt:iArr
  {:arglists '([iargArr])}
  [arg]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "cbrt"
                      [arg]
                      *global*)]
    (new out-types ast)))

(s/fdef cbrt:iArr
  :args (s/cat :arg valid-iArr? ))
(stest/instrument `cbrt:iArr)

(defn cbrt:kArr
  {:arglists '([kargArr])}
  [arg]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "cbrt"
                      [arg]
                      *global*)]
    (new out-types ast)))

(s/fdef cbrt:kArr
  :args (s/cat :arg valid-kArr? ))
(stest/instrument `cbrt:kArr)

(defn ATSpartialtap
  {:arglists '([ipartialnum])}
  [partialnum]
  (let [out-types-quoted '[ControlSignal ControlSignal]
        out-types [ControlSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "ATSpartialtap"
                      [partialnum]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef ATSpartialtap
  :args (s/cat :partialnum valid-i? ))
(stest/instrument `ATSpartialtap)

(defn seqtime2
  {:arglists '([ktrig_in ktime_unit kstart kloop kinitndx kfn_times])}
  [trig_in time_unit start loop initndx fn_times]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "seqtime2"
                      [trig_in time_unit start loop initndx fn_times]
                      *global*)]
    (new out-types ast)))

(s/fdef seqtime2
  :args (s/cat :trig_in valid-kr? :time_unit valid-kr? :start valid-kr? :loop valid-kr? :initndx valid-kr? :fn_times valid-kr? ))
(stest/instrument `seqtime2)

(defn seqtime2:k
  {:arglists '([ktrig_in ktime_unit kstart kloop kinitndx kfn_times])}
  [trig_in time_unit start loop initndx fn_times]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "seqtime2"
                      [trig_in time_unit start loop initndx fn_times]
                      *global*)]
    (new out-types ast)))

(s/fdef seqtime2:k
  :args (s/cat :trig_in valid-kr? :time_unit valid-kr? :start valid-kr? :loop valid-kr? :initndx valid-kr? :fn_times valid-kr? ))
(stest/instrument `seqtime2:k)

(defn dssiactivate
  {:arglists '([ihandle ktoggle])}
  [handle toggle]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "dssiactivate"
                      [handle toggle]
                      *global*)]
    (new out-types ast)))

(s/fdef dssiactivate
  :args (s/cat :handle valid-i? :toggle valid-kr? ))
(stest/instrument `dssiactivate)

(defn vlowres
  {:arglists '([asig kcutoff-frequency kresonance iord ksep])}
  [sig cutoff-frequency resonance ord sep]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "vlowres"
                      [sig cutoff-frequency resonance ord sep]
                      *global*)]
    (new out-types ast)))

(s/fdef vlowres
  :args (s/cat :sig valid-ar? :cutoff-frequency valid-kr? :resonance valid-kr? :ord valid-i? :sep valid-kr? ))
(stest/instrument `vlowres)

(defn vlowres:a
  {:arglists '([asig kcutoff-frequency kresonance iord ksep])}
  [sig cutoff-frequency resonance ord sep]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "vlowres"
                      [sig cutoff-frequency resonance ord sep]
                      *global*)]
    (new out-types ast)))

(s/fdef vlowres:a
  :args (s/cat :sig valid-ar? :cutoff-frequency valid-kr? :resonance valid-kr? :ord valid-i? :sep valid-kr? ))
(stest/instrument `vlowres:a)

(defn exitnow
  {:arglists '([& ivalue*])}
  [& [ value* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "exitnow"
                      [value*]
                      *global*)]
    (new out-types ast)))

(s/fdef exitnow
  :args (s/cat :value* valid-i?* ))
(stest/instrument `exitnow)

(defn mags
  {:arglists '([kinArr])}
  [in]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "mags"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef mags
  :args (s/cat :in valid-kArr? ))
(stest/instrument `mags)

(defn mags:kArr
  {:arglists '([kinArr])}
  [in]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "mags"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef mags:kArr
  :args (s/cat :in valid-kArr? ))
(stest/instrument `mags:kArr)

(defn return
  {:arglists '([ival])}
  [val]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "return"
                      [val]
                      *global*)]
    (new out-types ast)))

(s/fdef return
  :args (s/cat :val valid-i? ))
(stest/instrument `return)

(defn hilbert2
  {:arglists '([asig ifftsize ihopsize])}
  [sig fftsize hopsize]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "hilbert2"
                      [sig fftsize hopsize]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef hilbert2
  :args (s/cat :sig valid-ar? :fftsize valid-i? :hopsize valid-i? ))
(stest/instrument `hilbert2)

(defn vibes
  {:arglists '([kamp kfreq ihrd ipos imp kvibf kvamp ivibfn idec])}
  [amp freq hrd pos mp vibf vamp vibfn dec]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "vibes"
                      [amp freq hrd pos mp vibf vamp vibfn dec]
                      *global*)]
    (new out-types ast)))

(s/fdef vibes
  :args (s/cat :amp valid-kr? :freq valid-kr? :hrd valid-i? :pos valid-i? :mp valid-i? :vibf valid-kr? :vamp valid-kr? :vibfn valid-i? :dec valid-i? ))
(stest/instrument `vibes)

(defn vibes:a
  {:arglists '([kamp kfreq ihrd ipos imp kvibf kvamp ivibfn idec])}
  [amp freq hrd pos mp vibf vamp vibfn dec]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "vibes"
                      [amp freq hrd pos mp vibf vamp vibfn dec]
                      *global*)]
    (new out-types ast)))

(s/fdef vibes:a
  :args (s/cat :amp valid-kr? :freq valid-kr? :hrd valid-i? :pos valid-i? :mp valid-i? :vibf valid-kr? :vamp valid-kr? :vibfn valid-i? :dec valid-i? ))
(stest/instrument `vibes:a)

(defn planet
  {:arglists '([kmass1 kmass2 ksep ix iy iz ivx ivy ivz idelta & ifriction* iskip*])}
  [mass1 mass2 sep x y z vx vy vz delta & [ friction* skip* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "planet"
                      [mass1 mass2 sep x y z vx vy vz delta friction* skip*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef planet
  :args (s/cat :mass1 valid-kr? :mass2 valid-kr? :sep valid-kr? :x valid-i? :y valid-i? :z valid-i? :vx valid-i? :vy valid-i? :vz valid-i? :delta valid-i? :friction* valid-i?* :skip* valid-i?* ))
(stest/instrument `planet)

(defn fareyleni
  {:arglists '([itable])}
  [table]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "fareyleni"
                      [table]
                      *global*)]
    (new out-types ast)))

(s/fdef fareyleni
  :args (s/cat :table valid-i? ))
(stest/instrument `fareyleni)

(defn fareyleni:i
  {:arglists '([itable])}
  [table]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "fareyleni"
                      [table]
                      *global*)]
    (new out-types ast)))

(s/fdef fareyleni:i
  :args (s/cat :table valid-i? ))
(stest/instrument `fareyleni:i)

(defn vtaba
  {:arglists '([aindex itable & aout1* aout2* aout3* aoutN4* aoutN5* aoutN6* aoutN7* aoutN8* aoutN9* aoutN10* aoutN11* aoutN12* aoutN13* aoutN14* aoutN15* aoutN16* aoutN17* aoutN18* aoutN19* aoutN20* aoutN21* aoutN22* aoutN23* aoutN24* aoutN25* aoutN26* aoutN27* aoutN28* aoutN29* aoutN30* aoutN31* aoutN32*])}
  [index table & [ out1* out2* out3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16* outN17* outN18* outN19* outN20* outN21* outN22* outN23* outN24* outN25* outN26* outN27* outN28* outN29* outN30* outN31* outN32* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vtaba"
                      [index table out1* out2* out3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16* outN17* outN18* outN19* outN20* outN21* outN22* outN23* outN24* outN25* outN26* outN27* outN28* outN29* outN30* outN31* outN32*]
                      *global*)]
    (new out-types ast)))

(s/fdef vtaba
  :args (s/cat :index valid-ar? :table valid-i? :out1* valid-ar?* :out2* valid-ar?* :out3* valid-ar?* :outN4* valid-ar?* :outN5* valid-ar?* :outN6* valid-ar?* :outN7* valid-ar?* :outN8* valid-ar?* :outN9* valid-ar?* :outN10* valid-ar?* :outN11* valid-ar?* :outN12* valid-ar?* :outN13* valid-ar?* :outN14* valid-ar?* :outN15* valid-ar?* :outN16* valid-ar?* :outN17* valid-ar?* :outN18* valid-ar?* :outN19* valid-ar?* :outN20* valid-ar?* :outN21* valid-ar?* :outN22* valid-ar?* :outN23* valid-ar?* :outN24* valid-ar?* :outN25* valid-ar?* :outN26* valid-ar?* :outN27* valid-ar?* :outN28* valid-ar?* :outN29* valid-ar?* :outN30* valid-ar?* :outN31* valid-ar?* :outN32* valid-ar?* ))
(stest/instrument `vtaba)

(defn sfplay
  {:arglists '([ivel inotenum xamp xfreq ipreindex & iflag* ioffset* ienv*])}
  [vel notenum amp freq preindex & [ flag* offset* env* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "sfplay"
                      [vel notenum amp freq preindex flag* offset* env*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef sfplay
  :args (s/cat :vel valid-i? :notenum valid-i? :amp valid-x? :freq valid-x? :preindex valid-i? :flag* valid-i?* :offset* valid-i?* :env* valid-i?* ))
(stest/instrument `sfplay)

(defn midiin
  {:arglists '()}
  []
  (let [out-types-quoted '[ControlSignal ControlSignal ControlSignal ControlSignal]
        out-types [ControlSignal ControlSignal ControlSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "midiin"
                      []
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))


(defn midglobal
  {:arglists '([Ssource & instrnum1* instrnum2* instrnum3* instrnum4* instrnum5* instrnum6* instrnum7* instrnum8* instrnum9* instrnum10* instrnum11* instrnum12* instrnum13* instrnum14* instrnum15* instrnum16*])}
  [source & [ nstrnum1* nstrnum2* nstrnum3* nstrnum4* nstrnum5* nstrnum6* nstrnum7* nstrnum8* nstrnum9* nstrnum10* nstrnum11* nstrnum12* nstrnum13* nstrnum14* nstrnum15* nstrnum16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "midglobal"
                      [source nstrnum1* nstrnum2* nstrnum3* nstrnum4* nstrnum5* nstrnum6* nstrnum7* nstrnum8* nstrnum9* nstrnum10* nstrnum11* nstrnum12* nstrnum13* nstrnum14* nstrnum15* nstrnum16*]
                      *global*)]
    (new out-types ast)))

(s/fdef midglobal
  :args (s/cat :source valid-S? :nstrnum1* valid-i?* :nstrnum2* valid-i?* :nstrnum3* valid-i?* :nstrnum4* valid-i?* :nstrnum5* valid-i?* :nstrnum6* valid-i?* :nstrnum7* valid-i?* :nstrnum8* valid-i?* :nstrnum9* valid-i?* :nstrnum10* valid-i?* :nstrnum11* valid-i?* :nstrnum12* valid-i?* :nstrnum13* valid-i?* :nstrnum14* valid-i?* :nstrnum15* valid-i?* :nstrnum16* valid-i?* ))
(stest/instrument `midglobal)

(defn tabmorpha
  {:arglists '([aindex aweightpoint atabnum3 atabnum4 & ifn1* ifn2* ifn3* ifn4* ifnN5* ifnN6* ifnN7* ifnN8* ifnN9* ifnN10* ifnN11* ifnN12* ifnN13* ifnN14* ifnN15* ifnN16*])}
  [index weightpoint tabnum3 tabnum4 & [ fn1* fn2* fn3* fn4* fnN5* fnN6* fnN7* fnN8* fnN9* fnN10* fnN11* fnN12* fnN13* fnN14* fnN15* fnN16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tabmorpha"
                      [index weightpoint tabnum3 tabnum4 fn1* fn2* fn3* fn4* fnN5* fnN6* fnN7* fnN8* fnN9* fnN10* fnN11* fnN12* fnN13* fnN14* fnN15* fnN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef tabmorpha
  :args (s/cat :index valid-ar? :weightpoint valid-ar? :tabnum3 valid-ar? :tabnum4 valid-ar? :fn1* valid-i?* :fn2* valid-i?* :fn3* valid-i?* :fn4* valid-i?* :fnN5* valid-i?* :fnN6* valid-i?* :fnN7* valid-i?* :fnN8* valid-i?* :fnN9* valid-i?* :fnN10* valid-i?* :fnN11* valid-i?* :fnN12* valid-i?* :fnN13* valid-i?* :fnN14* valid-i?* :fnN15* valid-i?* :fnN16* valid-i?* ))
(stest/instrument `tabmorpha)

(defn tabmorpha:a
  {:arglists '([aindex aweightpoint atabnum3 atabnum4 & ifn1* ifn2* ifn3* ifn4* ifnN5* ifnN6* ifnN7* ifnN8* ifnN9* ifnN10* ifnN11* ifnN12* ifnN13* ifnN14* ifnN15* ifnN16*])}
  [index weightpoint tabnum3 tabnum4 & [ fn1* fn2* fn3* fn4* fnN5* fnN6* fnN7* fnN8* fnN9* fnN10* fnN11* fnN12* fnN13* fnN14* fnN15* fnN16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tabmorpha"
                      [index weightpoint tabnum3 tabnum4 fn1* fn2* fn3* fn4* fnN5* fnN6* fnN7* fnN8* fnN9* fnN10* fnN11* fnN12* fnN13* fnN14* fnN15* fnN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef tabmorpha:a
  :args (s/cat :index valid-ar? :weightpoint valid-ar? :tabnum3 valid-ar? :tabnum4 valid-ar? :fn1* valid-i?* :fn2* valid-i?* :fn3* valid-i?* :fn4* valid-i?* :fnN5* valid-i?* :fnN6* valid-i?* :fnN7* valid-i?* :fnN8* valid-i?* :fnN9* valid-i?* :fnN10* valid-i?* :fnN11* valid-i?* :fnN12* valid-i?* :fnN13* valid-i?* :fnN14* valid-i?* :fnN15* valid-i?* :fnN16* valid-i?* ))
(stest/instrument `tabmorpha:a)

(defn ptable3
  {:arglists '([xindex itable & ixmode* ixoff* iwrap*] [iindex itable & ixmode* ixoff* iwrap*] [xindex itable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "ptable3"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef ptable3
  :args (s/alt
         :xiiii (s/cat :index valid-x? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* )
         ))
(stest/instrument `ptable3)

(defn ptable3:a
  {:arglists '([xindex itable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "ptable3"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef ptable3:a
  :args (s/cat :index valid-x? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* ))
(stest/instrument `ptable3:a)

(defn ptable3:i
  {:arglists '([iindex itable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ptable3"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef ptable3:i
  :args (s/cat :index valid-i? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* ))
(stest/instrument `ptable3:i)

(defn ptable3:k
  {:arglists '([xindex itable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "ptable3"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef ptable3:k
  :args (s/cat :index valid-x? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* ))
(stest/instrument `ptable3:k)

(defn sc_lagud
  {:arglists '([ain klagup klagdown & ilagdown*] [kin klagup klagdown & ilagdown*])}
  [in lagup lagdown & [ lagdown* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sc_lagud"
                      [in lagup lagdown lagdown*]
                      *global*)]
    (new out-types ast)))

(s/fdef sc_lagud
  :args (s/alt
         :akki (s/cat :in valid-ar? :lagup valid-kr? :lagdown valid-kr? :lagdown* valid-i?* )
         ))
(stest/instrument `sc_lagud)

(defn sc_lagud:a
  {:arglists '([ain klagup klagdown & ilagdown*])}
  [in lagup lagdown & [ lagdown* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sc_lagud"
                      [in lagup lagdown lagdown*]
                      *global*)]
    (new out-types ast)))

(s/fdef sc_lagud:a
  :args (s/cat :in valid-ar? :lagup valid-kr? :lagdown valid-kr? :lagdown* valid-i?* ))
(stest/instrument `sc_lagud:a)

(defn sc_lagud:k
  {:arglists '([kin klagup klagdown & ilagdown*])}
  [in lagup lagdown & [ lagdown* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "sc_lagud"
                      [in lagup lagdown lagdown*]
                      *global*)]
    (new out-types ast)))

(s/fdef sc_lagud:k
  :args (s/cat :in valid-kr? :lagup valid-kr? :lagdown valid-kr? :lagdown* valid-i?* ))
(stest/instrument `sc_lagud:k)

(defn repluck
  {:arglists '([iplk kamp icps kpick krefl axcite])}
  [plk amp cps pick refl xcite]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "repluck"
                      [plk amp cps pick refl xcite]
                      *global*)]
    (new out-types ast)))

(s/fdef repluck
  :args (s/cat :plk valid-i? :amp valid-kr? :cps valid-i? :pick valid-kr? :refl valid-kr? :xcite valid-ar? ))
(stest/instrument `repluck)

(defn repluck:a
  {:arglists '([iplk kamp icps kpick krefl axcite])}
  [plk amp cps pick refl xcite]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "repluck"
                      [plk amp cps pick refl xcite]
                      *global*)]
    (new out-types ast)))

(s/fdef repluck:a
  :args (s/cat :plk valid-i? :amp valid-kr? :cps valid-i? :pick valid-kr? :refl valid-kr? :xcite valid-ar? ))
(stest/instrument `repluck:a)

(defn ftfree
  {:arglists '([ifno iwhen])}
  [fno when]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "ftfree"
                      [fno when]
                      *global*)]
    (new out-types ast)))

(s/fdef ftfree
  :args (s/cat :fno valid-i? :when valid-i? ))
(stest/instrument `ftfree)

(defn ins
  {:arglists '()}
  []
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "ins"
                      []
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))


(defn sekere
  {:arglists '([iamp idettack & inum* idamp* imaxshake*])}
  [amp dettack & [ num* damp* maxshake* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sekere"
                      [amp dettack num* damp* maxshake*]
                      *global*)]
    (new out-types ast)))

(s/fdef sekere
  :args (s/cat :amp valid-i? :dettack valid-i? :num* valid-i?* :damp* valid-i?* :maxshake* valid-i?* ))
(stest/instrument `sekere)

(defn sekere:a
  {:arglists '([iamp idettack & inum* idamp* imaxshake*])}
  [amp dettack & [ num* damp* maxshake* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sekere"
                      [amp dettack num* damp* maxshake*]
                      *global*)]
    (new out-types ast)))

(s/fdef sekere:a
  :args (s/cat :amp valid-i? :dettack valid-i? :num* valid-i?* :damp* valid-i?* :maxshake* valid-i?* ))
(stest/instrument `sekere:a)

(defn pvsbandr
  {:arglists '([fsigin xlowcut xlowfull xhighfull xhighcut & ktype*])}
  [sigin lowcut lowfull highfull highcut & [ type* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsbandr"
                      [sigin lowcut lowfull highfull highcut type*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsbandr
  :args (s/cat :sigin valid-f? :lowcut valid-x? :lowfull valid-x? :highfull valid-x? :highcut valid-x? :type* valid-kr?* ))
(stest/instrument `pvsbandr)

(defn pvsbandr:f
  {:arglists '([fsigin xlowcut xlowfull xhighfull xhighcut & ktype*])}
  [sigin lowcut lowfull highfull highcut & [ type* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsbandr"
                      [sigin lowcut lowfull highfull highcut type*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsbandr:f
  :args (s/cat :sigin valid-f? :lowcut valid-x? :lowfull valid-x? :highfull valid-x? :highcut valid-x? :type* valid-kr?* ))
(stest/instrument `pvsbandr:f)

(defn vco
  {:arglists '([xamp xcps iwave & kpw* itable* imaxd* ileak* inyx* iphase* iskip*])}
  [amp cps wave & [ pw* table* maxd* leak* nyx* phase* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "vco"
                      [amp cps wave pw* table* maxd* leak* nyx* phase* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef vco
  :args (s/cat :amp valid-x? :cps valid-x? :wave valid-i? :pw* valid-kr?* :table* valid-i?* :maxd* valid-i?* :leak* valid-i?* :nyx* valid-i?* :phase* valid-i?* :skip* valid-i?* ))
(stest/instrument `vco)

(defn vco:a
  {:arglists '([xamp xcps iwave & kpw* itable* imaxd* ileak* inyx* iphase* iskip*])}
  [amp cps wave & [ pw* table* maxd* leak* nyx* phase* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "vco"
                      [amp cps wave pw* table* maxd* leak* nyx* phase* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef vco:a
  :args (s/cat :amp valid-x? :cps valid-x? :wave valid-i? :pw* valid-kr?* :table* valid-i?* :maxd* valid-i?* :leak* valid-i?* :nyx* valid-i?* :phase* valid-i?* :skip* valid-i?* ))
(stest/instrument `vco:a)

(defn tablefilter
  {:arglists '([kouttable kintatble kmode kparam])}
  [outtable intatble mode param]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "tablefilter"
                      [outtable intatble mode param]
                      *global*)]
    (new out-types ast)))

(s/fdef tablefilter
  :args (s/cat :outtable valid-kr? :intatble valid-kr? :mode valid-kr? :param valid-kr? ))
(stest/instrument `tablefilter)

(defn tablefilter:k
  {:arglists '([kouttable kintatble kmode kparam])}
  [outtable intatble mode param]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "tablefilter"
                      [outtable intatble mode param]
                      *global*)]
    (new out-types ast)))

(s/fdef tablefilter:k
  :args (s/cat :outtable valid-kr? :intatble valid-kr? :mode valid-kr? :param valid-kr? ))
(stest/instrument `tablefilter:k)

(defn grain
  {:arglists '([xamp xpitch xdens kampoff kpitchoff kgdur igfn iwfn imgdur & igrnd*])}
  [amp pitch dens ampoff pitchoff gdur gfn wfn mgdur & [ grnd* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "grain"
                      [amp pitch dens ampoff pitchoff gdur gfn wfn mgdur grnd*]
                      *global*)]
    (new out-types ast)))

(s/fdef grain
  :args (s/cat :amp valid-x? :pitch valid-x? :dens valid-x? :ampoff valid-kr? :pitchoff valid-kr? :gdur valid-kr? :gfn valid-i? :wfn valid-i? :mgdur valid-i? :grnd* valid-i?* ))
(stest/instrument `grain)

(defn grain:a
  {:arglists '([xamp xpitch xdens kampoff kpitchoff kgdur igfn iwfn imgdur & igrnd*])}
  [amp pitch dens ampoff pitchoff gdur gfn wfn mgdur & [ grnd* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "grain"
                      [amp pitch dens ampoff pitchoff gdur gfn wfn mgdur grnd*]
                      *global*)]
    (new out-types ast)))

(s/fdef grain:a
  :args (s/cat :amp valid-x? :pitch valid-x? :dens valid-x? :ampoff valid-kr? :pitchoff valid-kr? :gdur valid-kr? :gfn valid-i? :wfn valid-i? :mgdur valid-i? :grnd* valid-i?* ))
(stest/instrument `grain:a)

(defn ctrl21
  {:arglists '([ichan ictlno2 ictlno3 ictlno4 imin imax & itable*] [ichan ictlno2 ictlno3 ictlno4 kmin kmax & itable*])}
  [chan ctlno2 ctlno3 ctlno4 min max & [ table* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ctrl21"
                      [chan ctlno2 ctlno3 ctlno4 min max table*]
                      *global*)]
    (new out-types ast)))

(s/fdef ctrl21
  :args (s/alt
         :iiiiiii (s/cat :chan valid-i? :ctlno2 valid-i? :ctlno3 valid-i? :ctlno4 valid-i? :min valid-i? :max valid-i? :table* valid-i?* )
         ))
(stest/instrument `ctrl21)

(defn ctrl21:i
  {:arglists '([ichan ictlno2 ictlno3 ictlno4 imin imax & itable*])}
  [chan ctlno2 ctlno3 ctlno4 min max & [ table* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ctrl21"
                      [chan ctlno2 ctlno3 ctlno4 min max table*]
                      *global*)]
    (new out-types ast)))

(s/fdef ctrl21:i
  :args (s/cat :chan valid-i? :ctlno2 valid-i? :ctlno3 valid-i? :ctlno4 valid-i? :min valid-i? :max valid-i? :table* valid-i?* ))
(stest/instrument `ctrl21:i)

(defn ctrl21:k
  {:arglists '([ichan ictlno2 ictlno3 ictlno4 kmin kmax & itable*])}
  [chan ctlno2 ctlno3 ctlno4 min max & [ table* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "ctrl21"
                      [chan ctlno2 ctlno3 ctlno4 min max table*]
                      *global*)]
    (new out-types ast)))

(s/fdef ctrl21:k
  :args (s/cat :chan valid-i? :ctlno2 valid-i? :ctlno3 valid-i? :ctlno4 valid-i? :min valid-kr? :max valid-kr? :table* valid-i?* ))
(stest/instrument `ctrl21:k)

(defn schedkwhennamed
  {:arglists '([ktrigger kmintim kmaxnum Sname kwhen & kdur1* kp2* kp3* kp4* kp5* kp6* kp7* kp8* kp9* kp10* kp11* kp12* kp13* kp14* kp15* kp16*] [ktrigger kmintim kmaxnum kname kwhen & kdur1* kp2* kp3* kp4* kp5* kp6* kp7* kp8* kp9* kp10* kp11* kp12* kp13* kp14* kp15* kp16*])}
  [trigger mintim maxnum name when & [ dur1* p2* p3* p4* p5* p6* p7* p8* p9* p10* p11* p12* p13* p14* p15* p16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "schedkwhennamed"
                      [trigger mintim maxnum name when dur1* p2* p3* p4* p5* p6* p7* p8* p9* p10* p11* p12* p13* p14* p15* p16*]
                      *global*)]
    (new out-types ast)))

(s/fdef schedkwhennamed
  :args (s/alt
         :kkkSkkkkkkkkkkkkkkkkk (s/cat :trigger valid-kr? :mintim valid-kr? :maxnum valid-kr? :name valid-S? :when valid-kr? :dur1* valid-kr?* :p2* valid-kr?* :p3* valid-kr?* :p4* valid-kr?* :p5* valid-kr?* :p6* valid-kr?* :p7* valid-kr?* :p8* valid-kr?* :p9* valid-kr?* :p10* valid-kr?* :p11* valid-kr?* :p12* valid-kr?* :p13* valid-kr?* :p14* valid-kr?* :p15* valid-kr?* :p16* valid-kr?* )
         ))
(stest/instrument `schedkwhennamed)

(defn pvinterp
  {:arglists '([ktimpnt kfmod Sfile kfreqscale4 kfreqscale5 kampscale6 kampscale7 kfreqinterp kampinterp] [ktimpnt kfmod ifile kfreqscale4 kfreqscale5 kampscale6 kampscale7 kfreqinterp kampinterp])}
  [timpnt fmod file freqscale4 freqscale5 ampscale6 ampscale7 freqinterp ampinterp]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pvinterp"
                      [timpnt fmod file freqscale4 freqscale5 ampscale6 ampscale7 freqinterp ampinterp]
                      *global*)]
    (new out-types ast)))

(s/fdef pvinterp
  :args (s/alt
         :kkSkkkkkk (s/cat :timpnt valid-kr? :fmod valid-kr? :file valid-S? :freqscale4 valid-kr? :freqscale5 valid-kr? :ampscale6 valid-kr? :ampscale7 valid-kr? :freqinterp valid-kr? :ampinterp valid-kr? )
         ))
(stest/instrument `pvinterp)

(defn pvinterp:a
  {:arglists '([ktimpnt kfmod Sfile kfreqscale4 kfreqscale5 kampscale6 kampscale7 kfreqinterp kampinterp] [ktimpnt kfmod ifile kfreqscale4 kfreqscale5 kampscale6 kampscale7 kfreqinterp kampinterp])}
  [timpnt fmod file freqscale4 freqscale5 ampscale6 ampscale7 freqinterp ampinterp]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pvinterp"
                      [timpnt fmod file freqscale4 freqscale5 ampscale6 ampscale7 freqinterp ampinterp]
                      *global*)]
    (new out-types ast)))

(s/fdef pvinterp:a
  :args (s/alt
         :kkSkkkkkk (s/cat :timpnt valid-kr? :fmod valid-kr? :file valid-S? :freqscale4 valid-kr? :freqscale5 valid-kr? :ampscale6 valid-kr? :ampscale7 valid-kr? :freqinterp valid-kr? :ampinterp valid-kr? )
         ))
(stest/instrument `pvinterp:a)

(defn pvsftw
  {:arglists '([fsrc ifna & ifnf*])}
  [src fna & [ fnf* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "pvsftw"
                      [src fna fnf*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsftw
  :args (s/cat :src valid-f? :fna valid-i? :fnf* valid-i?* ))
(stest/instrument `pvsftw)

(defn pvsftw:k
  {:arglists '([fsrc ifna & ifnf*])}
  [src fna & [ fnf* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "pvsftw"
                      [src fna fnf*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsftw:k
  :args (s/cat :src valid-f? :fna valid-i? :fnf* valid-i?* ))
(stest/instrument `pvsftw:k)

(defn pan2
  {:arglists '([asig xp & imode*])}
  [sig p & [ mode* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "pan2"
                      [sig p mode*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef pan2
  :args (s/cat :sig valid-ar? :p valid-x? :mode* valid-i?* ))
(stest/instrument `pan2)

(defn olabuffer
  {:arglists '([kinArr ioverlap])}
  [in overlap]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "olabuffer"
                      [in overlap]
                      *global*)]
    (new out-types ast)))

(s/fdef olabuffer
  :args (s/cat :in valid-kArr? :overlap valid-i? ))
(stest/instrument `olabuffer)

(defn olabuffer:a
  {:arglists '([kinArr ioverlap])}
  [in overlap]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "olabuffer"
                      [in overlap]
                      *global*)]
    (new out-types ast)))

(s/fdef olabuffer:a
  :args (s/cat :in valid-kArr? :overlap valid-i? ))
(stest/instrument `olabuffer:a)

(defn lposcilsa
  {:arglists '([aamp kfreqratio kloop kend ift & iphase*])}
  [amp freqratio loop end ft & [ phase* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "lposcilsa"
                      [amp freqratio loop end ft phase*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef lposcilsa
  :args (s/cat :amp valid-ar? :freqratio valid-kr? :loop valid-kr? :end valid-kr? :ft valid-i? :phase* valid-i?* ))
(stest/instrument `lposcilsa)

(defn ptablei
  {:arglists '([xindex itable & ixmode* ixoff* iwrap*] [iindex itable & ixmode* ixoff* iwrap*] [xindex itable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "ptablei"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef ptablei
  :args (s/alt
         :xiiii (s/cat :index valid-x? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* )
         ))
(stest/instrument `ptablei)

(defn ptablei:a
  {:arglists '([xindex itable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "ptablei"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef ptablei:a
  :args (s/cat :index valid-x? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* ))
(stest/instrument `ptablei:a)

(defn ptablei:i
  {:arglists '([iindex itable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ptablei"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef ptablei:i
  :args (s/cat :index valid-i? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* ))
(stest/instrument `ptablei:i)

(defn ptablei:k
  {:arglists '([xindex itable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "ptablei"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef ptablei:k
  :args (s/cat :index valid-x? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* ))
(stest/instrument `ptablei:k)

(defn imagesetpixel
  {:arglists '([iimagenum xx xy xred xgreen xblue])}
  [imagenum x y red green blue]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "imagesetpixel"
                      [imagenum x y red green blue]
                      *global*)]
    (new out-types ast)))

(s/fdef imagesetpixel
  :args (s/cat :imagenum valid-i? :x valid-x? :y valid-x? :red valid-x? :green valid-x? :blue valid-x? ))
(stest/instrument `imagesetpixel)

(defn pconvolve
  {:arglists '([ain Sfilcod & ipartitionsize* ichannel*] [ain ifilcod & ipartitionsize* ichannel*])}
  [in filcod & [ partitionsize* channel* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "pconvolve"
                      [in filcod partitionsize* channel*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef pconvolve
  :args (s/alt
         :aSii (s/cat :in valid-ar? :filcod valid-S? :partitionsize* valid-i?* :channel* valid-i?* )
         ))
(stest/instrument `pconvolve)

(defn locsig
  {:arglists '([asig kdegree kdistance kreverbsend])}
  [sig degree distance reverbsend]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "locsig"
                      [sig degree distance reverbsend]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef locsig
  :args (s/cat :sig valid-ar? :degree valid-kr? :distance valid-kr? :reverbsend valid-kr? ))
(stest/instrument `locsig)

(defn pvsfilter
  {:arglists '([fsigin fsigfil fdepth & igain*] [fsigin fsigfil xdepth & igain*] [fsigin fsigfil xdepth & igain*])}
  [sigin sigfil depth & [ gain* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsfilter"
                      [sigin sigfil depth gain*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsfilter
  :args (s/alt
         :fffi (s/cat :sigin valid-f? :sigfil valid-f? :depth valid-f? :gain* valid-i?* )
         ))
(stest/instrument `pvsfilter)

(defn pvsfilter:f
  {:arglists '([fsigin fsigfil fdepth & igain*] [fsigin fsigfil xdepth & igain*] [fsigin fsigfil xdepth & igain*])}
  [sigin sigfil depth & [ gain* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsfilter"
                      [sigin sigfil depth gain*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsfilter:f
  :args (s/alt
         :fffi (s/cat :sigin valid-f? :sigfil valid-f? :depth valid-f? :gain* valid-i?* )
         ))
(stest/instrument `pvsfilter:f)

(defn chnparams
  {:arglists '([Sname])}
  [name]
  (let [out-types-quoted '[Variable Variable Variable Variable Variable Variable]
        out-types [Variable Variable Variable Variable Variable Variable]
        ast (ast-node out-types-quoted
                      "chnparams"
                      [name]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef chnparams
  :args (s/cat :name valid-S? ))
(stest/instrument `chnparams)

(defn cell
  {:arglists '([ktrig kreinit ioutFunc initStateFunc iRuleFunc ielements])}
  [trig reinit outFunc nitStateFunc RuleFunc elements]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "cell"
                      [trig reinit outFunc nitStateFunc RuleFunc elements]
                      *global*)]
    (new out-types ast)))

(s/fdef cell
  :args (s/cat :trig valid-kr? :reinit valid-kr? :outFunc valid-i? :nitStateFunc valid-i? :RuleFunc valid-i? :elements valid-i? ))
(stest/instrument `cell)

(defn cpstun
  {:arglists '([ktrig kindex ktable])}
  [trig index table]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "cpstun"
                      [trig index table]
                      *global*)]
    (new out-types ast)))

(s/fdef cpstun
  :args (s/cat :trig valid-kr? :index valid-kr? :table valid-kr? ))
(stest/instrument `cpstun)

(defn cpstun:k
  {:arglists '([ktrig kindex ktable])}
  [trig index table]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "cpstun"
                      [trig index table]
                      *global*)]
    (new out-types ast)))

(s/fdef cpstun:k
  :args (s/cat :trig valid-kr? :index valid-kr? :table valid-kr? ))
(stest/instrument `cpstun:k)

(defn cossegb
  {:arglists '([ia itim2 & ib1* itim2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*] [ia itim2 & ib1* itim2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a tim2 & [ b1* tim2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "cossegb"
                      [a tim2 b1* tim2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef cossegb
  :args (s/alt
         :iiiiiiiiiiiiiiiiii (s/cat :a valid-i? :tim2 valid-i? :b1* valid-i?* :tim2* valid-i?* :c3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* )
         ))
(stest/instrument `cossegb)

(defn cossegb:a
  {:arglists '([ia itim2 & ib1* itim2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a tim2 & [ b1* tim2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "cossegb"
                      [a tim2 b1* tim2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef cossegb:a
  :args (s/cat :a valid-i? :tim2 valid-i? :b1* valid-i?* :tim2* valid-i?* :c3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* ))
(stest/instrument `cossegb:a)

(defn cossegb:k
  {:arglists '([ia itim2 & ib1* itim2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a tim2 & [ b1* tim2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "cossegb"
                      [a tim2 b1* tim2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef cossegb:k
  :args (s/cat :a valid-i? :tim2 valid-i? :b1* valid-i?* :tim2* valid-i?* :c3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* ))
(stest/instrument `cossegb:k)

(defn genarray
  {:arglists '([istart iens & inc*] [kstart kens & inc*])}
  [start ens & [ nc* ]]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "genarray"
                      [start ens nc*]
                      *global*)]
    (new out-types ast)))

(s/fdef genarray
  :args (s/alt
         :iii (s/cat :start valid-i? :ens valid-i? :nc* valid-i?* )
         ))
(stest/instrument `genarray)

(defn genarray:iArr
  {:arglists '([istart iens & inc*])}
  [start ens & [ nc* ]]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "genarray"
                      [start ens nc*]
                      *global*)]
    (new out-types ast)))

(s/fdef genarray:iArr
  :args (s/cat :start valid-i? :ens valid-i? :nc* valid-i?* ))
(stest/instrument `genarray:iArr)

(defn genarray:kArr
  {:arglists '([kstart kens & inc*])}
  [start ens & [ nc* ]]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "genarray"
                      [start ens nc*]
                      *global*)]
    (new out-types ast)))

(s/fdef genarray:kArr
  :args (s/cat :start valid-kr? :ens valid-kr? :nc* valid-i?* ))
(stest/instrument `genarray:kArr)

(defn MixerSetLevel
  {:arglists '([isend ibuss kgain])}
  [send buss gain]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "MixerSetLevel"
                      [send buss gain]
                      *global*)]
    (new out-types ast)))

(s/fdef MixerSetLevel
  :args (s/cat :send valid-i? :buss valid-i? :gain valid-kr? ))
(stest/instrument `MixerSetLevel)

(defn tableimix
  {:arglists '([idft idoff ilen is1ft is1off is1g is2ft is2off is2g])}
  [dft doff len s1ft s1off s1g s2ft s2off s2g]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "tableimix"
                      [dft doff len s1ft s1off s1g s2ft s2off s2g]
                      *global*)]
    (new out-types ast)))

(s/fdef tableimix
  :args (s/cat :dft valid-i? :doff valid-i? :len valid-i? :s1ft valid-i? :s1off valid-i? :s1g valid-i? :s2ft valid-i? :s2off valid-i? :s2g valid-i? ))
(stest/instrument `tableimix)

(defn trshift
  {:arglists '([fin & kpshift1* kgain2* kgain3* kgain4* kgain5* kgain6* kgain7* kgain8* kgain9* kgain10* kgain11* kgain12* kgain13* kgain14* kgain15* kgain16*])}
  [in & [ pshift1* gain2* gain3* gain4* gain5* gain6* gain7* gain8* gain9* gain10* gain11* gain12* gain13* gain14* gain15* gain16* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "trshift"
                      [in pshift1* gain2* gain3* gain4* gain5* gain6* gain7* gain8* gain9* gain10* gain11* gain12* gain13* gain14* gain15* gain16*]
                      *global*)]
    (new out-types ast)))

(s/fdef trshift
  :args (s/cat :in valid-f? :pshift1* valid-kr?* :gain2* valid-kr?* :gain3* valid-kr?* :gain4* valid-kr?* :gain5* valid-kr?* :gain6* valid-kr?* :gain7* valid-kr?* :gain8* valid-kr?* :gain9* valid-kr?* :gain10* valid-kr?* :gain11* valid-kr?* :gain12* valid-kr?* :gain13* valid-kr?* :gain14* valid-kr?* :gain15* valid-kr?* :gain16* valid-kr?* ))
(stest/instrument `trshift)

(defn trshift:f
  {:arglists '([fin & kpshift1* kgain2* kgain3* kgain4* kgain5* kgain6* kgain7* kgain8* kgain9* kgain10* kgain11* kgain12* kgain13* kgain14* kgain15* kgain16*])}
  [in & [ pshift1* gain2* gain3* gain4* gain5* gain6* gain7* gain8* gain9* gain10* gain11* gain12* gain13* gain14* gain15* gain16* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "trshift"
                      [in pshift1* gain2* gain3* gain4* gain5* gain6* gain7* gain8* gain9* gain10* gain11* gain12* gain13* gain14* gain15* gain16*]
                      *global*)]
    (new out-types ast)))

(s/fdef trshift:f
  :args (s/cat :in valid-f? :pshift1* valid-kr?* :gain2* valid-kr?* :gain3* valid-kr?* :gain4* valid-kr?* :gain5* valid-kr?* :gain6* valid-kr?* :gain7* valid-kr?* :gain8* valid-kr?* :gain9* valid-kr?* :gain10* valid-kr?* :gain11* valid-kr?* :gain12* valid-kr?* :gain13* valid-kr?* :gain14* valid-kr?* :gain15* valid-kr?* :gain16* valid-kr?* ))
(stest/instrument `trshift:f)

(defn chuap
  {:arglists '([kL kR2 kC3 kG kGa kGb kE kC8 iI9 iV10 iV11 ktime_step])}
  [L R2 C3 G Ga Gb E C8 I9 V10 V11 time_step]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "chuap"
                      [L R2 C3 G Ga Gb E C8 I9 V10 V11 time_step]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef chuap
  :args (s/cat :L valid-kr? :R2 valid-kr? :C3 valid-kr? :G valid-kr? :Ga valid-kr? :Gb valid-kr? :E valid-kr? :C8 valid-kr? :I9 valid-i? :V10 valid-i? :V11 valid-i? :time_step valid-kr? ))
(stest/instrument `chuap)

(defn platerev
  {:arglists '([itabexcite itabouts kbndry iaspect istiff idecay iloss & aexcite1* aexcite2* aexcite3* aexcite4* aexcite5* aexcite6* aexcite7* aexcite8* aexcite9* aexcite10* aexcite11* aexcite12* aexcite13* aexcite14* aexcite15* aexcite16* aexcite17* aexcite18* aexcite19* aexcite20* aexcite21* aexcite22* aexcite23* aexcite24* aexcite25* aexcite26* aexcite27* aexcite28* aexcite29* aexcite30* aexcite31* aexcite32*])}
  [tabexcite tabouts bndry aspect stiff decay loss & [ excite1* excite2* excite3* excite4* excite5* excite6* excite7* excite8* excite9* excite10* excite11* excite12* excite13* excite14* excite15* excite16* excite17* excite18* excite19* excite20* excite21* excite22* excite23* excite24* excite25* excite26* excite27* excite28* excite29* excite30* excite31* excite32* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "platerev"
                      [tabexcite tabouts bndry aspect stiff decay loss excite1* excite2* excite3* excite4* excite5* excite6* excite7* excite8* excite9* excite10* excite11* excite12* excite13* excite14* excite15* excite16* excite17* excite18* excite19* excite20* excite21* excite22* excite23* excite24* excite25* excite26* excite27* excite28* excite29* excite30* excite31* excite32*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef platerev
  :args (s/cat :tabexcite valid-i? :tabouts valid-i? :bndry valid-kr? :aspect valid-i? :stiff valid-i? :decay valid-i? :loss valid-i? :excite1* valid-ar?* :excite2* valid-ar?* :excite3* valid-ar?* :excite4* valid-ar?* :excite5* valid-ar?* :excite6* valid-ar?* :excite7* valid-ar?* :excite8* valid-ar?* :excite9* valid-ar?* :excite10* valid-ar?* :excite11* valid-ar?* :excite12* valid-ar?* :excite13* valid-ar?* :excite14* valid-ar?* :excite15* valid-ar?* :excite16* valid-ar?* :excite17* valid-ar?* :excite18* valid-ar?* :excite19* valid-ar?* :excite20* valid-ar?* :excite21* valid-ar?* :excite22* valid-ar?* :excite23* valid-ar?* :excite24* valid-ar?* :excite25* valid-ar?* :excite26* valid-ar?* :excite27* valid-ar?* :excite28* valid-ar?* :excite29* valid-ar?* :excite30* valid-ar?* :excite31* valid-ar?* :excite32* valid-ar?* ))
(stest/instrument `platerev)

(defn noteon
  {:arglists '([ichn inum ivel])}
  [chn num vel]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "noteon"
                      [chn num vel]
                      *global*)]
    (new out-types ast)))

(s/fdef noteon
  :args (s/cat :chn valid-i? :num valid-i? :vel valid-i? ))
(stest/instrument `noteon)

(defn fprintks
  {:arglists '([Sfilename Sstring & xval1* xval2* xval3* xval4* xval5* xval6* xval7* xval8* xval9* xval10* xval11* xval12* xval13* xval14* xval15* xval16*] [ifilename Sstring & xval1* xval2* xval3* xval4* xval5* xval6* xval7* xval8* xval9* xval10* xval11* xval12* xval13* xval14* xval15* xval16*] [Sfilename Sstring & xval1* xval2* xval3* xval4* xval5* xval6* xval7* xval8* xval9* xval10* xval11* xval12* xval13* xval14* xval15* xval16*] [ifilename Sstring & xval1* xval2* xval3* xval4* xval5* xval6* xval7* xval8* xval9* xval10* xval11* xval12* xval13* xval14* xval15* xval16*])}
  [filename string & [ val1* val2* val3* val4* val5* val6* val7* val8* val9* val10* val11* val12* val13* val14* val15* val16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "fprintks"
                      [filename string val1* val2* val3* val4* val5* val6* val7* val8* val9* val10* val11* val12* val13* val14* val15* val16*]
                      *global*)]
    (new out-types ast)))

(s/fdef fprintks
  :args (s/alt
         :SSxxxxxxxxxxxxxxxx (s/cat :filename valid-S? :string valid-S? :val1* valid-x?* :val2* valid-x?* :val3* valid-x?* :val4* valid-x?* :val5* valid-x?* :val6* valid-x?* :val7* valid-x?* :val8* valid-x?* :val9* valid-x?* :val10* valid-x?* :val11* valid-x?* :val12* valid-x?* :val13* valid-x?* :val14* valid-x?* :val15* valid-x?* :val16* valid-x?* )
         ))
(stest/instrument `fprintks)

(defn envlpx
  {:arglists '([aamp irise idur idec itable iatss iatdec & ixmod*] [kamp irise idur idec itable iatss iatdec & ixmod*] [kamp irise idur idec itable iatss iatdec & ixmod*])}
  [amp rise dur dec table atss atdec & [ xmod* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "envlpx"
                      [amp rise dur dec table atss atdec xmod*]
                      *global*)]
    (new out-types ast)))

(s/fdef envlpx
  :args (s/alt
         :aiiiiiii (s/cat :amp valid-ar? :rise valid-i? :dur valid-i? :dec valid-i? :table valid-i? :atss valid-i? :atdec valid-i? :xmod* valid-i?* )
         ))
(stest/instrument `envlpx)

(defn envlpx:a
  {:arglists '([aamp irise idur idec itable iatss iatdec & ixmod*] [kamp irise idur idec itable iatss iatdec & ixmod*])}
  [amp rise dur dec table atss atdec & [ xmod* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "envlpx"
                      [amp rise dur dec table atss atdec xmod*]
                      *global*)]
    (new out-types ast)))

(s/fdef envlpx:a
  :args (s/alt
         :aiiiiiii (s/cat :amp valid-ar? :rise valid-i? :dur valid-i? :dec valid-i? :table valid-i? :atss valid-i? :atdec valid-i? :xmod* valid-i?* )
         ))
(stest/instrument `envlpx:a)

(defn envlpx:k
  {:arglists '([kamp irise idur idec itable iatss iatdec & ixmod*])}
  [amp rise dur dec table atss atdec & [ xmod* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "envlpx"
                      [amp rise dur dec table atss atdec xmod*]
                      *global*)]
    (new out-types ast)))

(s/fdef envlpx:k
  :args (s/cat :amp valid-kr? :rise valid-i? :dur valid-i? :dec valid-i? :table valid-i? :atss valid-i? :atdec valid-i? :xmod* valid-i?* ))
(stest/instrument `envlpx:k)

(defn follow2
  {:arglists '([asig katt krel])}
  [sig att rel]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "follow2"
                      [sig att rel]
                      *global*)]
    (new out-types ast)))

(s/fdef follow2
  :args (s/cat :sig valid-ar? :att valid-kr? :rel valid-kr? ))
(stest/instrument `follow2)

(defn follow2:a
  {:arglists '([asig katt krel])}
  [sig att rel]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "follow2"
                      [sig att rel]
                      *global*)]
    (new out-types ast)))

(s/fdef follow2:a
  :args (s/cat :sig valid-ar? :att valid-kr? :rel valid-kr? ))
(stest/instrument `follow2:a)

(defn vdelayxwq
  {:arglists '([ain1 ain2 ain3 ain4 adl imd iws & ist*])}
  [in1 in2 in3 in4 dl md ws & [ st* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "vdelayxwq"
                      [in1 in2 in3 in4 dl md ws st*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef vdelayxwq
  :args (s/cat :in1 valid-ar? :in2 valid-ar? :in3 valid-ar? :in4 valid-ar? :dl valid-ar? :md valid-i? :ws valid-i? :st* valid-i?* ))
(stest/instrument `vdelayxwq)

(defn pcauchy
  {:arglists '([kalpha] [kalpha] [kalpha])}
  [alpha]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pcauchy"
                      [alpha]
                      *global*)]
    (new out-types ast)))

(s/fdef pcauchy
  :args (s/alt
         :k (s/cat :alpha valid-kr? )
         ))
(stest/instrument `pcauchy)

(defn pcauchy:a
  {:arglists '([kalpha])}
  [alpha]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pcauchy"
                      [alpha]
                      *global*)]
    (new out-types ast)))

(s/fdef pcauchy:a
  :args (s/cat :alpha valid-kr? ))
(stest/instrument `pcauchy:a)

(defn pcauchy:i
  {:arglists '([kalpha])}
  [alpha]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "pcauchy"
                      [alpha]
                      *global*)]
    (new out-types ast)))

(s/fdef pcauchy:i
  :args (s/cat :alpha valid-kr? ))
(stest/instrument `pcauchy:i)

(defn pcauchy:k
  {:arglists '([kalpha])}
  [alpha]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "pcauchy"
                      [alpha]
                      *global*)]
    (new out-types ast)))

(s/fdef pcauchy:k
  :args (s/cat :alpha valid-kr? ))
(stest/instrument `pcauchy:k)

(defn MixerSend
  {:arglists '([asignal isend ibuss ichannel])}
  [signal send buss channel]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "MixerSend"
                      [signal send buss channel]
                      *global*)]
    (new out-types ast)))

(s/fdef MixerSend
  :args (s/cat :signal valid-ar? :send valid-i? :buss valid-i? :channel valid-i? ))
(stest/instrument `MixerSend)

(defn imagegetpixel
  {:arglists '([iimagenum xx xy])}
  [imagenum x y]
  (let [out-types-quoted '[ControlSignal ControlSignal ControlSignal]
        out-types [ControlSignal ControlSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "imagegetpixel"
                      [imagenum x y]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef imagegetpixel
  :args (s/cat :imagenum valid-i? :x valid-x? :y valid-x? ))
(stest/instrument `imagegetpixel)

(defn mediank
  {:arglists '([kin ksize imaxsize & iskip*])}
  [in size maxsize & [ skip* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "mediank"
                      [in size maxsize skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef mediank
  :args (s/cat :in valid-kr? :size valid-kr? :maxsize valid-i? :skip* valid-i?* ))
(stest/instrument `mediank)

(defn mediank:k
  {:arglists '([kin ksize imaxsize & iskip*])}
  [in size maxsize & [ skip* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "mediank"
                      [in size maxsize skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef mediank:k
  :args (s/cat :in valid-kr? :size valid-kr? :maxsize valid-i? :skip* valid-i?* ))
(stest/instrument `mediank:k)

(defn pvshift
  {:arglists '([fsigin kshift klowest & kkeepform* kgain* kcoefs*] [fsigin xshift klowest & kkeepform* kgain* kcoefs*])}
  [sigin shift lowest & [ keepform* gain* coefs* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvshift"
                      [sigin shift lowest keepform* gain* coefs*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvshift
  :args (s/alt
         :fkkkkk (s/cat :sigin valid-f? :shift valid-kr? :lowest valid-kr? :keepform* valid-kr?* :gain* valid-kr?* :coefs* valid-kr?* )
         ))
(stest/instrument `pvshift)

(defn pvshift:f
  {:arglists '([fsigin kshift klowest & kkeepform* kgain* kcoefs*] [fsigin xshift klowest & kkeepform* kgain* kcoefs*])}
  [sigin shift lowest & [ keepform* gain* coefs* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvshift"
                      [sigin shift lowest keepform* gain* coefs*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvshift:f
  :args (s/alt
         :fkkkkk (s/cat :sigin valid-f? :shift valid-kr? :lowest valid-kr? :keepform* valid-kr?* :gain* valid-kr?* :coefs* valid-kr?* )
         ))
(stest/instrument `pvshift:f)

(defn ATSread
  {:arglists '([ktimepnt Satsfile ipartial] [ktimepnt iatsfile ipartial])}
  [timepnt atsfile partial]
  (let [out-types-quoted '[ControlSignal ControlSignal]
        out-types [ControlSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "ATSread"
                      [timepnt atsfile partial]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef ATSread
  :args (s/alt
         :kSi (s/cat :timepnt valid-kr? :atsfile valid-S? :partial valid-i? )
         ))
(stest/instrument `ATSread)

(defn waveset
  {:arglists '([ain krep & ilen*])}
  [in rep & [ len* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "waveset"
                      [in rep len*]
                      *global*)]
    (new out-types ast)))

(s/fdef waveset
  :args (s/cat :in valid-ar? :rep valid-kr? :len* valid-i?* ))
(stest/instrument `waveset)

(defn waveset:a
  {:arglists '([ain krep & ilen*])}
  [in rep & [ len* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "waveset"
                      [in rep len*]
                      *global*)]
    (new out-types ast)))

(s/fdef waveset:a
  :args (s/cat :in valid-ar? :rep valid-kr? :len* valid-i?* ))
(stest/instrument `waveset:a)

(defn mvclpf1
  {:arglists '([ain acenter-frequency aresonance & istor*] [ain acenter-frequency kresonance & istor*] [ain kcenter-frequency aresonance & istor*] [ain kcenter-frequency kresonance & istor*])}
  [in center-frequency resonance & [ stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "mvclpf1"
                      [in center-frequency resonance stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef mvclpf1
  :args (s/alt
         :aaai (s/cat :in valid-ar? :center-frequency valid-ar? :resonance valid-ar? :stor* valid-i?* )
         ))
(stest/instrument `mvclpf1)

(defn mvclpf1:a
  {:arglists '([ain acenter-frequency aresonance & istor*] [ain acenter-frequency kresonance & istor*] [ain kcenter-frequency aresonance & istor*] [ain kcenter-frequency kresonance & istor*])}
  [in center-frequency resonance & [ stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "mvclpf1"
                      [in center-frequency resonance stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef mvclpf1:a
  :args (s/alt
         :aaai (s/cat :in valid-ar? :center-frequency valid-ar? :resonance valid-ar? :stor* valid-i?* )
         ))
(stest/instrument `mvclpf1:a)

(defn tab2pvs
  {:arglists '([kmagsArr kfreqsArr & ihopsize* iwinsize* iwintype*] [kmagsArr & ifreqs* ihopsize* iwinsize*])}
  [mags freqs & [ hopsize* winsize* wintype* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "tab2pvs"
                      [mags freqs hopsize* winsize* wintype*]
                      *global*)]
    (new out-types ast)))

(s/fdef tab2pvs
  :args (s/alt
         :kArrkArriii (s/cat :mags valid-kArr? :freqs valid-kArr? :hopsize* valid-i?* :winsize* valid-i?* :wintype* valid-i?* )
         ))
(stest/instrument `tab2pvs)

(defn tab2pvs:f
  {:arglists '([kmagsArr kfreqsArr & ihopsize* iwinsize* iwintype*] [kmagsArr & ifreqs* ihopsize* iwinsize*])}
  [mags freqs & [ hopsize* winsize* wintype* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "tab2pvs"
                      [mags freqs hopsize* winsize* wintype*]
                      *global*)]
    (new out-types ast)))

(s/fdef tab2pvs:f
  :args (s/alt
         :kArrkArriii (s/cat :mags valid-kArr? :freqs valid-kArr? :hopsize* valid-i?* :winsize* valid-i?* :wintype* valid-i?* )
         ))
(stest/instrument `tab2pvs:f)

(defn vadd
  {:arglists '([itable kval kelements & kdstoffset* kverbose*])}
  [table val elements & [ dstoffset* verbose* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vadd"
                      [table val elements dstoffset* verbose*]
                      *global*)]
    (new out-types ast)))

(s/fdef vadd
  :args (s/cat :table valid-i? :val valid-kr? :elements valid-kr? :dstoffset* valid-kr?* :verbose* valid-kr?* ))
(stest/instrument `vadd)

(defn pvsbufread
  {:arglists '([ktime khandle & klo* khi* iclear*])}
  [time handle & [ lo* hi* clear* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsbufread"
                      [time handle lo* hi* clear*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsbufread
  :args (s/cat :time valid-kr? :handle valid-kr? :lo* valid-kr?* :hi* valid-kr?* :clear* valid-i?* ))
(stest/instrument `pvsbufread)

(defn pvsbufread:f
  {:arglists '([ktime khandle & klo* khi* iclear*])}
  [time handle & [ lo* hi* clear* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsbufread"
                      [time handle lo* hi* clear*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsbufread:f
  :args (s/cat :time valid-kr? :handle valid-kr? :lo* valid-kr?* :hi* valid-kr?* :clear* valid-i?* ))
(stest/instrument `pvsbufread:f)

(defn imagesave
  {:arglists '([iimagenum Silename])}
  [imagenum ilename]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "imagesave"
                      [imagenum ilename]
                      *global*)]
    (new out-types ast)))

(s/fdef imagesave
  :args (s/cat :imagenum valid-i? :ilename valid-S? ))
(stest/instrument `imagesave)

(defn tablera
  {:arglists '([ktable kstart koff])}
  [table start off]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tablera"
                      [table start off]
                      *global*)]
    (new out-types ast)))

(s/fdef tablera
  :args (s/cat :table valid-kr? :start valid-kr? :off valid-kr? ))
(stest/instrument `tablera)

(defn tablera:a
  {:arglists '([ktable kstart koff])}
  [table start off]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tablera"
                      [table start off]
                      *global*)]
    (new out-types ast)))

(s/fdef tablera:a
  :args (s/cat :table valid-kr? :start valid-kr? :off valid-kr? ))
(stest/instrument `tablera:a)

(defn midictrl
  {:arglists '([inum & imin* imax*] [inum & imin* imax*])}
  [num & [ min* max* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "midictrl"
                      [num min* max*]
                      *global*)]
    (new out-types ast)))

(s/fdef midictrl
  :args (s/alt
         :iii (s/cat :num valid-i? :min* valid-i?* :max* valid-i?* )
         ))
(stest/instrument `midictrl)

(defn midictrl:i
  {:arglists '([inum & imin* imax*])}
  [num & [ min* max* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "midictrl"
                      [num min* max*]
                      *global*)]
    (new out-types ast)))

(s/fdef midictrl:i
  :args (s/cat :num valid-i? :min* valid-i?* :max* valid-i?* ))
(stest/instrument `midictrl:i)

(defn midictrl:k
  {:arglists '([inum & imin* imax*])}
  [num & [ min* max* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "midictrl"
                      [num min* max*]
                      *global*)]
    (new out-types ast)))

(s/fdef midictrl:k
  :args (s/cat :num valid-i? :min* valid-i?* :max* valid-i?* ))
(stest/instrument `midictrl:k)

(defn bbcuts
  {:arglists '([asource1 asource2 ibps isubdiv ibarlength iphrasebars inumrepeats & istutterspeed* istutterchance* ienvchoice*])}
  [source1 source2 bps subdiv barlength phrasebars numrepeats & [ stutterspeed* stutterchance* envchoice* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "bbcuts"
                      [source1 source2 bps subdiv barlength phrasebars numrepeats stutterspeed* stutterchance* envchoice*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef bbcuts
  :args (s/cat :source1 valid-ar? :source2 valid-ar? :bps valid-i? :subdiv valid-i? :barlength valid-i? :phrasebars valid-i? :numrepeats valid-i? :stutterspeed* valid-i?* :stutterchance* valid-i?* :envchoice* valid-i?* ))
(stest/instrument `bbcuts)

(defn loopsegp
  {:arglists '([kphase & kvalue1* kdur2* kvalue3* kdur4* kdurN-5* kvalueN6* kvalueN7* kvalueN8* kvalueN9* kvalueN10* kvalueN11* kvalueN12* kvalueN13* kvalueN14* kvalueN15* kvalueN16*])}
  [phase & [ value1* dur2* value3* dur4* durN-5* valueN6* valueN7* valueN8* valueN9* valueN10* valueN11* valueN12* valueN13* valueN14* valueN15* valueN16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "loopsegp"
                      [phase value1* dur2* value3* dur4* durN-5* valueN6* valueN7* valueN8* valueN9* valueN10* valueN11* valueN12* valueN13* valueN14* valueN15* valueN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef loopsegp
  :args (s/cat :phase valid-kr? :value1* valid-kr?* :dur2* valid-kr?* :value3* valid-kr?* :dur4* valid-kr?* :durN-5* valid-kr?* :valueN6* valid-kr?* :valueN7* valid-kr?* :valueN8* valid-kr?* :valueN9* valid-kr?* :valueN10* valid-kr?* :valueN11* valid-kr?* :valueN12* valid-kr?* :valueN13* valid-kr?* :valueN14* valid-kr?* :valueN15* valid-kr?* :valueN16* valid-kr?* ))
(stest/instrument `loopsegp)

(defn loopsegp:k
  {:arglists '([kphase & kvalue1* kdur2* kvalue3* kdur4* kdurN-5* kvalueN6* kvalueN7* kvalueN8* kvalueN9* kvalueN10* kvalueN11* kvalueN12* kvalueN13* kvalueN14* kvalueN15* kvalueN16*])}
  [phase & [ value1* dur2* value3* dur4* durN-5* valueN6* valueN7* valueN8* valueN9* valueN10* valueN11* valueN12* valueN13* valueN14* valueN15* valueN16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "loopsegp"
                      [phase value1* dur2* value3* dur4* durN-5* valueN6* valueN7* valueN8* valueN9* valueN10* valueN11* valueN12* valueN13* valueN14* valueN15* valueN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef loopsegp:k
  :args (s/cat :phase valid-kr? :value1* valid-kr?* :dur2* valid-kr?* :value3* valid-kr?* :dur4* valid-kr?* :durN-5* valid-kr?* :valueN6* valid-kr?* :valueN7* valid-kr?* :valueN8* valid-kr?* :valueN9* valid-kr?* :valueN10* valid-kr?* :valueN11* valid-kr?* :valueN12* valid-kr?* :valueN13* valid-kr?* :valueN14* valid-kr?* :valueN15* valid-kr?* :valueN16* valid-kr?* ))
(stest/instrument `loopsegp:k)

(defn printks
  {:arglists '([Sstring itime & xval1* xval2* xval3* xval4* xval5* xval6* xval7* xval8* xval9* xval10* xval11* xval12* xval13* xval14* xval15* xval16*] [istring itime & xval1* xval2* xval3* xval4* xval5* xval6* xval7* xval8* xval9* xval10* xval11* xval12* xval13* xval14* xval15* xval16*])}
  [string time & [ val1* val2* val3* val4* val5* val6* val7* val8* val9* val10* val11* val12* val13* val14* val15* val16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "printks"
                      [string time val1* val2* val3* val4* val5* val6* val7* val8* val9* val10* val11* val12* val13* val14* val15* val16*]
                      *global*)]
    (new out-types ast)))

(s/fdef printks
  :args (s/alt
         :Sixxxxxxxxxxxxxxxx (s/cat :string valid-S? :time valid-i? :val1* valid-x?* :val2* valid-x?* :val3* valid-x?* :val4* valid-x?* :val5* valid-x?* :val6* valid-x?* :val7* valid-x?* :val8* valid-x?* :val9* valid-x?* :val10* valid-x?* :val11* valid-x?* :val12* valid-x?* :val13* valid-x?* :val14* valid-x?* :val15* valid-x?* :val16* valid-x?* )
         ))
(stest/instrument `printks)

(defn zamod
  {:arglists '([asig kzamod])}
  [sig zamod]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "zamod"
                      [sig zamod]
                      *global*)]
    (new out-types ast)))

(s/fdef zamod
  :args (s/cat :sig valid-ar? :zamod valid-kr? ))
(stest/instrument `zamod)

(defn zamod:a
  {:arglists '([asig kzamod])}
  [sig zamod]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "zamod"
                      [sig zamod]
                      *global*)]
    (new out-types ast)))

(s/fdef zamod:a
  :args (s/cat :sig valid-ar? :zamod valid-kr? ))
(stest/instrument `zamod:a)

(defn lorenz
  {:arglists '([ksv krv kbv kh ix iy iz iskip & iskipinit*])}
  [sv rv bv h x y z skip & [ skipinit* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "lorenz"
                      [sv rv bv h x y z skip skipinit*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef lorenz
  :args (s/cat :sv valid-kr? :rv valid-kr? :bv valid-kr? :h valid-kr? :x valid-i? :y valid-i? :z valid-i? :skip valid-i? :skipinit* valid-i?* ))
(stest/instrument `lorenz)

(defn pchmidib
  {:arglists '([& irange*] [& irange*])}
  [& [ range* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "pchmidib"
                      [range*]
                      *global*)]
    (new out-types ast)))

(s/fdef pchmidib
  :args (s/alt
         :i (s/cat :range* valid-i?* )
         ))
(stest/instrument `pchmidib)

(defn pchmidib:i
  {:arglists '([& irange*])}
  [& [ range* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "pchmidib"
                      [range*]
                      *global*)]
    (new out-types ast)))

(s/fdef pchmidib:i
  :args (s/cat :range* valid-i?* ))
(stest/instrument `pchmidib:i)

(defn pchmidib:k
  {:arglists '([& irange*])}
  [& [ range* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "pchmidib"
                      [range*]
                      *global*)]
    (new out-types ast)))

(s/fdef pchmidib:k
  :args (s/cat :range* valid-i?* ))
(stest/instrument `pchmidib:k)

(defn strchar
  {:arglists '([Sstr & ipos*])}
  [str & [ pos* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "strchar"
                      [str pos*]
                      *global*)]
    (new out-types ast)))

(s/fdef strchar
  :args (s/cat :str valid-S? :pos* valid-i?* ))
(stest/instrument `strchar)

(defn strchar:i
  {:arglists '([Sstr & ipos*])}
  [str & [ pos* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "strchar"
                      [str pos*]
                      *global*)]
    (new out-types ast)))

(s/fdef strchar:i
  :args (s/cat :str valid-S? :pos* valid-i?* ))
(stest/instrument `strchar:i)

(defn interp
  {:arglists '([ksig & iskip* imode* ivalue*])}
  [sig & [ skip* mode* value* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "interp"
                      [sig skip* mode* value*]
                      *global*)]
    (new out-types ast)))

(s/fdef interp
  :args (s/cat :sig valid-kr? :skip* valid-i?* :mode* valid-i?* :value* valid-i?* ))
(stest/instrument `interp)

(defn interp:a
  {:arglists '([ksig & iskip* imode* ivalue*])}
  [sig & [ skip* mode* value* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "interp"
                      [sig skip* mode* value*]
                      *global*)]
    (new out-types ast)))

(s/fdef interp:a
  :args (s/cat :sig valid-kr? :skip* valid-i?* :mode* valid-i?* :value* valid-i?* ))
(stest/instrument `interp:a)

(defn temposcal
  {:arglists '([ktimescal kamp kpitch ktab klock & ifftsize* idecim* kthresh* kthresh* kthresh*])}
  [timescal amp pitch tab lock & [ fftsize* decim* thresh* thresh* thresh* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "temposcal"
                      [timescal amp pitch tab lock fftsize* decim* thresh* thresh* thresh*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef temposcal
  :args (s/cat :timescal valid-kr? :amp valid-kr? :pitch valid-kr? :tab valid-kr? :lock valid-kr? :fftsize* valid-i?* :decim* valid-i?* :thresh* valid-kr?* :thresh* valid-kr?* :thresh* valid-kr?* ))
(stest/instrument `temposcal)

(defn pvsosc
  {:arglists '([kamp kfreq ktype isize & ioverlap* iwinsize* iwintype* iformat*])}
  [amp freq type size & [ overlap* winsize* wintype* format* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsosc"
                      [amp freq type size overlap* winsize* wintype* format*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsosc
  :args (s/cat :amp valid-kr? :freq valid-kr? :type valid-kr? :size valid-i? :overlap* valid-i?* :winsize* valid-i?* :wintype* valid-i?* :format* valid-i?* ))
(stest/instrument `pvsosc)

(defn pvsosc:f
  {:arglists '([kamp kfreq ktype isize & ioverlap* iwinsize* iwintype* iformat*])}
  [amp freq type size & [ overlap* winsize* wintype* format* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsosc"
                      [amp freq type size overlap* winsize* wintype* format*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsosc:f
  :args (s/cat :amp valid-kr? :freq valid-kr? :type valid-kr? :size valid-i? :overlap* valid-i?* :winsize* valid-i?* :wintype* valid-i?* :format* valid-i?* ))
(stest/instrument `pvsosc:f)

(defn noise
  {:arglists '([xamp kbeta])}
  [amp beta]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "noise"
                      [amp beta]
                      *global*)]
    (new out-types ast)))

(s/fdef noise
  :args (s/cat :amp valid-x? :beta valid-kr? ))
(stest/instrument `noise)

(defn noise:a
  {:arglists '([xamp kbeta])}
  [amp beta]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "noise"
                      [amp beta]
                      *global*)]
    (new out-types ast)))

(s/fdef noise:a
  :args (s/cat :amp valid-x? :beta valid-kr? ))
(stest/instrument `noise:a)

(defn fftinv
  {:arglists '([iinArr] [kinArr])}
  [in]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "fftinv"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef fftinv
  :args (s/alt
         :iArr (s/cat :in valid-iArr? )
         ))
(stest/instrument `fftinv)

(defn fftinv:iArr
  {:arglists '([iinArr])}
  [in]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "fftinv"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef fftinv:iArr
  :args (s/cat :in valid-iArr? ))
(stest/instrument `fftinv:iArr)

(defn fftinv:kArr
  {:arglists '([kinArr])}
  [in]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "fftinv"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef fftinv:kArr
  :args (s/cat :in valid-kArr? ))
(stest/instrument `fftinv:kArr)

(defn diff
  {:arglists '([xsig & iskip*] [xsig & iskip*])}
  [sig & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "diff"
                      [sig skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef diff
  :args (s/alt
         :xi (s/cat :sig valid-x? :skip* valid-i?* )
         ))
(stest/instrument `diff)

(defn diff:a
  {:arglists '([xsig & iskip*])}
  [sig & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "diff"
                      [sig skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef diff:a
  :args (s/cat :sig valid-x? :skip* valid-i?* ))
(stest/instrument `diff:a)

(defn diff:k
  {:arglists '([xsig & iskip*])}
  [sig & [ skip* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "diff"
                      [sig skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef diff:k
  :args (s/cat :sig valid-x? :skip* valid-i?* ))
(stest/instrument `diff:k)

(defn chnexport
  {:arglists '([Sname imode] [Sname imode] [Sname imode & imode* imode* imode* imode*] [Sname imode & imode* imode* imode* imode*])}
  [name mode]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "chnexport"
                      [name mode]
                      *global*)]
    (new out-types ast)))

(s/fdef chnexport
  :args (s/alt
         :Si (s/cat :name valid-S? :mode valid-i? )
         ))
(stest/instrument `chnexport)

(defn chnexport:S
  {:arglists '([Sname imode])}
  [name mode]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "chnexport"
                      [name mode]
                      *global*)]
    (new out-types ast)))

(s/fdef chnexport:S
  :args (s/cat :name valid-S? :mode valid-i? ))
(stest/instrument `chnexport:S)

(defn chnexport:a
  {:arglists '([Sname imode])}
  [name mode]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "chnexport"
                      [name mode]
                      *global*)]
    (new out-types ast)))

(s/fdef chnexport:a
  :args (s/cat :name valid-S? :mode valid-i? ))
(stest/instrument `chnexport:a)

(defn chnexport:i
  {:arglists '([Sname imode & imode* imode* imode* imode*])}
  [name mode & [ mode* mode* mode* mode* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "chnexport"
                      [name mode mode* mode* mode* mode*]
                      *global*)]
    (new out-types ast)))

(s/fdef chnexport:i
  :args (s/cat :name valid-S? :mode valid-i? :mode* valid-i?* :mode* valid-i?* :mode* valid-i?* :mode* valid-i?* ))
(stest/instrument `chnexport:i)

(defn chnexport:k
  {:arglists '([Sname imode & imode* imode* imode* imode*])}
  [name mode & [ mode* mode* mode* mode* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "chnexport"
                      [name mode mode* mode* mode* mode*]
                      *global*)]
    (new out-types ast)))

(s/fdef chnexport:k
  :args (s/cat :name valid-S? :mode valid-i? :mode* valid-i?* :mode* valid-i?* :mode* valid-i?* :mode* valid-i?* ))
(stest/instrument `chnexport:k)

(defn OSClisten
  {:arglists '([ihandle Sdest Stype] [ihandle Sdest Stype & xdata1* xdata2* xdata3* xdata4* xdata5* xdata6* xdata7* xdata8* xdata9* xdata10* xdata11* xdata12* xdata13* xdata14* xdata15* xdata16*])}
  [handle dest type]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "OSClisten"
                      [handle dest type]
                      *global*)]
    (new out-types ast)))

(s/fdef OSClisten
  :args (s/alt
         :iSS (s/cat :handle valid-i? :dest valid-S? :type valid-S? )
         ))
(stest/instrument `OSClisten)

(defn OSClisten:k
  {:arglists '([ihandle Sdest Stype] [ihandle Sdest Stype & xdata1* xdata2* xdata3* xdata4* xdata5* xdata6* xdata7* xdata8* xdata9* xdata10* xdata11* xdata12* xdata13* xdata14* xdata15* xdata16*])}
  [handle dest type]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "OSClisten"
                      [handle dest type]
                      *global*)]
    (new out-types ast)))

(s/fdef OSClisten:k
  :args (s/alt
         :iSS (s/cat :handle valid-i? :dest valid-S? :type valid-S? )
         ))
(stest/instrument `OSClisten:k)

(defn pvsadsyn
  {:arglists '([fsrc inoscs kfmod & ibinoffset* ibinincr* iinit*])}
  [src noscs fmod & [ binoffset* binincr* init* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pvsadsyn"
                      [src noscs fmod binoffset* binincr* init*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsadsyn
  :args (s/cat :src valid-f? :noscs valid-i? :fmod valid-kr? :binoffset* valid-i?* :binincr* valid-i?* :init* valid-i?* ))
(stest/instrument `pvsadsyn)

(defn pvsadsyn:a
  {:arglists '([fsrc inoscs kfmod & ibinoffset* ibinincr* iinit*])}
  [src noscs fmod & [ binoffset* binincr* init* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pvsadsyn"
                      [src noscs fmod binoffset* binincr* init*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsadsyn:a
  :args (s/cat :src valid-f? :noscs valid-i? :fmod valid-kr? :binoffset* valid-i?* :binincr* valid-i?* :init* valid-i?* ))
(stest/instrument `pvsadsyn:a)

(defn checkbox
  {:arglists '([knum])}
  [num]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "checkbox"
                      [num]
                      *global*)]
    (new out-types ast)))

(s/fdef checkbox
  :args (s/cat :num valid-kr? ))
(stest/instrument `checkbox)

(defn checkbox:k
  {:arglists '([knum])}
  [num]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "checkbox"
                      [num]
                      *global*)]
    (new out-types ast)))

(s/fdef checkbox:k
  :args (s/cat :num valid-kr? ))
(stest/instrument `checkbox:k)

(defn puts
  {:arglists '([Sstr ktrig & inonl*])}
  [str trig & [ nonl* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "puts"
                      [str trig nonl*]
                      *global*)]
    (new out-types ast)))

(s/fdef puts
  :args (s/cat :str valid-S? :trig valid-kr? :nonl* valid-i?* ))
(stest/instrument `puts)

(defn pcount
  {:arglists '()}
  []
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "pcount"
                      []
                      *global*)]
    (new out-types ast)))


(defn pcount:i
  {:arglists '()}
  []
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "pcount"
                      []
                      *global*)]
    (new out-types ast)))


(defn lposcilsa2
  {:arglists '([aamp kfreqratio kloop kend ift & iphase*])}
  [amp freqratio loop end ft & [ phase* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "lposcilsa2"
                      [amp freqratio loop end ft phase*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef lposcilsa2
  :args (s/cat :amp valid-ar? :freqratio valid-kr? :loop valid-kr? :end valid-kr? :ft valid-i? :phase* valid-i?* ))
(stest/instrument `lposcilsa2)

(defn diskin
  {:arglists '([Sfilcod & kpitch* iskiptim* iwraparound* iformat* iskipinit* iskipinit* iskipinit* iskipinit*] [ifilcod & kpitch* iskiptim* iwraparound* iformat* iskipinit* iskipinit* iskipinit* iskipinit*] [Sfilcod & kpitch* iskiptim* iwraparound* iformat* iskipinit* iskipinit* iskipinit* iskipinit*] [ifilcod & kpitch* iskiptim* iwraparound* iformat* iskipinit* iskipinit* iskipinit* iskipinit*])}
  [filcod & [ pitch* skiptim* wraparound* format* skipinit* skipinit* skipinit* skipinit* ]]
  (let [out-types-quoted 'AudioArray
        out-types AudioArray
        ast (ast-node out-types-quoted
                      "diskin"
                      [filcod pitch* skiptim* wraparound* format* skipinit* skipinit* skipinit* skipinit*]
                      *global*)]
    (new out-types ast)))

(s/fdef diskin
  :args (s/alt
         :Skiiiiiii (s/cat :filcod valid-S? :pitch* valid-kr?* :skiptim* valid-i?* :wraparound* valid-i?* :format* valid-i?* :skipinit* valid-i?* :skipinit* valid-i?* :skipinit* valid-i?* :skipinit* valid-i?* )
         ))
(stest/instrument `diskin)

(defn diskin:aArr
  {:arglists '([Sfilcod & kpitch* iskiptim* iwraparound* iformat* iskipinit* iskipinit* iskipinit* iskipinit*] [ifilcod & kpitch* iskiptim* iwraparound* iformat* iskipinit* iskipinit* iskipinit* iskipinit*])}
  [filcod & [ pitch* skiptim* wraparound* format* skipinit* skipinit* skipinit* skipinit* ]]
  (let [out-types-quoted 'AudioArray
        out-types AudioArray
        ast (ast-node out-types-quoted
                      "diskin"
                      [filcod pitch* skiptim* wraparound* format* skipinit* skipinit* skipinit* skipinit*]
                      *global*)]
    (new out-types ast)))

(s/fdef diskin:aArr
  :args (s/alt
         :Skiiiiiii (s/cat :filcod valid-S? :pitch* valid-kr?* :skiptim* valid-i?* :wraparound* valid-i?* :format* valid-i?* :skipinit* valid-i?* :skipinit* valid-i?* :skipinit* valid-i?* :skipinit* valid-i?* )
         ))
(stest/instrument `diskin:aArr)

(defn diskin:a
  {:arglists '([Sfilcod & kpitch* iskiptim* iwraparound* iformat* iskipinit* iskipinit* iskipinit* iskipinit*] [ifilcod & kpitch* iskiptim* iwraparound* iformat* iskipinit* iskipinit* iskipinit* iskipinit*])}
  [filcod & [ pitch* skiptim* wraparound* format* skipinit* skipinit* skipinit* skipinit* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "diskin"
                      [filcod pitch* skiptim* wraparound* format* skipinit* skipinit* skipinit* skipinit*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef diskin:a
  :args (s/alt
         :Skiiiiiii (s/cat :filcod valid-S? :pitch* valid-kr?* :skiptim* valid-i?* :wraparound* valid-i?* :format* valid-i?* :skipinit* valid-i?* :skipinit* valid-i?* :skipinit* valid-i?* :skipinit* valid-i?* )
         ))
(stest/instrument `diskin:a)

(defn outs2
  {:arglists '([asig])}
  [sig]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outs2"
                      [sig]
                      *global*)]
    (new out-types ast)))

(s/fdef outs2
  :args (s/cat :sig valid-ar? ))
(stest/instrument `outs2)

(defn midiarp
  {:arglists '([kRate & kMode*])}
  [Rate & [ Mode* ]]
  (let [out-types-quoted '[ControlSignal ControlSignal]
        out-types [ControlSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "midiarp"
                      [Rate Mode*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef midiarp
  :args (s/cat :Rate valid-kr? :Mode* valid-kr?* ))
(stest/instrument `midiarp)

(defn OSCsend
  {:arglists '([kwhen Shost kport Sdestination Stype & xdata1* xdata2* xdata3* xdata4* xdata5* xdata6* xdata7* xdata8* xdata9* xdata10* xdata11* xdata12* xdata13* xdata14* xdata15* xdata16*])}
  [when host port destination type & [ data1* data2* data3* data4* data5* data6* data7* data8* data9* data10* data11* data12* data13* data14* data15* data16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "OSCsend"
                      [when host port destination type data1* data2* data3* data4* data5* data6* data7* data8* data9* data10* data11* data12* data13* data14* data15* data16*]
                      *global*)]
    (new out-types ast)))

(s/fdef OSCsend
  :args (s/cat :when valid-kr? :host valid-S? :port valid-kr? :destination valid-S? :type valid-S? :data1* valid-x?* :data2* valid-x?* :data3* valid-x?* :data4* valid-x?* :data5* valid-x?* :data6* valid-x?* :data7* valid-x?* :data8* valid-x?* :data9* valid-x?* :data10* valid-x?* :data11* valid-x?* :data12* valid-x?* :data13* valid-x?* :data14* valid-x?* :data15* valid-x?* :data16* valid-x?* ))
(stest/instrument `OSCsend)

(defn cuserrnd
  {:arglists '([kmin kmax ktableNum] [imin imax itableNum] [kmin kmax ktableNum])}
  [min max tableNum]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "cuserrnd"
                      [min max tableNum]
                      *global*)]
    (new out-types ast)))

(s/fdef cuserrnd
  :args (s/alt
         :kkk (s/cat :min valid-kr? :max valid-kr? :tableNum valid-kr? )
         ))
(stest/instrument `cuserrnd)

(defn cuserrnd:a
  {:arglists '([kmin kmax ktableNum])}
  [min max tableNum]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "cuserrnd"
                      [min max tableNum]
                      *global*)]
    (new out-types ast)))

(s/fdef cuserrnd:a
  :args (s/cat :min valid-kr? :max valid-kr? :tableNum valid-kr? ))
(stest/instrument `cuserrnd:a)

(defn cuserrnd:i
  {:arglists '([imin imax itableNum])}
  [min max tableNum]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "cuserrnd"
                      [min max tableNum]
                      *global*)]
    (new out-types ast)))

(s/fdef cuserrnd:i
  :args (s/cat :min valid-i? :max valid-i? :tableNum valid-i? ))
(stest/instrument `cuserrnd:i)

(defn cuserrnd:k
  {:arglists '([kmin kmax ktableNum])}
  [min max tableNum]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "cuserrnd"
                      [min max tableNum]
                      *global*)]
    (new out-types ast)))

(s/fdef cuserrnd:k
  :args (s/cat :min valid-kr? :max valid-kr? :tableNum valid-kr? ))
(stest/instrument `cuserrnd:k)

(defn event
  {:arglists '([Sscorechar Sinsname & kdelay1* kdur2* kp3* kp4* kp5* kp6* kp7* kp8* kp9* kp10* kp11* kp12* kp13* kp14* kp15* kp16*] [Sscorechar kinsname & kdelay1* kdur2* kp3* kp4* kp5* kp6* kp7* kp8* kp9* kp10* kp11* kp12* kp13* kp14* kp15* kp16*])}
  [scorechar insname & [ delay1* dur2* p3* p4* p5* p6* p7* p8* p9* p10* p11* p12* p13* p14* p15* p16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "event"
                      [scorechar insname delay1* dur2* p3* p4* p5* p6* p7* p8* p9* p10* p11* p12* p13* p14* p15* p16*]
                      *global*)]
    (new out-types ast)))

(s/fdef event
  :args (s/alt
         :SSkkkkkkkkkkkkkkkk (s/cat :scorechar valid-S? :insname valid-S? :delay1* valid-kr?* :dur2* valid-kr?* :p3* valid-kr?* :p4* valid-kr?* :p5* valid-kr?* :p6* valid-kr?* :p7* valid-kr?* :p8* valid-kr?* :p9* valid-kr?* :p10* valid-kr?* :p11* valid-kr?* :p12* valid-kr?* :p13* valid-kr?* :p14* valid-kr?* :p15* valid-kr?* :p16* valid-kr?* )
         ))
(stest/instrument `event)

(defn nrpn
  {:arglists '([kchan kparmnum kparmvalue])}
  [chan parmnum parmvalue]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "nrpn"
                      [chan parmnum parmvalue]
                      *global*)]
    (new out-types ast)))

(s/fdef nrpn
  :args (s/cat :chan valid-kr? :parmnum valid-kr? :parmvalue valid-kr? ))
(stest/instrument `nrpn)

(defn exciter
  {:arglists '([asig kfreq kceil kharmonics kblend])}
  [sig freq ceil harmonics blend]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "exciter"
                      [sig freq ceil harmonics blend]
                      *global*)]
    (new out-types ast)))

(s/fdef exciter
  :args (s/cat :sig valid-ar? :freq valid-kr? :ceil valid-kr? :harmonics valid-kr? :blend valid-kr? ))
(stest/instrument `exciter)

(defn exciter:a
  {:arglists '([asig kfreq kceil kharmonics kblend])}
  [sig freq ceil harmonics blend]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "exciter"
                      [sig freq ceil harmonics blend]
                      *global*)]
    (new out-types ast)))

(s/fdef exciter:a
  :args (s/cat :sig valid-ar? :freq valid-kr? :ceil valid-kr? :harmonics valid-kr? :blend valid-kr? ))
(stest/instrument `exciter:a)

(defn ftgenonce
  {:arglists '([ip1 ip2dummy isize Sgen Sarga & iargb1* iargb2* iargb3* iargb4* iargb5* iargb6* iargb7* iargb8* iargb9* iargb10* iargb11* iargb12* iargb13* iargb14* iargb15* iargb16*] [ip1 ip2dummy isize Sgen iarga & iargb1* iargb2* iargb3* iargb4* iargb5* iargb6* iargb7* iargb8* iargb9* iargb10* iargb11* iargb12* iargb13* iargb14* iargb15* iargb16*] [ip1 ip2dummy isize igen Sarga & iargb1* iargb2* iargb3* iargb4* iargb5* iargb6* iargb7* iargb8* iargb9* iargb10* iargb11* iargb12* iargb13* iargb14* iargb15* iargb16*] [ip1 ip2dummy isize igen iarga & iargb1* iargb2* iargb3* iargb4* iargb5* iargb6* iargb7* iargb8* iargb9* iargb10* iargb11* iargb12* iargb13* iargb14* iargb15* iargb16*])}
  [p1 p2dummy size gen arga & [ argb1* argb2* argb3* argb4* argb5* argb6* argb7* argb8* argb9* argb10* argb11* argb12* argb13* argb14* argb15* argb16* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ftgenonce"
                      [p1 p2dummy size gen arga argb1* argb2* argb3* argb4* argb5* argb6* argb7* argb8* argb9* argb10* argb11* argb12* argb13* argb14* argb15* argb16*]
                      *global*)]
    (new out-types ast)))

(s/fdef ftgenonce
  :args (s/alt
         :iiiSSiiiiiiiiiiiiiiii (s/cat :p1 valid-i? :p2dummy valid-i? :size valid-i? :gen valid-S? :arga valid-S? :argb1* valid-i?* :argb2* valid-i?* :argb3* valid-i?* :argb4* valid-i?* :argb5* valid-i?* :argb6* valid-i?* :argb7* valid-i?* :argb8* valid-i?* :argb9* valid-i?* :argb10* valid-i?* :argb11* valid-i?* :argb12* valid-i?* :argb13* valid-i?* :argb14* valid-i?* :argb15* valid-i?* :argb16* valid-i?* )
         ))
(stest/instrument `ftgenonce)

(defn ftgenonce:i
  {:arglists '([ip1 ip2dummy isize Sgen Sarga & iargb1* iargb2* iargb3* iargb4* iargb5* iargb6* iargb7* iargb8* iargb9* iargb10* iargb11* iargb12* iargb13* iargb14* iargb15* iargb16*] [ip1 ip2dummy isize Sgen iarga & iargb1* iargb2* iargb3* iargb4* iargb5* iargb6* iargb7* iargb8* iargb9* iargb10* iargb11* iargb12* iargb13* iargb14* iargb15* iargb16*] [ip1 ip2dummy isize igen Sarga & iargb1* iargb2* iargb3* iargb4* iargb5* iargb6* iargb7* iargb8* iargb9* iargb10* iargb11* iargb12* iargb13* iargb14* iargb15* iargb16*] [ip1 ip2dummy isize igen iarga & iargb1* iargb2* iargb3* iargb4* iargb5* iargb6* iargb7* iargb8* iargb9* iargb10* iargb11* iargb12* iargb13* iargb14* iargb15* iargb16*])}
  [p1 p2dummy size gen arga & [ argb1* argb2* argb3* argb4* argb5* argb6* argb7* argb8* argb9* argb10* argb11* argb12* argb13* argb14* argb15* argb16* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ftgenonce"
                      [p1 p2dummy size gen arga argb1* argb2* argb3* argb4* argb5* argb6* argb7* argb8* argb9* argb10* argb11* argb12* argb13* argb14* argb15* argb16*]
                      *global*)]
    (new out-types ast)))

(s/fdef ftgenonce:i
  :args (s/alt
         :iiiSSiiiiiiiiiiiiiiii (s/cat :p1 valid-i? :p2dummy valid-i? :size valid-i? :gen valid-S? :arga valid-S? :argb1* valid-i?* :argb2* valid-i?* :argb3* valid-i?* :argb4* valid-i?* :argb5* valid-i?* :argb6* valid-i?* :argb7* valid-i?* :argb8* valid-i?* :argb9* valid-i?* :argb10* valid-i?* :argb11* valid-i?* :argb12* valid-i?* :argb13* valid-i?* :argb14* valid-i?* :argb15* valid-i?* :argb16* valid-i?* )
         ))
(stest/instrument `ftgenonce:i)

(defn butterbp
  {:arglists '([asig xfreq xband & iskip*])}
  [sig freq band & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "butterbp"
                      [sig freq band skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef butterbp
  :args (s/cat :sig valid-ar? :freq valid-x? :band valid-x? :skip* valid-i?* ))
(stest/instrument `butterbp)

(defn butterbp:a
  {:arglists '([asig xfreq xband & iskip*])}
  [sig freq band & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "butterbp"
                      [sig freq band skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef butterbp:a
  :args (s/cat :sig valid-ar? :freq valid-x? :band valid-x? :skip* valid-i?* ))
(stest/instrument `butterbp:a)

(defn maxaccum
  {:arglists '([aAccumulator aInput])}
  [Accumulator Input]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "maxaccum"
                      [Accumulator Input]
                      *global*)]
    (new out-types ast)))

(s/fdef maxaccum
  :args (s/cat :Accumulator valid-ar? :Input valid-ar? ))
(stest/instrument `maxaccum)

(defn pvsftr
  {:arglists '([fsrc ifna & ifnf*])}
  [src fna & [ fnf* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "pvsftr"
                      [src fna fnf*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsftr
  :args (s/cat :src valid-f? :fna valid-i? :fnf* valid-i?* ))
(stest/instrument `pvsftr)

(defn butbr
  {:arglists '([asig xfreq xband & iskip*])}
  [sig freq band & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "butbr"
                      [sig freq band skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef butbr
  :args (s/cat :sig valid-ar? :freq valid-x? :band valid-x? :skip* valid-i?* ))
(stest/instrument `butbr)

(defn butbr:a
  {:arglists '([asig xfreq xband & iskip*])}
  [sig freq band & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "butbr"
                      [sig freq band skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef butbr:a
  :args (s/cat :sig valid-ar? :freq valid-x? :band valid-x? :skip* valid-i?* ))
(stest/instrument `butbr:a)

(defn readk4
  {:arglists '([Sfilname iformat iprd] [ifilname iformat iprd])}
  [filname format prd]
  (let [out-types-quoted '[ControlSignal ControlSignal ControlSignal ControlSignal]
        out-types [ControlSignal ControlSignal ControlSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "readk4"
                      [filname format prd]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef readk4
  :args (s/alt
         :Sii (s/cat :filname valid-S? :format valid-i? :prd valid-i? )
         ))
(stest/instrument `readk4)

(defn outx
  {:arglists '([& asig1* asig2* asig3* asig4* asig5* asig6* asig7* asig8* asig9* asig10* asig11* asig12* asig13* asig14* asig15* asig16* asig17* asig18* asig19* asig20* asig21* asig22* asig23* asig24* asig25* asig26* asig27* asig28* asig29* asig30* asig31* asig32*])}
  [& [ sig1* sig2* sig3* sig4* sig5* sig6* sig7* sig8* sig9* sig10* sig11* sig12* sig13* sig14* sig15* sig16* sig17* sig18* sig19* sig20* sig21* sig22* sig23* sig24* sig25* sig26* sig27* sig28* sig29* sig30* sig31* sig32* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outx"
                      [sig1* sig2* sig3* sig4* sig5* sig6* sig7* sig8* sig9* sig10* sig11* sig12* sig13* sig14* sig15* sig16* sig17* sig18* sig19* sig20* sig21* sig22* sig23* sig24* sig25* sig26* sig27* sig28* sig29* sig30* sig31* sig32*]
                      *global*)]
    (new out-types ast)))

(s/fdef outx
  :args (s/cat :sig1* valid-ar?* :sig2* valid-ar?* :sig3* valid-ar?* :sig4* valid-ar?* :sig5* valid-ar?* :sig6* valid-ar?* :sig7* valid-ar?* :sig8* valid-ar?* :sig9* valid-ar?* :sig10* valid-ar?* :sig11* valid-ar?* :sig12* valid-ar?* :sig13* valid-ar?* :sig14* valid-ar?* :sig15* valid-ar?* :sig16* valid-ar?* :sig17* valid-ar?* :sig18* valid-ar?* :sig19* valid-ar?* :sig20* valid-ar?* :sig21* valid-ar?* :sig22* valid-ar?* :sig23* valid-ar?* :sig24* valid-ar?* :sig25* valid-ar?* :sig26* valid-ar?* :sig27* valid-ar?* :sig28* valid-ar?* :sig29* valid-ar?* :sig30* valid-ar?* :sig31* valid-ar?* :sig32* valid-ar?* ))
(stest/instrument `outx)

(defn sfload
  {:arglists '([Sfilename] [ifilename])}
  [filename]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "sfload"
                      [filename]
                      *global*)]
    (new out-types ast)))

(s/fdef sfload
  :args (s/alt
         :S (s/cat :filename valid-S? )
         ))
(stest/instrument `sfload)

(defn sfload:i
  {:arglists '([Sfilename] [ifilename])}
  [filename]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "sfload"
                      [filename]
                      *global*)]
    (new out-types ast)))

(s/fdef sfload:i
  :args (s/alt
         :S (s/cat :filename valid-S? )
         ))
(stest/instrument `sfload:i)

(defn transegb
  {:arglists '([ia itim itype & ib1* itim2* itype3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*] [ia itim itype & ib1* itim2* itype3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a tim type & [ b1* tim2* type3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "transegb"
                      [a tim type b1* tim2* type3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef transegb
  :args (s/alt
         :iiiiiiiiiiiiiiiiiii (s/cat :a valid-i? :tim valid-i? :type valid-i? :b1* valid-i?* :tim2* valid-i?* :type3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* )
         ))
(stest/instrument `transegb)

(defn transegb:a
  {:arglists '([ia itim itype & ib1* itim2* itype3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a tim type & [ b1* tim2* type3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "transegb"
                      [a tim type b1* tim2* type3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef transegb:a
  :args (s/cat :a valid-i? :tim valid-i? :type valid-i? :b1* valid-i?* :tim2* valid-i?* :type3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* ))
(stest/instrument `transegb:a)

(defn transegb:k
  {:arglists '([ia itim itype & ib1* itim2* itype3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a tim type & [ b1* tim2* type3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "transegb"
                      [a tim type b1* tim2* type3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef transegb:k
  :args (s/cat :a valid-i? :tim valid-i? :type valid-i? :b1* valid-i?* :tim2* valid-i?* :type3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* ))
(stest/instrument `transegb:k)

(defn vcomb
  {:arglists '([asig krvt xlpt imaxlpt & iskip* insmps*])}
  [sig rvt lpt maxlpt & [ skip* nsmps* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "vcomb"
                      [sig rvt lpt maxlpt skip* nsmps*]
                      *global*)]
    (new out-types ast)))

(s/fdef vcomb
  :args (s/cat :sig valid-ar? :rvt valid-kr? :lpt valid-x? :maxlpt valid-i? :skip* valid-i?* :nsmps* valid-i?* ))
(stest/instrument `vcomb)

(defn vcomb:a
  {:arglists '([asig krvt xlpt imaxlpt & iskip* insmps*])}
  [sig rvt lpt maxlpt & [ skip* nsmps* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "vcomb"
                      [sig rvt lpt maxlpt skip* nsmps*]
                      *global*)]
    (new out-types ast)))

(s/fdef vcomb:a
  :args (s/cat :sig valid-ar? :rvt valid-kr? :lpt valid-x? :maxlpt valid-i? :skip* valid-i?* :nsmps* valid-i?* ))
(stest/instrument `vcomb:a)

(defn tablexseg
  {:arglists '([ifn1 idur2 & ifn1* idur2* ifn3* ifn4* ifn5* ifn6* ifn7* ifn8* ifn9* ifn10* ifn11* ifn12* ifn13* ifn14* ifn15* ifn16*])}
  [fn1 dur2 & [ fn1* dur2* fn3* fn4* fn5* fn6* fn7* fn8* fn9* fn10* fn11* fn12* fn13* fn14* fn15* fn16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "tablexseg"
                      [fn1 dur2 fn1* dur2* fn3* fn4* fn5* fn6* fn7* fn8* fn9* fn10* fn11* fn12* fn13* fn14* fn15* fn16*]
                      *global*)]
    (new out-types ast)))

(s/fdef tablexseg
  :args (s/cat :fn1 valid-i? :dur2 valid-i? :fn1* valid-i?* :dur2* valid-i?* :fn3* valid-i?* :fn4* valid-i?* :fn5* valid-i?* :fn6* valid-i?* :fn7* valid-i?* :fn8* valid-i?* :fn9* valid-i?* :fn10* valid-i?* :fn11* valid-i?* :fn12* valid-i?* :fn13* valid-i?* :fn14* valid-i?* :fn15* valid-i?* :fn16* valid-i?* ))
(stest/instrument `tablexseg)

(defn mp3in
  {:arglists '([Sfilcod & iskptim* iformat* iskipinit* ibufsize*] [ifilcod & iskptim* iformat* iskipinit* ibufsize*])}
  [filcod & [ skptim* format* skipinit* bufsize* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "mp3in"
                      [filcod skptim* format* skipinit* bufsize*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef mp3in
  :args (s/alt
         :Siiii (s/cat :filcod valid-S? :skptim* valid-i?* :format* valid-i?* :skipinit* valid-i?* :bufsize* valid-i?* )
         ))
(stest/instrument `mp3in)

(defn ctrlinit
  {:arglists '([ichnl & ictlno1* ival2* ictlno3* ival4* ictlno5* ival6* ival7* ival8* ival9* ival10* ival11* ival12* ival13* ival14* ival15* ival16*])}
  [chnl & [ ctlno1* val2* ctlno3* val4* ctlno5* val6* val7* val8* val9* val10* val11* val12* val13* val14* val15* val16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "ctrlinit"
                      [chnl ctlno1* val2* ctlno3* val4* ctlno5* val6* val7* val8* val9* val10* val11* val12* val13* val14* val15* val16*]
                      *global*)]
    (new out-types ast)))

(s/fdef ctrlinit
  :args (s/cat :chnl valid-i? :ctlno1* valid-i?* :val2* valid-i?* :ctlno3* valid-i?* :val4* valid-i?* :ctlno5* valid-i?* :val6* valid-i?* :val7* valid-i?* :val8* valid-i?* :val9* valid-i?* :val10* valid-i?* :val11* valid-i?* :val12* valid-i?* :val13* valid-i?* :val14* valid-i?* :val15* valid-i?* :val16* valid-i?* ))
(stest/instrument `ctrlinit)

(defn outletv
  {:arglists '([Sname arrayArr])}
  [name rray]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outletv"
                      [name rray]
                      *global*)]
    (new out-types ast)))

(s/fdef outletv
  :args (s/cat :name valid-S? :rray valid-aArr? ))
(stest/instrument `outletv)

(defn fmod
  {:arglists '([iargArr iarg2] [iargArr iarg2Arr] [kargArr karg2] [kargArr karg2Arr])}
  [arg arg2]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "fmod"
                      [arg arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef fmod
  :args (s/alt
         :iArri (s/cat :arg valid-iArr? :arg2 valid-i? )
         ))
(stest/instrument `fmod)

(defn fmod:iArr
  {:arglists '([iargArr iarg2] [iargArr iarg2Arr])}
  [arg arg2]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "fmod"
                      [arg arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef fmod:iArr
  :args (s/alt
         :iArri (s/cat :arg valid-iArr? :arg2 valid-i? )
         ))
(stest/instrument `fmod:iArr)

(defn fmod:kArr
  {:arglists '([kargArr karg2] [kargArr karg2Arr])}
  [arg arg2]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "fmod"
                      [arg arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef fmod:kArr
  :args (s/alt
         :kArrk (s/cat :arg valid-kArr? :arg2 valid-kr? )
         ))
(stest/instrument `fmod:kArr)

(defn tableigpw
  {:arglists '([itable])}
  [table]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "tableigpw"
                      [table]
                      *global*)]
    (new out-types ast)))

(s/fdef tableigpw
  :args (s/cat :table valid-i? ))
(stest/instrument `tableigpw)

(defn ftgentmp
  {:arglists '([ip1 ip2dummy isize Sgen Sarga & iargb1* iargb2* iargb3* iargb4* iargb5* iargb6* iargb7* iargb8* iargb9* iargb10* iargb11* iargb12* iargb13* iargb14* iargb15* iargb16*] [ip1 ip2dummy isize Sgen iarga & iargb1* iargb2* iargb3* iargb4* iargb5* iargb6* iargb7* iargb8* iargb9* iargb10* iargb11* iargb12* iargb13* iargb14* iargb15* iargb16*] [ip1 ip2dummy isize igen Sarga & iargb1* iargb2* iargb3* iargb4* iargb5* iargb6* iargb7* iargb8* iargb9* iargb10* iargb11* iargb12* iargb13* iargb14* iargb15* iargb16*] [ip1 ip2dummy isize igen iarga & iargb1* iargb2* iargb3* iargb4* iargb5* iargb6* iargb7* iargb8* iargb9* iargb10* iargb11* iargb12* iargb13* iargb14* iargb15* iargb16*])}
  [p1 p2dummy size gen arga & [ argb1* argb2* argb3* argb4* argb5* argb6* argb7* argb8* argb9* argb10* argb11* argb12* argb13* argb14* argb15* argb16* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ftgentmp"
                      [p1 p2dummy size gen arga argb1* argb2* argb3* argb4* argb5* argb6* argb7* argb8* argb9* argb10* argb11* argb12* argb13* argb14* argb15* argb16*]
                      *global*)]
    (new out-types ast)))

(s/fdef ftgentmp
  :args (s/alt
         :iiiSSiiiiiiiiiiiiiiii (s/cat :p1 valid-i? :p2dummy valid-i? :size valid-i? :gen valid-S? :arga valid-S? :argb1* valid-i?* :argb2* valid-i?* :argb3* valid-i?* :argb4* valid-i?* :argb5* valid-i?* :argb6* valid-i?* :argb7* valid-i?* :argb8* valid-i?* :argb9* valid-i?* :argb10* valid-i?* :argb11* valid-i?* :argb12* valid-i?* :argb13* valid-i?* :argb14* valid-i?* :argb15* valid-i?* :argb16* valid-i?* )
         ))
(stest/instrument `ftgentmp)

(defn ftgentmp:i
  {:arglists '([ip1 ip2dummy isize Sgen Sarga & iargb1* iargb2* iargb3* iargb4* iargb5* iargb6* iargb7* iargb8* iargb9* iargb10* iargb11* iargb12* iargb13* iargb14* iargb15* iargb16*] [ip1 ip2dummy isize Sgen iarga & iargb1* iargb2* iargb3* iargb4* iargb5* iargb6* iargb7* iargb8* iargb9* iargb10* iargb11* iargb12* iargb13* iargb14* iargb15* iargb16*] [ip1 ip2dummy isize igen Sarga & iargb1* iargb2* iargb3* iargb4* iargb5* iargb6* iargb7* iargb8* iargb9* iargb10* iargb11* iargb12* iargb13* iargb14* iargb15* iargb16*] [ip1 ip2dummy isize igen iarga & iargb1* iargb2* iargb3* iargb4* iargb5* iargb6* iargb7* iargb8* iargb9* iargb10* iargb11* iargb12* iargb13* iargb14* iargb15* iargb16*])}
  [p1 p2dummy size gen arga & [ argb1* argb2* argb3* argb4* argb5* argb6* argb7* argb8* argb9* argb10* argb11* argb12* argb13* argb14* argb15* argb16* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ftgentmp"
                      [p1 p2dummy size gen arga argb1* argb2* argb3* argb4* argb5* argb6* argb7* argb8* argb9* argb10* argb11* argb12* argb13* argb14* argb15* argb16*]
                      *global*)]
    (new out-types ast)))

(s/fdef ftgentmp:i
  :args (s/alt
         :iiiSSiiiiiiiiiiiiiiii (s/cat :p1 valid-i? :p2dummy valid-i? :size valid-i? :gen valid-S? :arga valid-S? :argb1* valid-i?* :argb2* valid-i?* :argb3* valid-i?* :argb4* valid-i?* :argb5* valid-i?* :argb6* valid-i?* :argb7* valid-i?* :argb8* valid-i?* :argb9* valid-i?* :argb10* valid-i?* :argb11* valid-i?* :argb12* valid-i?* :argb13* valid-i?* :argb14* valid-i?* :argb15* valid-i?* :argb16* valid-i?* )
         ))
(stest/instrument `ftgentmp:i)

(defn unwrap
  {:arglists '([kinArr])}
  [in]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "unwrap"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef unwrap
  :args (s/cat :in valid-kArr? ))
(stest/instrument `unwrap)

(defn unwrap:kArr
  {:arglists '([kinArr])}
  [in]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "unwrap"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef unwrap:kArr
  :args (s/cat :in valid-kArr? ))
(stest/instrument `unwrap:kArr)

(defn pan
  {:arglists '([asig kx ky itable & imode* ioffset*])}
  [sig x y table & [ mode* offset* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "pan"
                      [sig x y table mode* offset*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef pan
  :args (s/cat :sig valid-ar? :x valid-kr? :y valid-kr? :table valid-i? :mode* valid-i?* :offset* valid-i?* ))
(stest/instrument `pan)

(defn bformdec1
  {:arglists '([isetup abformArr] [isetup & abform1* abform2* abform3* abform4* abform5* abform6* abform7* abform8* abform9* abform10* abform11* abform12* abform13* abform14* abform15* abform16* abform17* abform18* abform19* abform20* abform21* abform22* abform23* abform24* abform25* abform26* abform27* abform28* abform29* abform30* abform31* abform32*])}
  [setup bform]
  (let [out-types-quoted 'AudioArray
        out-types AudioArray
        ast (ast-node out-types-quoted
                      "bformdec1"
                      [setup bform]
                      *global*)]
    (new out-types ast)))

(s/fdef bformdec1
  :args (s/alt
         :iaArr (s/cat :setup valid-i? :bform valid-aArr? )
         ))
(stest/instrument `bformdec1)

(defn bformdec1:aArr
  {:arglists '([isetup abformArr])}
  [setup bform]
  (let [out-types-quoted 'AudioArray
        out-types AudioArray
        ast (ast-node out-types-quoted
                      "bformdec1"
                      [setup bform]
                      *global*)]
    (new out-types ast)))

(s/fdef bformdec1:aArr
  :args (s/cat :setup valid-i? :bform valid-aArr? ))
(stest/instrument `bformdec1:aArr)

(defn bformdec1:a
  {:arglists '([isetup & abform1* abform2* abform3* abform4* abform5* abform6* abform7* abform8* abform9* abform10* abform11* abform12* abform13* abform14* abform15* abform16* abform17* abform18* abform19* abform20* abform21* abform22* abform23* abform24* abform25* abform26* abform27* abform28* abform29* abform30* abform31* abform32*])}
  [setup & [ bform1* bform2* bform3* bform4* bform5* bform6* bform7* bform8* bform9* bform10* bform11* bform12* bform13* bform14* bform15* bform16* bform17* bform18* bform19* bform20* bform21* bform22* bform23* bform24* bform25* bform26* bform27* bform28* bform29* bform30* bform31* bform32* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "bformdec1"
                      [setup bform1* bform2* bform3* bform4* bform5* bform6* bform7* bform8* bform9* bform10* bform11* bform12* bform13* bform14* bform15* bform16* bform17* bform18* bform19* bform20* bform21* bform22* bform23* bform24* bform25* bform26* bform27* bform28* bform29* bform30* bform31* bform32*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef bformdec1:a
  :args (s/cat :setup valid-i? :bform1* valid-ar?* :bform2* valid-ar?* :bform3* valid-ar?* :bform4* valid-ar?* :bform5* valid-ar?* :bform6* valid-ar?* :bform7* valid-ar?* :bform8* valid-ar?* :bform9* valid-ar?* :bform10* valid-ar?* :bform11* valid-ar?* :bform12* valid-ar?* :bform13* valid-ar?* :bform14* valid-ar?* :bform15* valid-ar?* :bform16* valid-ar?* :bform17* valid-ar?* :bform18* valid-ar?* :bform19* valid-ar?* :bform20* valid-ar?* :bform21* valid-ar?* :bform22* valid-ar?* :bform23* valid-ar?* :bform24* valid-ar?* :bform25* valid-ar?* :bform26* valid-ar?* :bform27* valid-ar?* :bform28* valid-ar?* :bform29* valid-ar?* :bform30* valid-ar?* :bform31* valid-ar?* :bform32* valid-ar?* ))
(stest/instrument `bformdec1:a)

(defn readfi
  {:arglists '([Sfilname] [ifilname])}
  [filname]
  (let [out-types-quoted '[String Variable]
        out-types [String Variable]
        ast (ast-node out-types-quoted
                      "readfi"
                      [filname]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef readfi
  :args (s/alt
         :S (s/cat :filname valid-S? )
         ))
(stest/instrument `readfi)

(defn sininv
  {:arglists '([aarg1] [iarg1] [iarg1Arr] [karg1] [karg1Arr])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sininv"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sininv
  :args (s/alt
         :a (s/cat :arg1 valid-ar? )
         ))
(stest/instrument `sininv)

(defn sininv:a
  {:arglists '([aarg1])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sininv"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sininv:a
  :args (s/cat :arg1 valid-ar? ))
(stest/instrument `sininv:a)

(defn sininv:i
  {:arglists '([iarg1])}
  [arg1]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "sininv"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sininv:i
  :args (s/cat :arg1 valid-i? ))
(stest/instrument `sininv:i)

(defn sininv:iArr
  {:arglists '([iarg1Arr])}
  [arg1]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "sininv"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sininv:iArr
  :args (s/cat :arg1 valid-iArr? ))
(stest/instrument `sininv:iArr)

(defn sininv:k
  {:arglists '([karg1])}
  [arg1]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "sininv"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sininv:k
  :args (s/cat :arg1 valid-kr? ))
(stest/instrument `sininv:k)

(defn sininv:kArr
  {:arglists '([karg1Arr])}
  [arg1]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "sininv"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sininv:kArr
  :args (s/cat :arg1 valid-kArr? ))
(stest/instrument `sininv:kArr)

(defn outkc14
  {:arglists '([kchn kmsb klsb kvalue kmin kmax])}
  [chn msb lsb value min max]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outkc14"
                      [chn msb lsb value min max]
                      *global*)]
    (new out-types ast)))

(s/fdef outkc14
  :args (s/cat :chn valid-kr? :msb valid-kr? :lsb valid-kr? :value valid-kr? :min valid-kr? :max valid-kr? ))
(stest/instrument `outkc14)

(defn cpumeter
  {:arglists '([ifreq])}
  [freq]
  (let [out-types-quoted '[ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal]
        out-types [ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "cpumeter"
                      [freq]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef cpumeter
  :args (s/cat :freq valid-i? ))
(stest/instrument `cpumeter)

(defn zir
  {:arglists '([iindex])}
  [index]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "zir"
                      [index]
                      *global*)]
    (new out-types ast)))

(s/fdef zir
  :args (s/cat :index valid-i? ))
(stest/instrument `zir)

(defn zir:i
  {:arglists '([iindex])}
  [index]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "zir"
                      [index]
                      *global*)]
    (new out-types ast)))

(s/fdef zir:i
  :args (s/cat :index valid-i? ))
(stest/instrument `zir:i)

(defn poisson
  {:arglists '([klambda] [klambda] [klambda])}
  [lambda]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "poisson"
                      [lambda]
                      *global*)]
    (new out-types ast)))

(s/fdef poisson
  :args (s/alt
         :k (s/cat :lambda valid-kr? )
         ))
(stest/instrument `poisson)

(defn poisson:a
  {:arglists '([klambda])}
  [lambda]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "poisson"
                      [lambda]
                      *global*)]
    (new out-types ast)))

(s/fdef poisson:a
  :args (s/cat :lambda valid-kr? ))
(stest/instrument `poisson:a)

(defn poisson:i
  {:arglists '([klambda])}
  [lambda]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "poisson"
                      [lambda]
                      *global*)]
    (new out-types ast)))

(s/fdef poisson:i
  :args (s/cat :lambda valid-kr? ))
(stest/instrument `poisson:i)

(defn poisson:k
  {:arglists '([klambda])}
  [lambda]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "poisson"
                      [lambda]
                      *global*)]
    (new out-types ast)))

(s/fdef poisson:k
  :args (s/cat :lambda valid-kr? ))
(stest/instrument `poisson:k)

(defn pvsinit
  {:arglists '([isize & iolap* iwinsize* iwintype* iformat*])}
  [size & [ olap* winsize* wintype* format* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsinit"
                      [size olap* winsize* wintype* format*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsinit
  :args (s/cat :size valid-i? :olap* valid-i?* :winsize* valid-i?* :wintype* valid-i?* :format* valid-i?* ))
(stest/instrument `pvsinit)

(defn pvsinit:f
  {:arglists '([isize & iolap* iwinsize* iwintype* iformat*])}
  [size & [ olap* winsize* wintype* format* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsinit"
                      [size olap* winsize* wintype* format*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsinit:f
  :args (s/cat :size valid-i? :olap* valid-i?* :winsize* valid-i?* :wintype* valid-i?* :format* valid-i?* ))
(stest/instrument `pvsinit:f)

(defn outipat
  {:arglists '([ichn inotenum ivalue imin imax])}
  [chn notenum value min max]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outipat"
                      [chn notenum value min max]
                      *global*)]
    (new out-types ast)))

(s/fdef outipat
  :args (s/cat :chn valid-i? :notenum valid-i? :value valid-i? :min valid-i? :max valid-i? ))
(stest/instrument `outipat)

(defn shiftin
  {:arglists '([asig])}
  [sig]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "shiftin"
                      [sig]
                      *global*)]
    (new out-types ast)))

(s/fdef shiftin
  :args (s/cat :sig valid-ar? ))
(stest/instrument `shiftin)

(defn shiftin:kArr
  {:arglists '([asig])}
  [sig]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "shiftin"
                      [sig]
                      *global*)]
    (new out-types ast)))

(s/fdef shiftin:kArr
  :args (s/cat :sig valid-ar? ))
(stest/instrument `shiftin:kArr)

(defn tablemix
  {:arglists '([kdft kdoff klen ks1ft ks1off ks1g ks2ft ks2off ks2g])}
  [dft doff len s1ft s1off s1g s2ft s2off s2g]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "tablemix"
                      [dft doff len s1ft s1off s1g s2ft s2off s2g]
                      *global*)]
    (new out-types ast)))

(s/fdef tablemix
  :args (s/cat :dft valid-kr? :doff valid-kr? :len valid-kr? :s1ft valid-kr? :s1off valid-kr? :s1g valid-kr? :s2ft valid-kr? :s2off valid-kr? :s2g valid-kr? ))
(stest/instrument `tablemix)

(defn insglobal
  {:arglists '([Ssource & instrnum1* instrnum2* instrnum3* instrnum4* instrnum5* instrnum6* instrnum7* instrnum8* instrnum9* instrnum10* instrnum11* instrnum12* instrnum13* instrnum14* instrnum15* instrnum16*])}
  [source & [ nstrnum1* nstrnum2* nstrnum3* nstrnum4* nstrnum5* nstrnum6* nstrnum7* nstrnum8* nstrnum9* nstrnum10* nstrnum11* nstrnum12* nstrnum13* nstrnum14* nstrnum15* nstrnum16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "insglobal"
                      [source nstrnum1* nstrnum2* nstrnum3* nstrnum4* nstrnum5* nstrnum6* nstrnum7* nstrnum8* nstrnum9* nstrnum10* nstrnum11* nstrnum12* nstrnum13* nstrnum14* nstrnum15* nstrnum16*]
                      *global*)]
    (new out-types ast)))

(s/fdef insglobal
  :args (s/cat :source valid-S? :nstrnum1* valid-i?* :nstrnum2* valid-i?* :nstrnum3* valid-i?* :nstrnum4* valid-i?* :nstrnum5* valid-i?* :nstrnum6* valid-i?* :nstrnum7* valid-i?* :nstrnum8* valid-i?* :nstrnum9* valid-i?* :nstrnum10* valid-i?* :nstrnum11* valid-i?* :nstrnum12* valid-i?* :nstrnum13* valid-i?* :nstrnum14* valid-i?* :nstrnum15* valid-i?* :nstrnum16* valid-i?* ))
(stest/instrument `insglobal)

(defn setcol
  {:arglists '([kinArr kcol])}
  [in col]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "setcol"
                      [in col]
                      *global*)]
    (new out-types ast)))

(s/fdef setcol
  :args (s/cat :in valid-kArr? :col valid-kr? ))
(stest/instrument `setcol)

(defn setcol:kArr
  {:arglists '([kinArr kcol])}
  [in col]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "setcol"
                      [in col]
                      *global*)]
    (new out-types ast)))

(s/fdef setcol:kArr
  :args (s/cat :in valid-kArr? :col valid-kr? ))
(stest/instrument `setcol:kArr)

(defn trsplit
  {:arglists '([fin & ksplit1* kgainlow2* kgainhigh3* kgainhigh4* kgainhigh5* kgainhigh6* kgainhigh7* kgainhigh8* kgainhigh9* kgainhigh10* kgainhigh11* kgainhigh12* kgainhigh13* kgainhigh14* kgainhigh15* kgainhigh16*])}
  [in & [ split1* gainlow2* gainhigh3* gainhigh4* gainhigh5* gainhigh6* gainhigh7* gainhigh8* gainhigh9* gainhigh10* gainhigh11* gainhigh12* gainhigh13* gainhigh14* gainhigh15* gainhigh16* ]]
  (let [out-types-quoted '[FrequencySignal FrequencySignal]
        out-types [FrequencySignal FrequencySignal]
        ast (ast-node out-types-quoted
                      "trsplit"
                      [in split1* gainlow2* gainhigh3* gainhigh4* gainhigh5* gainhigh6* gainhigh7* gainhigh8* gainhigh9* gainhigh10* gainhigh11* gainhigh12* gainhigh13* gainhigh14* gainhigh15* gainhigh16*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef trsplit
  :args (s/cat :in valid-f? :split1* valid-kr?* :gainlow2* valid-kr?* :gainhigh3* valid-kr?* :gainhigh4* valid-kr?* :gainhigh5* valid-kr?* :gainhigh6* valid-kr?* :gainhigh7* valid-kr?* :gainhigh8* valid-kr?* :gainhigh9* valid-kr?* :gainhigh10* valid-kr?* :gainhigh11* valid-kr?* :gainhigh12* valid-kr?* :gainhigh13* valid-kr?* :gainhigh14* valid-kr?* :gainhigh15* valid-kr?* :gainhigh16* valid-kr?* ))
(stest/instrument `trsplit)

(defn deltapi
  {:arglists '([xdlt & idlt*])}
  [dlt & [ dlt* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "deltapi"
                      [dlt dlt*]
                      *global*)]
    (new out-types ast)))

(s/fdef deltapi
  :args (s/cat :dlt valid-x? :dlt* valid-i?* ))
(stest/instrument `deltapi)

(defn deltapi:a
  {:arglists '([xdlt & idlt*])}
  [dlt & [ dlt* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "deltapi"
                      [dlt dlt*]
                      *global*)]
    (new out-types ast)))

(s/fdef deltapi:a
  :args (s/cat :dlt valid-x? :dlt* valid-i?* ))
(stest/instrument `deltapi:a)

(defn alpass
  {:arglists '([asig xrvt ilpt & iskip* insmps*])}
  [sig rvt lpt & [ skip* nsmps* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "alpass"
                      [sig rvt lpt skip* nsmps*]
                      *global*)]
    (new out-types ast)))

(s/fdef alpass
  :args (s/cat :sig valid-ar? :rvt valid-x? :lpt valid-i? :skip* valid-i?* :nsmps* valid-i?* ))
(stest/instrument `alpass)

(defn alpass:a
  {:arglists '([asig xrvt ilpt & iskip* insmps*])}
  [sig rvt lpt & [ skip* nsmps* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "alpass"
                      [sig rvt lpt skip* nsmps*]
                      *global*)]
    (new out-types ast)))

(s/fdef alpass:a
  :args (s/cat :sig valid-ar? :rvt valid-x? :lpt valid-i? :skip* valid-i?* :nsmps* valid-i?* ))
(stest/instrument `alpass:a)

(defn vbapmove
  {:arglists '([asig idur ispread ifldnum & ifld1* ifld2* ifld3* ifld4* ifld5* ifld6* ifld7* ifld8* ifld9* ifld10* ifld11* ifld12* ifld13* ifld14* ifld15* ifld16*] [asig idur ispread ifldnum & ifld1* ifld2* ifld3* ifld4* ifld5* ifld6* ifld7* ifld8* ifld9* ifld10* ifld11* ifld12* ifld13* ifld14* ifld15* ifld16*])}
  [sig dur spread fldnum & [ fld1* fld2* fld3* fld4* fld5* fld6* fld7* fld8* fld9* fld10* fld11* fld12* fld13* fld14* fld15* fld16* ]]
  (let [out-types-quoted 'AudioArray
        out-types AudioArray
        ast (ast-node out-types-quoted
                      "vbapmove"
                      [sig dur spread fldnum fld1* fld2* fld3* fld4* fld5* fld6* fld7* fld8* fld9* fld10* fld11* fld12* fld13* fld14* fld15* fld16*]
                      *global*)]
    (new out-types ast)))

(s/fdef vbapmove
  :args (s/alt
         :aiiiiiiiiiiiiiiiiiii (s/cat :sig valid-ar? :dur valid-i? :spread valid-i? :fldnum valid-i? :fld1* valid-i?* :fld2* valid-i?* :fld3* valid-i?* :fld4* valid-i?* :fld5* valid-i?* :fld6* valid-i?* :fld7* valid-i?* :fld8* valid-i?* :fld9* valid-i?* :fld10* valid-i?* :fld11* valid-i?* :fld12* valid-i?* :fld13* valid-i?* :fld14* valid-i?* :fld15* valid-i?* :fld16* valid-i?* )
         ))
(stest/instrument `vbapmove)

(defn vbapmove:aArr
  {:arglists '([asig idur ispread ifldnum & ifld1* ifld2* ifld3* ifld4* ifld5* ifld6* ifld7* ifld8* ifld9* ifld10* ifld11* ifld12* ifld13* ifld14* ifld15* ifld16*])}
  [sig dur spread fldnum & [ fld1* fld2* fld3* fld4* fld5* fld6* fld7* fld8* fld9* fld10* fld11* fld12* fld13* fld14* fld15* fld16* ]]
  (let [out-types-quoted 'AudioArray
        out-types AudioArray
        ast (ast-node out-types-quoted
                      "vbapmove"
                      [sig dur spread fldnum fld1* fld2* fld3* fld4* fld5* fld6* fld7* fld8* fld9* fld10* fld11* fld12* fld13* fld14* fld15* fld16*]
                      *global*)]
    (new out-types ast)))

(s/fdef vbapmove:aArr
  :args (s/cat :sig valid-ar? :dur valid-i? :spread valid-i? :fldnum valid-i? :fld1* valid-i?* :fld2* valid-i?* :fld3* valid-i?* :fld4* valid-i?* :fld5* valid-i?* :fld6* valid-i?* :fld7* valid-i?* :fld8* valid-i?* :fld9* valid-i?* :fld10* valid-i?* :fld11* valid-i?* :fld12* valid-i?* :fld13* valid-i?* :fld14* valid-i?* :fld15* valid-i?* :fld16* valid-i?* ))
(stest/instrument `vbapmove:aArr)

(defn vbapmove:a
  {:arglists '([asig idur ispread ifldnum & ifld1* ifld2* ifld3* ifld4* ifld5* ifld6* ifld7* ifld8* ifld9* ifld10* ifld11* ifld12* ifld13* ifld14* ifld15* ifld16*])}
  [sig dur spread fldnum & [ fld1* fld2* fld3* fld4* fld5* fld6* fld7* fld8* fld9* fld10* fld11* fld12* fld13* fld14* fld15* fld16* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "vbapmove"
                      [sig dur spread fldnum fld1* fld2* fld3* fld4* fld5* fld6* fld7* fld8* fld9* fld10* fld11* fld12* fld13* fld14* fld15* fld16*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef vbapmove:a
  :args (s/cat :sig valid-ar? :dur valid-i? :spread valid-i? :fldnum valid-i? :fld1* valid-i?* :fld2* valid-i?* :fld3* valid-i?* :fld4* valid-i?* :fld5* valid-i?* :fld6* valid-i?* :fld7* valid-i?* :fld8* valid-i?* :fld9* valid-i?* :fld10* valid-i?* :fld11* valid-i?* :fld12* valid-i?* :fld13* valid-i?* :fld14* valid-i?* :fld15* valid-i?* :fld16* valid-i?* ))
(stest/instrument `vbapmove:a)

(defn log
  {:arglists '([ain] [iin] [iinArr] [kin] [kinArr] [kinArr ibas])}
  [in]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "log"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef log
  :args (s/alt
         :a (s/cat :in valid-ar? )
         ))
(stest/instrument `log)

(defn log:a
  {:arglists '([ain])}
  [in]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "log"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef log:a
  :args (s/cat :in valid-ar? ))
(stest/instrument `log:a)

(defn log:i
  {:arglists '([iin])}
  [in]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "log"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef log:i
  :args (s/cat :in valid-i? ))
(stest/instrument `log:i)

(defn log:iArr
  {:arglists '([iinArr])}
  [in]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "log"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef log:iArr
  :args (s/cat :in valid-iArr? ))
(stest/instrument `log:iArr)

(defn log:k
  {:arglists '([kin])}
  [in]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "log"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef log:k
  :args (s/cat :in valid-kr? ))
(stest/instrument `log:k)

(defn log:kArr
  {:arglists '([kinArr] [kinArr ibas])}
  [in]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "log"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef log:kArr
  :args (s/alt
         :kArr (s/cat :in valid-kArr? )
         ))
(stest/instrument `log:kArr)

(defn alwayson
  {:arglists '([Sinstrument & iarg1* in2* in3* in4* in5* in6* in7* in8* in9* in10* in11* in12* in13* in14* in15* in16*] [iinstrument & iarg1* in2* in3* in4* in5* in6* in7* in8* in9* in10* in11* in12* in13* in14* in15* in16*])}
  [instrument & [ arg1* n2* n3* n4* n5* n6* n7* n8* n9* n10* n11* n12* n13* n14* n15* n16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "alwayson"
                      [instrument arg1* n2* n3* n4* n5* n6* n7* n8* n9* n10* n11* n12* n13* n14* n15* n16*]
                      *global*)]
    (new out-types ast)))

(s/fdef alwayson
  :args (s/alt
         :Siiiiiiiiiiiiiiii (s/cat :instrument valid-S? :arg1* valid-i?* :n2* valid-i?* :n3* valid-i?* :n4* valid-i?* :n5* valid-i?* :n6* valid-i?* :n7* valid-i?* :n8* valid-i?* :n9* valid-i?* :n10* valid-i?* :n11* valid-i?* :n12* valid-i?* :n13* valid-i?* :n14* valid-i?* :n15* valid-i?* :n16* valid-i?* )
         ))
(stest/instrument `alwayson)

(defn sfinstr
  {:arglists '([ivel inotenum xamp xfreq instrnum ifilhandle & iflag* ioffset* ioffset*])}
  [vel notenum amp freq nstrnum filhandle & [ flag* offset* offset* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "sfinstr"
                      [vel notenum amp freq nstrnum filhandle flag* offset* offset*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef sfinstr
  :args (s/cat :vel valid-i? :notenum valid-i? :amp valid-x? :freq valid-x? :nstrnum valid-i? :filhandle valid-i? :flag* valid-i?* :offset* valid-i?* :offset* valid-i?* ))
(stest/instrument `sfinstr)

(defn cross2
  {:arglists '([ain1 ain2 isize ioverlap iwin kbias])}
  [in1 in2 size overlap win bias]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "cross2"
                      [in1 in2 size overlap win bias]
                      *global*)]
    (new out-types ast)))

(s/fdef cross2
  :args (s/cat :in1 valid-ar? :in2 valid-ar? :size valid-i? :overlap valid-i? :win valid-i? :bias valid-kr? ))
(stest/instrument `cross2)

(defn cross2:a
  {:arglists '([ain1 ain2 isize ioverlap iwin kbias])}
  [in1 in2 size overlap win bias]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "cross2"
                      [in1 in2 size overlap win bias]
                      *global*)]
    (new out-types ast)))

(s/fdef cross2:a
  :args (s/cat :in1 valid-ar? :in2 valid-ar? :size valid-i? :overlap valid-i? :win valid-i? :bias valid-kr? ))
(stest/instrument `cross2:a)

(defn pchmidi
  {:arglists '()}
  []
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "pchmidi"
                      []
                      *global*)]
    (new out-types ast)))


(defn pchmidi:i
  {:arglists '()}
  []
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "pchmidi"
                      []
                      *global*)]
    (new out-types ast)))


(defn tableng
  {:arglists '([itable] [ktable])}
  [table]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "tableng"
                      [table]
                      *global*)]
    (new out-types ast)))

(s/fdef tableng
  :args (s/alt
         :i (s/cat :table valid-i? )
         ))
(stest/instrument `tableng)

(defn tableng:i
  {:arglists '([itable])}
  [table]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "tableng"
                      [table]
                      *global*)]
    (new out-types ast)))

(s/fdef tableng:i
  :args (s/cat :table valid-i? ))
(stest/instrument `tableng:i)

(defn tableng:k
  {:arglists '([ktable])}
  [table]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "tableng"
                      [table]
                      *global*)]
    (new out-types ast)))

(s/fdef tableng:k
  :args (s/cat :table valid-kr? ))
(stest/instrument `tableng:k)

(defn wrap
  {:arglists '([asig klow khigh] [isig ilow ihigh] [ksig klow khigh])}
  [sig low high]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "wrap"
                      [sig low high]
                      *global*)]
    (new out-types ast)))

(s/fdef wrap
  :args (s/alt
         :akk (s/cat :sig valid-ar? :low valid-kr? :high valid-kr? )
         ))
(stest/instrument `wrap)

(defn wrap:a
  {:arglists '([asig klow khigh])}
  [sig low high]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "wrap"
                      [sig low high]
                      *global*)]
    (new out-types ast)))

(s/fdef wrap:a
  :args (s/cat :sig valid-ar? :low valid-kr? :high valid-kr? ))
(stest/instrument `wrap:a)

(defn wrap:i
  {:arglists '([isig ilow ihigh])}
  [sig low high]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "wrap"
                      [sig low high]
                      *global*)]
    (new out-types ast)))

(s/fdef wrap:i
  :args (s/cat :sig valid-i? :low valid-i? :high valid-i? ))
(stest/instrument `wrap:i)

(defn wrap:k
  {:arglists '([ksig klow khigh])}
  [sig low high]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "wrap"
                      [sig low high]
                      *global*)]
    (new out-types ast)))

(s/fdef wrap:k
  :args (s/cat :sig valid-kr? :low valid-kr? :high valid-kr? ))
(stest/instrument `wrap:k)

(defn s16b14
  {:arglists '([ichan ictlno_msb2 ictlno_lsb3 imin4 imax5 initvalue6 ifn7 ictlno_msb8 ictlno_lsb9 imin10 imax11 initvalue12 ifn13 ifn14 ifn15 ifn16 ifn17 ifn18 ifn19 ifn20 ifn21 ifn22 ifn23 ifn24 ifn25 ifn26 ifn27 ifn28 ifn29 ifn30 ifn31 ifn32 ifn33 ifn34 ifn35 ifn36 ifn37 ifn38 ifn39 ifn40 ifn41 ifn42 ifn43 ifn44 ifn45 ifn46 ifn47 ifn48 ifn49 ifn50 ifn51 ifn52 ifn53 ifn54 ifn55 ifn56 ifn57 ifn58 ifn59 ifn60 ifn61 ifn62 ifn63 ifn64 ifn65 ifn66 ifn67 ifn68 ifn69 ifn70 ifn71 ifn72 ifn73 ifn74 ifn75 ifn76 ifn77 ifn78 ifn79 ifn80 ifn81] [ichan ictlno_msb2 ictlno_lsb3 imin4 imax5 initvalue6 ifn7 ictlno_msb8 ictlno_lsb9 imin10 imax11 initvalue12 ifn13 ifn14 ifn15 ifn16 ifn17 ifn18 ifn19 ifn20 ifn21 ifn22 ifn23 ifn24 ifn25 ifn26 ifn27 ifn28 ifn29 ifn30 ifn31 ifn32 ifn33 ifn34 ifn35 ifn36 ifn37 ifn38 ifn39 ifn40 ifn41 ifn42 ifn43 ifn44 ifn45 ifn46 ifn47 ifn48 ifn49 ifn50 ifn51 ifn52 ifn53 ifn54 ifn55 ifn56 ifn57 ifn58 ifn59 ifn60 ifn61 ifn62 ifn63 ifn64 ifn65 ifn66 ifn67 ifn68 ifn69 ifn70 ifn71 ifn72 ifn73 ifn74 ifn75 ifn76 ifn77 ifn78 ifn79 ifn80 ifn81 ifn82 ifn83 ifn84 ifn85 ifn86 ifn87 ifn88 ifn89 ifn90 ifn91 ifn92 ifn93 ifn94 ifn95 ifn96 ifn97])}
  [chan ctlno_msb2 ctlno_lsb3 min4 max5 nitvalue6 fn7 ctlno_msb8 ctlno_lsb9 min10 max11 nitvalue12 fn13 fn14 fn15 fn16 fn17 fn18 fn19 fn20 fn21 fn22 fn23 fn24 fn25 fn26 fn27 fn28 fn29 fn30 fn31 fn32 fn33 fn34 fn35 fn36 fn37 fn38 fn39 fn40 fn41 fn42 fn43 fn44 fn45 fn46 fn47 fn48 fn49 fn50 fn51 fn52 fn53 fn54 fn55 fn56 fn57 fn58 fn59 fn60 fn61 fn62 fn63 fn64 fn65 fn66 fn67 fn68 fn69 fn70 fn71 fn72 fn73 fn74 fn75 fn76 fn77 fn78 fn79 fn80 fn81]
  (let [out-types-quoted '[Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable]
        out-types [Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable Variable]
        ast (ast-node out-types-quoted
                      "s16b14"
                      [chan ctlno_msb2 ctlno_lsb3 min4 max5 nitvalue6 fn7 ctlno_msb8 ctlno_lsb9 min10 max11 nitvalue12 fn13 fn14 fn15 fn16 fn17 fn18 fn19 fn20 fn21 fn22 fn23 fn24 fn25 fn26 fn27 fn28 fn29 fn30 fn31 fn32 fn33 fn34 fn35 fn36 fn37 fn38 fn39 fn40 fn41 fn42 fn43 fn44 fn45 fn46 fn47 fn48 fn49 fn50 fn51 fn52 fn53 fn54 fn55 fn56 fn57 fn58 fn59 fn60 fn61 fn62 fn63 fn64 fn65 fn66 fn67 fn68 fn69 fn70 fn71 fn72 fn73 fn74 fn75 fn76 fn77 fn78 fn79 fn80 fn81]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef s16b14
  :args (s/alt
         :iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii (s/cat :chan valid-i? :ctlno_msb2 valid-i? :ctlno_lsb3 valid-i? :min4 valid-i? :max5 valid-i? :nitvalue6 valid-i? :fn7 valid-i? :ctlno_msb8 valid-i? :ctlno_lsb9 valid-i? :min10 valid-i? :max11 valid-i? :nitvalue12 valid-i? :fn13 valid-i? :fn14 valid-i? :fn15 valid-i? :fn16 valid-i? :fn17 valid-i? :fn18 valid-i? :fn19 valid-i? :fn20 valid-i? :fn21 valid-i? :fn22 valid-i? :fn23 valid-i? :fn24 valid-i? :fn25 valid-i? :fn26 valid-i? :fn27 valid-i? :fn28 valid-i? :fn29 valid-i? :fn30 valid-i? :fn31 valid-i? :fn32 valid-i? :fn33 valid-i? :fn34 valid-i? :fn35 valid-i? :fn36 valid-i? :fn37 valid-i? :fn38 valid-i? :fn39 valid-i? :fn40 valid-i? :fn41 valid-i? :fn42 valid-i? :fn43 valid-i? :fn44 valid-i? :fn45 valid-i? :fn46 valid-i? :fn47 valid-i? :fn48 valid-i? :fn49 valid-i? :fn50 valid-i? :fn51 valid-i? :fn52 valid-i? :fn53 valid-i? :fn54 valid-i? :fn55 valid-i? :fn56 valid-i? :fn57 valid-i? :fn58 valid-i? :fn59 valid-i? :fn60 valid-i? :fn61 valid-i? :fn62 valid-i? :fn63 valid-i? :fn64 valid-i? :fn65 valid-i? :fn66 valid-i? :fn67 valid-i? :fn68 valid-i? :fn69 valid-i? :fn70 valid-i? :fn71 valid-i? :fn72 valid-i? :fn73 valid-i? :fn74 valid-i? :fn75 valid-i? :fn76 valid-i? :fn77 valid-i? :fn78 valid-i? :fn79 valid-i? :fn80 valid-i? :fn81 valid-i? )
         ))
(stest/instrument `s16b14)

(defn tone
  {:arglists '([asig ahp & iskip*] [asig khp & iskip*])}
  [sig hp & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tone"
                      [sig hp skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef tone
  :args (s/alt
         :aai (s/cat :sig valid-ar? :hp valid-ar? :skip* valid-i?* )
         ))
(stest/instrument `tone)

(defn tone:a
  {:arglists '([asig ahp & iskip*] [asig khp & iskip*])}
  [sig hp & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tone"
                      [sig hp skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef tone:a
  :args (s/alt
         :aai (s/cat :sig valid-ar? :hp valid-ar? :skip* valid-i?* )
         ))
(stest/instrument `tone:a)

(defn tableshufflei
  {:arglists '([itablenum])}
  [tablenum]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "tableshufflei"
                      [tablenum]
                      *global*)]
    (new out-types ast)))

(s/fdef tableshufflei
  :args (s/cat :tablenum valid-i? ))
(stest/instrument `tableshufflei)

(defn prepiano
  {:arglists '([ifreq iNS iD iK iT5 iB kbcl kbcr imass ihvfreq iinit ipos ivel isfreq isspread & irattles* irubbers*])}
  [freq NS D K T5 B bcl bcr mass hvfreq init pos vel sfreq sspread & [ rattles* rubbers* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "prepiano"
                      [freq NS D K T5 B bcl bcr mass hvfreq init pos vel sfreq sspread rattles* rubbers*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef prepiano
  :args (s/cat :freq valid-i? :NS valid-i? :D valid-i? :K valid-i? :T5 valid-i? :B valid-i? :bcl valid-kr? :bcr valid-kr? :mass valid-i? :hvfreq valid-i? :init valid-i? :pos valid-i? :vel valid-i? :sfreq valid-i? :sspread valid-i? :rattles* valid-i?* :rubbers* valid-i?* ))
(stest/instrument `prepiano)

(defn ptable
  {:arglists '([xindex itable & ixmode* ixoff* iwrap*] [iindex itable & ixmode* ixoff* iwrap*] [xindex itable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "ptable"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef ptable
  :args (s/alt
         :xiiii (s/cat :index valid-x? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* )
         ))
(stest/instrument `ptable)

(defn ptable:a
  {:arglists '([xindex itable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "ptable"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef ptable:a
  :args (s/cat :index valid-x? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* ))
(stest/instrument `ptable:a)

(defn ptable:i
  {:arglists '([iindex itable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ptable"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef ptable:i
  :args (s/cat :index valid-i? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* ))
(stest/instrument `ptable:i)

(defn ptable:k
  {:arglists '([xindex itable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "ptable"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef ptable:k
  :args (s/cat :index valid-x? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* ))
(stest/instrument `ptable:k)

(defn zdf_1pole_mode
  {:arglists '([ain xcenter-frequency & istor*])}
  [in center-frequency & [ stor* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "zdf_1pole_mode"
                      [in center-frequency stor*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef zdf_1pole_mode
  :args (s/cat :in valid-ar? :center-frequency valid-x? :stor* valid-i?* ))
(stest/instrument `zdf_1pole_mode)

(defn tabmorphi
  {:arglists '([kindex kweightpoint ktabnum3 ktabnum4 & ifn1* ifn2* ifn3* ifn4* ifnN5* ifnN6* ifnN7* ifnN8* ifnN9* ifnN10* ifnN11* ifnN12* ifnN13* ifnN14* ifnN15* ifnN16*])}
  [index weightpoint tabnum3 tabnum4 & [ fn1* fn2* fn3* fn4* fnN5* fnN6* fnN7* fnN8* fnN9* fnN10* fnN11* fnN12* fnN13* fnN14* fnN15* fnN16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "tabmorphi"
                      [index weightpoint tabnum3 tabnum4 fn1* fn2* fn3* fn4* fnN5* fnN6* fnN7* fnN8* fnN9* fnN10* fnN11* fnN12* fnN13* fnN14* fnN15* fnN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef tabmorphi
  :args (s/cat :index valid-kr? :weightpoint valid-kr? :tabnum3 valid-kr? :tabnum4 valid-kr? :fn1* valid-i?* :fn2* valid-i?* :fn3* valid-i?* :fn4* valid-i?* :fnN5* valid-i?* :fnN6* valid-i?* :fnN7* valid-i?* :fnN8* valid-i?* :fnN9* valid-i?* :fnN10* valid-i?* :fnN11* valid-i?* :fnN12* valid-i?* :fnN13* valid-i?* :fnN14* valid-i?* :fnN15* valid-i?* :fnN16* valid-i?* ))
(stest/instrument `tabmorphi)

(defn tabmorphi:k
  {:arglists '([kindex kweightpoint ktabnum3 ktabnum4 & ifn1* ifn2* ifn3* ifn4* ifnN5* ifnN6* ifnN7* ifnN8* ifnN9* ifnN10* ifnN11* ifnN12* ifnN13* ifnN14* ifnN15* ifnN16*])}
  [index weightpoint tabnum3 tabnum4 & [ fn1* fn2* fn3* fn4* fnN5* fnN6* fnN7* fnN8* fnN9* fnN10* fnN11* fnN12* fnN13* fnN14* fnN15* fnN16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "tabmorphi"
                      [index weightpoint tabnum3 tabnum4 fn1* fn2* fn3* fn4* fnN5* fnN6* fnN7* fnN8* fnN9* fnN10* fnN11* fnN12* fnN13* fnN14* fnN15* fnN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef tabmorphi:k
  :args (s/cat :index valid-kr? :weightpoint valid-kr? :tabnum3 valid-kr? :tabnum4 valid-kr? :fn1* valid-i?* :fn2* valid-i?* :fn3* valid-i?* :fn4* valid-i?* :fnN5* valid-i?* :fnN6* valid-i?* :fnN7* valid-i?* :fnN8* valid-i?* :fnN9* valid-i?* :fnN10* valid-i?* :fnN11* valid-i?* :fnN12* valid-i?* :fnN13* valid-i?* :fnN14* valid-i?* :fnN15* valid-i?* :fnN16* valid-i?* ))
(stest/instrument `tabmorphi:k)

(defn loscilx
  {:arglists '([xamp kcps itable & iwsize* ibas* istrt* imod* ibeg* iend*])}
  [amp cps table & [ wsize* bas* strt* mod* beg* end* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "loscilx"
                      [amp cps table wsize* bas* strt* mod* beg* end*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef loscilx
  :args (s/cat :amp valid-x? :cps valid-kr? :table valid-i? :wsize* valid-i?* :bas* valid-i?* :strt* valid-i?* :mod* valid-i?* :beg* valid-i?* :end* valid-i?* ))
(stest/instrument `loscilx)

(defn rnd31
  {:arglists '([kscale krpow & iseed*] [iscale irpow & iseed*] [kscale krpow & iseed*])}
  [scale rpow & [ seed* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "rnd31"
                      [scale rpow seed*]
                      *global*)]
    (new out-types ast)))

(s/fdef rnd31
  :args (s/alt
         :kki (s/cat :scale valid-kr? :rpow valid-kr? :seed* valid-i?* )
         ))
(stest/instrument `rnd31)

(defn rnd31:a
  {:arglists '([kscale krpow & iseed*])}
  [scale rpow & [ seed* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "rnd31"
                      [scale rpow seed*]
                      *global*)]
    (new out-types ast)))

(s/fdef rnd31:a
  :args (s/cat :scale valid-kr? :rpow valid-kr? :seed* valid-i?* ))
(stest/instrument `rnd31:a)

(defn rnd31:i
  {:arglists '([iscale irpow & iseed*])}
  [scale rpow & [ seed* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "rnd31"
                      [scale rpow seed*]
                      *global*)]
    (new out-types ast)))

(s/fdef rnd31:i
  :args (s/cat :scale valid-i? :rpow valid-i? :seed* valid-i?* ))
(stest/instrument `rnd31:i)

(defn rnd31:k
  {:arglists '([kscale krpow & iseed*])}
  [scale rpow & [ seed* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "rnd31"
                      [scale rpow seed*]
                      *global*)]
    (new out-types ast)))

(s/fdef rnd31:k
  :args (s/cat :scale valid-kr? :rpow valid-kr? :seed* valid-i?* ))
(stest/instrument `rnd31:k)

(defn duserrnd
  {:arglists '([ktableNum] [itableNum] [ktableNum])}
  [tableNum]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "duserrnd"
                      [tableNum]
                      *global*)]
    (new out-types ast)))

(s/fdef duserrnd
  :args (s/alt
         :k (s/cat :tableNum valid-kr? )
         ))
(stest/instrument `duserrnd)

(defn duserrnd:a
  {:arglists '([ktableNum])}
  [tableNum]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "duserrnd"
                      [tableNum]
                      *global*)]
    (new out-types ast)))

(s/fdef duserrnd:a
  :args (s/cat :tableNum valid-kr? ))
(stest/instrument `duserrnd:a)

(defn duserrnd:i
  {:arglists '([itableNum])}
  [tableNum]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "duserrnd"
                      [tableNum]
                      *global*)]
    (new out-types ast)))

(s/fdef duserrnd:i
  :args (s/cat :tableNum valid-i? ))
(stest/instrument `duserrnd:i)

(defn duserrnd:k
  {:arglists '([ktableNum])}
  [tableNum]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "duserrnd"
                      [tableNum]
                      *global*)]
    (new out-types ast)))

(s/fdef duserrnd:k
  :args (s/cat :tableNum valid-kr? ))
(stest/instrument `duserrnd:k)

(defn outz
  {:arglists '([ksig1])}
  [sig1]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outz"
                      [sig1]
                      *global*)]
    (new out-types ast)))

(s/fdef outz
  :args (s/cat :sig1 valid-kr? ))
(stest/instrument `outz)

(defn pvsifd
  {:arglists '([ain ifftsize ihopsize iwintype & iscal*])}
  [in fftsize hopsize wintype & [ scal* ]]
  (let [out-types-quoted '[FrequencySignal FrequencySignal]
        out-types [FrequencySignal FrequencySignal]
        ast (ast-node out-types-quoted
                      "pvsifd"
                      [in fftsize hopsize wintype scal*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef pvsifd
  :args (s/cat :in valid-ar? :fftsize valid-i? :hopsize valid-i? :wintype valid-i? :scal* valid-i?* ))
(stest/instrument `pvsifd)

(defn setksmps
  {:arglists '([iksmps])}
  [ksmps]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "setksmps"
                      [ksmps]
                      *global*)]
    (new out-types ast)))

(s/fdef setksmps
  :args (s/cat :ksmps valid-i? ))
(stest/instrument `setksmps)

(defn mode
  {:arglists '([ain xfreq xQ & iskip*])}
  [in freq Q & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "mode"
                      [in freq Q skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef mode
  :args (s/cat :in valid-ar? :freq valid-x? :Q valid-x? :skip* valid-i?* ))
(stest/instrument `mode)

(defn mode:a
  {:arglists '([ain xfreq xQ & iskip*])}
  [in freq Q & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "mode"
                      [in freq Q skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef mode:a
  :args (s/cat :in valid-ar? :freq valid-x? :Q valid-x? :skip* valid-i?* ))
(stest/instrument `mode:a)

(defn ftsavek
  {:arglists '([Sfilename ktrig iflag & ifn1* ifn2* ifn3* ifn4* ifn5* ifn6* ifn7* ifn8* ifn9* ifn10* ifn11* ifn12* ifn13* ifn14* ifn15* ifn16*] [ifilename ktrig iflag & ifn1* ifn2* ifn3* ifn4* ifn5* ifn6* ifn7* ifn8* ifn9* ifn10* ifn11* ifn12* ifn13* ifn14* ifn15* ifn16*])}
  [filename trig flag & [ fn1* fn2* fn3* fn4* fn5* fn6* fn7* fn8* fn9* fn10* fn11* fn12* fn13* fn14* fn15* fn16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "ftsavek"
                      [filename trig flag fn1* fn2* fn3* fn4* fn5* fn6* fn7* fn8* fn9* fn10* fn11* fn12* fn13* fn14* fn15* fn16*]
                      *global*)]
    (new out-types ast)))

(s/fdef ftsavek
  :args (s/alt
         :Skiiiiiiiiiiiiiiiii (s/cat :filename valid-S? :trig valid-kr? :flag valid-i? :fn1* valid-i?* :fn2* valid-i?* :fn3* valid-i?* :fn4* valid-i?* :fn5* valid-i?* :fn6* valid-i?* :fn7* valid-i?* :fn8* valid-i?* :fn9* valid-i?* :fn10* valid-i?* :fn11* valid-i?* :fn12* valid-i?* :fn13* valid-i?* :fn14* valid-i?* :fn15* valid-i?* :fn16* valid-i?* )
         ))
(stest/instrument `ftsavek)

(defn linen
  {:arglists '([aamp irise idur idec] [kamp irise idur idec] [kamp irise idur idec])}
  [amp rise dur dec]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "linen"
                      [amp rise dur dec]
                      *global*)]
    (new out-types ast)))

(s/fdef linen
  :args (s/alt
         :aiii (s/cat :amp valid-ar? :rise valid-i? :dur valid-i? :dec valid-i? )
         ))
(stest/instrument `linen)

(defn linen:a
  {:arglists '([aamp irise idur idec] [kamp irise idur idec])}
  [amp rise dur dec]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "linen"
                      [amp rise dur dec]
                      *global*)]
    (new out-types ast)))

(s/fdef linen:a
  :args (s/alt
         :aiii (s/cat :amp valid-ar? :rise valid-i? :dur valid-i? :dec valid-i? )
         ))
(stest/instrument `linen:a)

(defn linen:k
  {:arglists '([kamp irise idur idec])}
  [amp rise dur dec]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "linen"
                      [amp rise dur dec]
                      *global*)]
    (new out-types ast)))

(s/fdef linen:k
  :args (s/cat :amp valid-kr? :rise valid-i? :dur valid-i? :dec valid-i? ))
(stest/instrument `linen:k)

(defn phasorbnk
  {:arglists '([xcps kindex icnt & iphase*] [xcps kindex icnt & iphase*])}
  [cps index cnt & [ phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "phasorbnk"
                      [cps index cnt phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef phasorbnk
  :args (s/alt
         :xkii (s/cat :cps valid-x? :index valid-kr? :cnt valid-i? :phase* valid-i?* )
         ))
(stest/instrument `phasorbnk)

(defn phasorbnk:a
  {:arglists '([xcps kindex icnt & iphase*])}
  [cps index cnt & [ phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "phasorbnk"
                      [cps index cnt phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef phasorbnk:a
  :args (s/cat :cps valid-x? :index valid-kr? :cnt valid-i? :phase* valid-i?* ))
(stest/instrument `phasorbnk:a)

(defn phasorbnk:k
  {:arglists '([xcps kindex icnt & iphase*])}
  [cps index cnt & [ phase* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "phasorbnk"
                      [cps index cnt phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef phasorbnk:k
  :args (s/cat :cps valid-x? :index valid-kr? :cnt valid-i? :phase* valid-i?* ))
(stest/instrument `phasorbnk:k)

(defn pvscale
  {:arglists '([fsigin kscal & kkeepform* kgain* kcoefs*] [fsigin xscal & kkeepform* kgain* kcoefs*])}
  [sigin scal & [ keepform* gain* coefs* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvscale"
                      [sigin scal keepform* gain* coefs*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvscale
  :args (s/alt
         :fkkkk (s/cat :sigin valid-f? :scal valid-kr? :keepform* valid-kr?* :gain* valid-kr?* :coefs* valid-kr?* )
         ))
(stest/instrument `pvscale)

(defn pvscale:f
  {:arglists '([fsigin kscal & kkeepform* kgain* kcoefs*] [fsigin xscal & kkeepform* kgain* kcoefs*])}
  [sigin scal & [ keepform* gain* coefs* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvscale"
                      [sigin scal keepform* gain* coefs*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvscale:f
  :args (s/alt
         :fkkkk (s/cat :sigin valid-f? :scal valid-kr? :keepform* valid-kr?* :gain* valid-kr?* :coefs* valid-kr?* )
         ))
(stest/instrument `pvscale:f)

(defn product
  {:arglists '([& asignalorarray1* asig2* asig3* asig4* asig5* asig6* asig7* asig8* asig9* asig10* asig11* asig12* asig13* asig14* asig15* asig16* asig17* asig18* asig19* asig20* asig21* asig22* asig23* asig24* asig25* asig26* asig27* asig28* asig29* asig30* asig31* asig32*] [isignalorarrayArr] [ksignalorarrayArr])}
  [& [ signalorarray1* sig2* sig3* sig4* sig5* sig6* sig7* sig8* sig9* sig10* sig11* sig12* sig13* sig14* sig15* sig16* sig17* sig18* sig19* sig20* sig21* sig22* sig23* sig24* sig25* sig26* sig27* sig28* sig29* sig30* sig31* sig32* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "product"
                      [signalorarray1* sig2* sig3* sig4* sig5* sig6* sig7* sig8* sig9* sig10* sig11* sig12* sig13* sig14* sig15* sig16* sig17* sig18* sig19* sig20* sig21* sig22* sig23* sig24* sig25* sig26* sig27* sig28* sig29* sig30* sig31* sig32*]
                      *global*)]
    (new out-types ast)))

(s/fdef product
  :args (s/alt
         :aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa (s/cat :signalorarray1* valid-ar?* :sig2* valid-ar?* :sig3* valid-ar?* :sig4* valid-ar?* :sig5* valid-ar?* :sig6* valid-ar?* :sig7* valid-ar?* :sig8* valid-ar?* :sig9* valid-ar?* :sig10* valid-ar?* :sig11* valid-ar?* :sig12* valid-ar?* :sig13* valid-ar?* :sig14* valid-ar?* :sig15* valid-ar?* :sig16* valid-ar?* :sig17* valid-ar?* :sig18* valid-ar?* :sig19* valid-ar?* :sig20* valid-ar?* :sig21* valid-ar?* :sig22* valid-ar?* :sig23* valid-ar?* :sig24* valid-ar?* :sig25* valid-ar?* :sig26* valid-ar?* :sig27* valid-ar?* :sig28* valid-ar?* :sig29* valid-ar?* :sig30* valid-ar?* :sig31* valid-ar?* :sig32* valid-ar?* )
         ))
(stest/instrument `product)

(defn product:a
  {:arglists '([& asignalorarray1* asig2* asig3* asig4* asig5* asig6* asig7* asig8* asig9* asig10* asig11* asig12* asig13* asig14* asig15* asig16* asig17* asig18* asig19* asig20* asig21* asig22* asig23* asig24* asig25* asig26* asig27* asig28* asig29* asig30* asig31* asig32*])}
  [& [ signalorarray1* sig2* sig3* sig4* sig5* sig6* sig7* sig8* sig9* sig10* sig11* sig12* sig13* sig14* sig15* sig16* sig17* sig18* sig19* sig20* sig21* sig22* sig23* sig24* sig25* sig26* sig27* sig28* sig29* sig30* sig31* sig32* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "product"
                      [signalorarray1* sig2* sig3* sig4* sig5* sig6* sig7* sig8* sig9* sig10* sig11* sig12* sig13* sig14* sig15* sig16* sig17* sig18* sig19* sig20* sig21* sig22* sig23* sig24* sig25* sig26* sig27* sig28* sig29* sig30* sig31* sig32*]
                      *global*)]
    (new out-types ast)))

(s/fdef product:a
  :args (s/cat :signalorarray1* valid-ar?* :sig2* valid-ar?* :sig3* valid-ar?* :sig4* valid-ar?* :sig5* valid-ar?* :sig6* valid-ar?* :sig7* valid-ar?* :sig8* valid-ar?* :sig9* valid-ar?* :sig10* valid-ar?* :sig11* valid-ar?* :sig12* valid-ar?* :sig13* valid-ar?* :sig14* valid-ar?* :sig15* valid-ar?* :sig16* valid-ar?* :sig17* valid-ar?* :sig18* valid-ar?* :sig19* valid-ar?* :sig20* valid-ar?* :sig21* valid-ar?* :sig22* valid-ar?* :sig23* valid-ar?* :sig24* valid-ar?* :sig25* valid-ar?* :sig26* valid-ar?* :sig27* valid-ar?* :sig28* valid-ar?* :sig29* valid-ar?* :sig30* valid-ar?* :sig31* valid-ar?* :sig32* valid-ar?* ))
(stest/instrument `product:a)

(defn product:i
  {:arglists '([isignalorarrayArr])}
  [signalorarray]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "product"
                      [signalorarray]
                      *global*)]
    (new out-types ast)))

(s/fdef product:i
  :args (s/cat :signalorarray valid-iArr? ))
(stest/instrument `product:i)

(defn product:k
  {:arglists '([ksignalorarrayArr])}
  [signalorarray]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "product"
                      [signalorarray]
                      *global*)]
    (new out-types ast)))

(s/fdef product:k
  :args (s/cat :signalorarray valid-kArr? ))
(stest/instrument `product:k)

(defn turnon
  {:arglists '([Sinsnum & itime*] [iinsnum & itime*])}
  [insnum & [ time* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "turnon"
                      [insnum time*]
                      *global*)]
    (new out-types ast)))

(s/fdef turnon
  :args (s/alt
         :Si (s/cat :insnum valid-S? :time* valid-i?* )
         ))
(stest/instrument `turnon)

(defn strcatk
  {:arglists '([Ssrc1 Ssrc2])}
  [src1 src2]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "strcatk"
                      [src1 src2]
                      *global*)]
    (new out-types ast)))

(s/fdef strcatk
  :args (s/cat :src1 valid-S? :src2 valid-S? ))
(stest/instrument `strcatk)

(defn strcatk:S
  {:arglists '([Ssrc1 Ssrc2])}
  [src1 src2]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "strcatk"
                      [src1 src2]
                      *global*)]
    (new out-types ast)))

(s/fdef strcatk:S
  :args (s/cat :src1 valid-S? :src2 valid-S? ))
(stest/instrument `strcatk:S)

(defn scantable
  {:arglists '([kamp kpch ipos imass istiff idamp ivel])}
  [amp pch pos mass stiff damp vel]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "scantable"
                      [amp pch pos mass stiff damp vel]
                      *global*)]
    (new out-types ast)))

(s/fdef scantable
  :args (s/cat :amp valid-kr? :pch valid-kr? :pos valid-i? :mass valid-i? :stiff valid-i? :damp valid-i? :vel valid-i? ))
(stest/instrument `scantable)

(defn scantable:a
  {:arglists '([kamp kpch ipos imass istiff idamp ivel])}
  [amp pch pos mass stiff damp vel]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "scantable"
                      [amp pch pos mass stiff damp vel]
                      *global*)]
    (new out-types ast)))

(s/fdef scantable:a
  :args (s/cat :amp valid-kr? :pch valid-kr? :pos valid-i? :mass valid-i? :stiff valid-i? :damp valid-i? :vel valid-i? ))
(stest/instrument `scantable:a)

(defn vaget
  {:arglists '([kindex avar])}
  [index var]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "vaget"
                      [index var]
                      *global*)]
    (new out-types ast)))

(s/fdef vaget
  :args (s/cat :index valid-kr? :var valid-ar? ))
(stest/instrument `vaget)

(defn vaget:k
  {:arglists '([kindex avar])}
  [index var]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "vaget"
                      [index var]
                      *global*)]
    (new out-types ast)))

(s/fdef vaget:k
  :args (s/cat :index valid-kr? :var valid-ar? ))
(stest/instrument `vaget:k)

(defn schedwhen
  {:arglists '([ktrigger Sinsname kwhen kdur & ip1* ip2* ip3* ip4* ip5* ip6* ip7* ip8* ip9* ip10* ip11* ip12* ip13* ip14* ip15* ip16*] [ktrigger kinsname kwhen kdur & ip1* ip2* ip3* ip4* ip5* ip6* ip7* ip8* ip9* ip10* ip11* ip12* ip13* ip14* ip15* ip16*])}
  [trigger insname when dur & [ p1* p2* p3* p4* p5* p6* p7* p8* p9* p10* p11* p12* p13* p14* p15* p16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "schedwhen"
                      [trigger insname when dur p1* p2* p3* p4* p5* p6* p7* p8* p9* p10* p11* p12* p13* p14* p15* p16*]
                      *global*)]
    (new out-types ast)))

(s/fdef schedwhen
  :args (s/alt
         :kSkkiiiiiiiiiiiiiiii (s/cat :trigger valid-kr? :insname valid-S? :when valid-kr? :dur valid-kr? :p1* valid-i?* :p2* valid-i?* :p3* valid-i?* :p4* valid-i?* :p5* valid-i?* :p6* valid-i?* :p7* valid-i?* :p8* valid-i?* :p9* valid-i?* :p10* valid-i?* :p11* valid-i?* :p12* valid-i?* :p13* valid-i?* :p14* valid-i?* :p15* valid-i?* :p16* valid-i?* )
         ))
(stest/instrument `schedwhen)

(defn resony
  {:arglists '([asig kbf kbandwidth inum ksep & isepmode* iscale* iskip*])}
  [sig bf bandwidth num sep & [ sepmode* scale* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "resony"
                      [sig bf bandwidth num sep sepmode* scale* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef resony
  :args (s/cat :sig valid-ar? :bf valid-kr? :bandwidth valid-kr? :num valid-i? :sep valid-kr? :sepmode* valid-i?* :scale* valid-i?* :skip* valid-i?* ))
(stest/instrument `resony)

(defn resony:a
  {:arglists '([asig kbf kbandwidth inum ksep & isepmode* iscale* iskip*])}
  [sig bf bandwidth num sep & [ sepmode* scale* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "resony"
                      [sig bf bandwidth num sep sepmode* scale* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef resony:a
  :args (s/cat :sig valid-ar? :bf valid-kr? :bandwidth valid-kr? :num valid-i? :sep valid-kr? :sepmode* valid-i?* :scale* valid-i?* :skip* valid-i?* ))
(stest/instrument `resony:a)

(defn outkpb
  {:arglists '([kchn kvalue kmin kmax])}
  [chn value min max]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outkpb"
                      [chn value min max]
                      *global*)]
    (new out-types ast)))

(s/fdef outkpb
  :args (s/cat :chn valid-kr? :value valid-kr? :min valid-kr? :max valid-kr? ))
(stest/instrument `outkpb)

(defn joystick
  {:arglists '([kdevice ktab])}
  [device tab]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "joystick"
                      [device tab]
                      *global*)]
    (new out-types ast)))

(s/fdef joystick
  :args (s/cat :device valid-kr? :tab valid-kr? ))
(stest/instrument `joystick)

(defn joystick:k
  {:arglists '([kdevice ktab])}
  [device tab]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "joystick"
                      [device tab]
                      *global*)]
    (new out-types ast)))

(s/fdef joystick:k
  :args (s/cat :device valid-kr? :tab valid-kr? ))
(stest/instrument `joystick:k)

(defn times
  {:arglists '( )}
  []
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "times"
                      []
                      *global*)]
    (new out-types ast)))


(defn times:i
  {:arglists '()}
  []
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "times"
                      []
                      *global*)]
    (new out-types ast)))


(defn times:k
  {:arglists '()}
  []
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "times"
                      []
                      *global*)]
    (new out-types ast)))


(defn nreverb
  {:arglists '([asig ktime khdif & iskip* inumCombs* ifnCombs* inumAlpas* ifnAlpas*])}
  [sig time hdif & [ skip* numCombs* fnCombs* numAlpas* fnAlpas* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "nreverb"
                      [sig time hdif skip* numCombs* fnCombs* numAlpas* fnAlpas*]
                      *global*)]
    (new out-types ast)))

(s/fdef nreverb
  :args (s/cat :sig valid-ar? :time valid-kr? :hdif valid-kr? :skip* valid-i?* :numCombs* valid-i?* :fnCombs* valid-i?* :numAlpas* valid-i?* :fnAlpas* valid-i?* ))
(stest/instrument `nreverb)

(defn nreverb:a
  {:arglists '([asig ktime khdif & iskip* inumCombs* ifnCombs* inumAlpas* ifnAlpas*])}
  [sig time hdif & [ skip* numCombs* fnCombs* numAlpas* fnAlpas* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "nreverb"
                      [sig time hdif skip* numCombs* fnCombs* numAlpas* fnAlpas*]
                      *global*)]
    (new out-types ast)))

(s/fdef nreverb:a
  :args (s/cat :sig valid-ar? :time valid-kr? :hdif valid-kr? :skip* valid-i?* :numCombs* valid-i?* :fnCombs* valid-i?* :numAlpas* valid-i?* :fnAlpas* valid-i?* ))
(stest/instrument `nreverb:a)

(defn max_k
  {:arglists '([asig ktrig itype])}
  [sig trig type]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "max_k"
                      [sig trig type]
                      *global*)]
    (new out-types ast)))

(s/fdef max_k
  :args (s/cat :sig valid-ar? :trig valid-kr? :type valid-i? ))
(stest/instrument `max_k)

(defn max_k:k
  {:arglists '([asig ktrig itype])}
  [sig trig type]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "max_k"
                      [sig trig type]
                      *global*)]
    (new out-types ast)))

(s/fdef max_k:k
  :args (s/cat :sig valid-ar? :trig valid-kr? :type valid-i? ))
(stest/instrument `max_k:k)

(defn distort1
  {:arglists '([asig kpregain kpostgain kshape4 kshape5 & imode*])}
  [sig pregain postgain shape4 shape5 & [ mode* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "distort1"
                      [sig pregain postgain shape4 shape5 mode*]
                      *global*)]
    (new out-types ast)))

(s/fdef distort1
  :args (s/cat :sig valid-ar? :pregain valid-kr? :postgain valid-kr? :shape4 valid-kr? :shape5 valid-kr? :mode* valid-i?* ))
(stest/instrument `distort1)

(defn distort1:a
  {:arglists '([asig kpregain kpostgain kshape4 kshape5 & imode*])}
  [sig pregain postgain shape4 shape5 & [ mode* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "distort1"
                      [sig pregain postgain shape4 shape5 mode*]
                      *global*)]
    (new out-types ast)))

(s/fdef distort1:a
  :args (s/cat :sig valid-ar? :pregain valid-kr? :postgain valid-kr? :shape4 valid-kr? :shape5 valid-kr? :mode* valid-i?* ))
(stest/instrument `distort1:a)

(defn K35_hpf
  {:arglists '([ain xcenter-frequency xQ & knlp* ksaturation* istor*])}
  [in center-frequency Q & [ nlp* saturation* stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "K35_hpf"
                      [in center-frequency Q nlp* saturation* stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef K35_hpf
  :args (s/cat :in valid-ar? :center-frequency valid-x? :Q valid-x? :nlp* valid-kr?* :saturation* valid-kr?* :stor* valid-i?* ))
(stest/instrument `K35_hpf)

(defn K35_hpf:a
  {:arglists '([ain xcenter-frequency xQ & knlp* ksaturation* istor*])}
  [in center-frequency Q & [ nlp* saturation* stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "K35_hpf"
                      [in center-frequency Q nlp* saturation* stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef K35_hpf:a
  :args (s/cat :in valid-ar? :center-frequency valid-x? :Q valid-x? :nlp* valid-kr?* :saturation* valid-kr?* :stor* valid-i?* ))
(stest/instrument `K35_hpf:a)

(defn prints
  {:arglists '([Sstring & xval1* xval2* xval3* xval4* xval5* xval6* xval7* xval8* xval9* xval10* xval11* xval12* xval13* xval14* xval15* xval16*] [istring & xval1* xval2* xval3* xval4* xval5* xval6* xval7* xval8* xval9* xval10* xval11* xval12* xval13* xval14* xval15* xval16*])}
  [string & [ val1* val2* val3* val4* val5* val6* val7* val8* val9* val10* val11* val12* val13* val14* val15* val16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "prints"
                      [string val1* val2* val3* val4* val5* val6* val7* val8* val9* val10* val11* val12* val13* val14* val15* val16*]
                      *global*)]
    (new out-types ast)))

(s/fdef prints
  :args (s/alt
         :Sxxxxxxxxxxxxxxxx (s/cat :string valid-S? :val1* valid-x?* :val2* valid-x?* :val3* valid-x?* :val4* valid-x?* :val5* valid-x?* :val6* valid-x?* :val7* valid-x?* :val8* valid-x?* :val9* valid-x?* :val10* valid-x?* :val11* valid-x?* :val12* valid-x?* :val13* valid-x?* :val14* valid-x?* :val15* valid-x?* :val16* valid-x?* )
         ))
(stest/instrument `prints)

(defn oscil1
  {:arglists '([idel kamp idur & itable*])}
  [del amp dur & [ table* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "oscil1"
                      [del amp dur table*]
                      *global*)]
    (new out-types ast)))

(s/fdef oscil1
  :args (s/cat :del valid-i? :amp valid-kr? :dur valid-i? :table* valid-i?* ))
(stest/instrument `oscil1)

(defn oscil1:k
  {:arglists '([idel kamp idur & itable*])}
  [del amp dur & [ table* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "oscil1"
                      [del amp dur table*]
                      *global*)]
    (new out-types ast)))

(s/fdef oscil1:k
  :args (s/cat :del valid-i? :amp valid-kr? :dur valid-i? :table* valid-i?* ))
(stest/instrument `oscil1:k)

(defn upsamp
  {:arglists '([ksig])}
  [sig]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "upsamp"
                      [sig]
                      *global*)]
    (new out-types ast)))

(s/fdef upsamp
  :args (s/cat :sig valid-kr? ))
(stest/instrument `upsamp)

(defn upsamp:a
  {:arglists '([ksig])}
  [sig]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "upsamp"
                      [sig]
                      *global*)]
    (new out-types ast)))

(s/fdef upsamp:a
  :args (s/cat :sig valid-kr? ))
(stest/instrument `upsamp:a)

(defn portk
  {:arglists '([ksig khtim & isig*])}
  [sig htim & [ sig* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "portk"
                      [sig htim sig*]
                      *global*)]
    (new out-types ast)))

(s/fdef portk
  :args (s/cat :sig valid-kr? :htim valid-kr? :sig* valid-i?* ))
(stest/instrument `portk)

(defn portk:k
  {:arglists '([ksig khtim & isig*])}
  [sig htim & [ sig* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "portk"
                      [sig htim sig*]
                      *global*)]
    (new out-types ast)))

(s/fdef portk:k
  :args (s/cat :sig valid-kr? :htim valid-kr? :sig* valid-i?* ))
(stest/instrument `portk:k)

(defn reverb2
  {:arglists '([asig ktime khdif & iskip* inumCombs* ifnCombs* inumAlpas* ifnAlpas*])}
  [sig time hdif & [ skip* numCombs* fnCombs* numAlpas* fnAlpas* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "reverb2"
                      [sig time hdif skip* numCombs* fnCombs* numAlpas* fnAlpas*]
                      *global*)]
    (new out-types ast)))

(s/fdef reverb2
  :args (s/cat :sig valid-ar? :time valid-kr? :hdif valid-kr? :skip* valid-i?* :numCombs* valid-i?* :fnCombs* valid-i?* :numAlpas* valid-i?* :fnAlpas* valid-i?* ))
(stest/instrument `reverb2)

(defn reverb2:a
  {:arglists '([asig ktime khdif & iskip* inumCombs* ifnCombs* inumAlpas* ifnAlpas*])}
  [sig time hdif & [ skip* numCombs* fnCombs* numAlpas* fnAlpas* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "reverb2"
                      [sig time hdif skip* numCombs* fnCombs* numAlpas* fnAlpas*]
                      *global*)]
    (new out-types ast)))

(s/fdef reverb2:a
  :args (s/cat :sig valid-ar? :time valid-kr? :hdif valid-kr? :skip* valid-i?* :numCombs* valid-i?* :fnCombs* valid-i?* :numAlpas* valid-i?* :fnAlpas* valid-i?* ))
(stest/instrument `reverb2:a)

(defn schedule
  {:arglists '([Sinsname iwhen idur & xp1* xp2* xp3* xp4* xp5* xp6* xp7* xp8* xp9* xp10* xp11* xp12* xp13* xp14* xp15* xp16*] [Sinsname iwhen idur & ip1* ip2* ip3* ip4* ip5* ip6* ip7* ip8* ip9* ip10* ip11* ip12* ip13* ip14* ip15* ip16*] [iinsname iwhen idur & xp1* xp2* xp3* xp4* xp5* xp6* xp7* xp8* xp9* xp10* xp11* xp12* xp13* xp14* xp15* xp16*] [iinsname iwhen idur & ip1* ip2* ip3* ip4* ip5* ip6* ip7* ip8* ip9* ip10* ip11* ip12* ip13* ip14* ip15* ip16*])}
  [insname when dur & [ p1* p2* p3* p4* p5* p6* p7* p8* p9* p10* p11* p12* p13* p14* p15* p16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "schedule"
                      [insname when dur p1* p2* p3* p4* p5* p6* p7* p8* p9* p10* p11* p12* p13* p14* p15* p16*]
                      *global*)]
    (new out-types ast)))

(s/fdef schedule
  :args (s/alt
         :Siixxxxxxxxxxxxxxxx (s/cat :insname valid-S? :when valid-i? :dur valid-i? :p1* valid-x?* :p2* valid-x?* :p3* valid-x?* :p4* valid-x?* :p5* valid-x?* :p6* valid-x?* :p7* valid-x?* :p8* valid-x?* :p9* valid-x?* :p10* valid-x?* :p11* valid-x?* :p12* valid-x?* :p13* valid-x?* :p14* valid-x?* :p15* valid-x?* :p16* valid-x?* )
         ))
(stest/instrument `schedule)

(defn dssilist
  {:arglists '()}
  []
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "dssilist"
                      []
                      *global*)]
    (new out-types ast)))


(defn wgbrass
  {:arglists '([kamp kfreq ktens iatt kvibf kvamp & itable* iminfreq*])}
  [amp freq tens att vibf vamp & [ table* minfreq* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "wgbrass"
                      [amp freq tens att vibf vamp table* minfreq*]
                      *global*)]
    (new out-types ast)))

(s/fdef wgbrass
  :args (s/cat :amp valid-kr? :freq valid-kr? :tens valid-kr? :att valid-i? :vibf valid-kr? :vamp valid-kr? :table* valid-i?* :minfreq* valid-i?* ))
(stest/instrument `wgbrass)

(defn wgbrass:a
  {:arglists '([kamp kfreq ktens iatt kvibf kvamp & itable* iminfreq*])}
  [amp freq tens att vibf vamp & [ table* minfreq* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "wgbrass"
                      [amp freq tens att vibf vamp table* minfreq*]
                      *global*)]
    (new out-types ast)))

(s/fdef wgbrass:a
  :args (s/cat :amp valid-kr? :freq valid-kr? :tens valid-kr? :att valid-i? :vibf valid-kr? :vamp valid-kr? :table* valid-i?* :minfreq* valid-i?* ))
(stest/instrument `wgbrass:a)

(defn sc_phasor
  {:arglists '([atrig arate kstart kend & kresetPos*] [atrig krate kstart kend & kresetPos*] [ktrig krate kstart kend & kresetPos*])}
  [trig rate start end & [ resetPos* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sc_phasor"
                      [trig rate start end resetPos*]
                      *global*)]
    (new out-types ast)))

(s/fdef sc_phasor
  :args (s/alt
         :aakkk (s/cat :trig valid-ar? :rate valid-ar? :start valid-kr? :end valid-kr? :resetPos* valid-kr?* )
         ))
(stest/instrument `sc_phasor)

(defn sc_phasor:a
  {:arglists '([atrig arate kstart kend & kresetPos*] [atrig krate kstart kend & kresetPos*])}
  [trig rate start end & [ resetPos* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sc_phasor"
                      [trig rate start end resetPos*]
                      *global*)]
    (new out-types ast)))

(s/fdef sc_phasor:a
  :args (s/alt
         :aakkk (s/cat :trig valid-ar? :rate valid-ar? :start valid-kr? :end valid-kr? :resetPos* valid-kr?* )
         ))
(stest/instrument `sc_phasor:a)

(defn sc_phasor:k
  {:arglists '([ktrig krate kstart kend & kresetPos*])}
  [trig rate start end & [ resetPos* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "sc_phasor"
                      [trig rate start end resetPos*]
                      *global*)]
    (new out-types ast)))

(s/fdef sc_phasor:k
  :args (s/cat :trig valid-kr? :rate valid-kr? :start valid-kr? :end valid-kr? :resetPos* valid-kr?* ))
(stest/instrument `sc_phasor:k)

(defn readscore
  {:arglists '([Sin])}
  [in]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "readscore"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef readscore
  :args (s/cat :in valid-S? ))
(stest/instrument `readscore)

(defn readscore:i
  {:arglists '([Sin])}
  [in]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "readscore"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef readscore:i
  :args (s/cat :in valid-S? ))
(stest/instrument `readscore:i)

(defn sin
  {:arglists '([aarg1] [iarg1] [iarg1Arr] [karg1] [karg1Arr])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sin"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sin
  :args (s/alt
         :a (s/cat :arg1 valid-ar? )
         ))
(stest/instrument `sin)

(defn sin:a
  {:arglists '([aarg1])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sin"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sin:a
  :args (s/cat :arg1 valid-ar? ))
(stest/instrument `sin:a)

(defn sin:i
  {:arglists '([iarg1])}
  [arg1]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "sin"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sin:i
  :args (s/cat :arg1 valid-i? ))
(stest/instrument `sin:i)

(defn sin:iArr
  {:arglists '([iarg1Arr])}
  [arg1]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "sin"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sin:iArr
  :args (s/cat :arg1 valid-iArr? ))
(stest/instrument `sin:iArr)

(defn sin:k
  {:arglists '([karg1])}
  [arg1]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "sin"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sin:k
  :args (s/cat :arg1 valid-kr? ))
(stest/instrument `sin:k)

(defn sin:kArr
  {:arglists '([karg1Arr])}
  [arg1]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "sin"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sin:kArr
  :args (s/cat :arg1 valid-kArr? ))
(stest/instrument `sin:kArr)

(defn vexpseg
  {:arglists '([ifnout ielements & ifn1* idur2* ifn3* idur4* ifn5* ifn6* ifn7* ifn8* ifn9* ifn10* ifn11* ifn12* ifn13* ifn14* ifn15* ifn16*])}
  [fnout elements & [ fn1* dur2* fn3* dur4* fn5* fn6* fn7* fn8* fn9* fn10* fn11* fn12* fn13* fn14* fn15* fn16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vexpseg"
                      [fnout elements fn1* dur2* fn3* dur4* fn5* fn6* fn7* fn8* fn9* fn10* fn11* fn12* fn13* fn14* fn15* fn16*]
                      *global*)]
    (new out-types ast)))

(s/fdef vexpseg
  :args (s/cat :fnout valid-i? :elements valid-i? :fn1* valid-i?* :dur2* valid-i?* :fn3* valid-i?* :dur4* valid-i?* :fn5* valid-i?* :fn6* valid-i?* :fn7* valid-i?* :fn8* valid-i?* :fn9* valid-i?* :fn10* valid-i?* :fn11* valid-i?* :fn12* valid-i?* :fn13* valid-i?* :fn14* valid-i?* :fn15* valid-i?* :fn16* valid-i?* ))
(stest/instrument `vexpseg)

(defn pvsdiskin
  {:arglists '([SFname ktscal kgain & ioffset* ichan* kchan*] [iFname ktscal kgain & ioffset* ichan* kchan*])}
  [Fname tscal gain & [ offset* chan* chan* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsdiskin"
                      [Fname tscal gain offset* chan* chan*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsdiskin
  :args (s/alt
         :Skkiik (s/cat :Fname valid-S? :tscal valid-kr? :gain valid-kr? :offset* valid-i?* :chan* valid-i?* :chan* valid-kr?* )
         ))
(stest/instrument `pvsdiskin)

(defn pvsdiskin:f
  {:arglists '([SFname ktscal kgain & ioffset* ichan* kchan*] [iFname ktscal kgain & ioffset* ichan* kchan*])}
  [Fname tscal gain & [ offset* chan* chan* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsdiskin"
                      [Fname tscal gain offset* chan* chan*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsdiskin:f
  :args (s/alt
         :Skkiik (s/cat :Fname valid-S? :tscal valid-kr? :gain valid-kr? :offset* valid-i?* :chan* valid-i?* :chan* valid-kr?* )
         ))
(stest/instrument `pvsdiskin:f)

(defn outq2
  {:arglists '([asig])}
  [sig]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outq2"
                      [sig]
                      *global*)]
    (new out-types ast)))

(s/fdef outq2
  :args (s/cat :sig valid-ar? ))
(stest/instrument `outq2)

(defn MixerGetLevel
  {:arglists '([isend ibuss])}
  [send buss]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "MixerGetLevel"
                      [send buss]
                      *global*)]
    (new out-types ast)))

(s/fdef MixerGetLevel
  :args (s/cat :send valid-i? :buss valid-i? ))
(stest/instrument `MixerGetLevel)

(defn MixerGetLevel:k
  {:arglists '([isend ibuss])}
  [send buss]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "MixerGetLevel"
                      [send buss]
                      *global*)]
    (new out-types ast)))

(s/fdef MixerGetLevel:k
  :args (s/cat :send valid-i? :buss valid-i? ))
(stest/instrument `MixerGetLevel:k)

(defn limit
  {:arglists '([asig klow khigh] [isig ilow ihigh] [isigArr ilow ihigh] [ksig klow khigh] [ksigArr klow khigh])}
  [sig low high]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "limit"
                      [sig low high]
                      *global*)]
    (new out-types ast)))

(s/fdef limit
  :args (s/alt
         :akk (s/cat :sig valid-ar? :low valid-kr? :high valid-kr? )
         ))
(stest/instrument `limit)

(defn limit:a
  {:arglists '([asig klow khigh])}
  [sig low high]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "limit"
                      [sig low high]
                      *global*)]
    (new out-types ast)))

(s/fdef limit:a
  :args (s/cat :sig valid-ar? :low valid-kr? :high valid-kr? ))
(stest/instrument `limit:a)

(defn limit:i
  {:arglists '([isig ilow ihigh])}
  [sig low high]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "limit"
                      [sig low high]
                      *global*)]
    (new out-types ast)))

(s/fdef limit:i
  :args (s/cat :sig valid-i? :low valid-i? :high valid-i? ))
(stest/instrument `limit:i)

(defn limit:iArr
  {:arglists '([isigArr ilow ihigh])}
  [sig low high]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "limit"
                      [sig low high]
                      *global*)]
    (new out-types ast)))

(s/fdef limit:iArr
  :args (s/cat :sig valid-iArr? :low valid-i? :high valid-i? ))
(stest/instrument `limit:iArr)

(defn limit:k
  {:arglists '([ksig klow khigh])}
  [sig low high]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "limit"
                      [sig low high]
                      *global*)]
    (new out-types ast)))

(s/fdef limit:k
  :args (s/cat :sig valid-kr? :low valid-kr? :high valid-kr? ))
(stest/instrument `limit:k)

(defn limit:kArr
  {:arglists '([ksigArr klow khigh])}
  [sig low high]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "limit"
                      [sig low high]
                      *global*)]
    (new out-types ast)))

(s/fdef limit:kArr
  :args (s/cat :sig valid-kArr? :low valid-kr? :high valid-kr? ))
(stest/instrument `limit:kArr)

(defn nstrnum
  {:arglists '([Sname] [iname])}
  [name]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "nstrnum"
                      [name]
                      *global*)]
    (new out-types ast)))

(s/fdef nstrnum
  :args (s/alt
         :S (s/cat :name valid-S? )
         ))
(stest/instrument `nstrnum)

(defn nstrnum:i
  {:arglists '([Sname] [iname])}
  [name]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "nstrnum"
                      [name]
                      *global*)]
    (new out-types ast)))

(s/fdef nstrnum:i
  :args (s/alt
         :S (s/cat :name valid-S? )
         ))
(stest/instrument `nstrnum:i)

(defn outh
  {:arglists '([& asig1* asig2* asig3* asig4* asig5* asig6* asig7* asig8* asig9* asig10* asig11* asig12* asig13* asig14* asig15* asig16* asig17* asig18* asig19* asig20* asig21* asig22* asig23* asig24* asig25* asig26* asig27* asig28* asig29* asig30* asig31* asig32*])}
  [& [ sig1* sig2* sig3* sig4* sig5* sig6* sig7* sig8* sig9* sig10* sig11* sig12* sig13* sig14* sig15* sig16* sig17* sig18* sig19* sig20* sig21* sig22* sig23* sig24* sig25* sig26* sig27* sig28* sig29* sig30* sig31* sig32* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outh"
                      [sig1* sig2* sig3* sig4* sig5* sig6* sig7* sig8* sig9* sig10* sig11* sig12* sig13* sig14* sig15* sig16* sig17* sig18* sig19* sig20* sig21* sig22* sig23* sig24* sig25* sig26* sig27* sig28* sig29* sig30* sig31* sig32*]
                      *global*)]
    (new out-types ast)))

(s/fdef outh
  :args (s/cat :sig1* valid-ar?* :sig2* valid-ar?* :sig3* valid-ar?* :sig4* valid-ar?* :sig5* valid-ar?* :sig6* valid-ar?* :sig7* valid-ar?* :sig8* valid-ar?* :sig9* valid-ar?* :sig10* valid-ar?* :sig11* valid-ar?* :sig12* valid-ar?* :sig13* valid-ar?* :sig14* valid-ar?* :sig15* valid-ar?* :sig16* valid-ar?* :sig17* valid-ar?* :sig18* valid-ar?* :sig19* valid-ar?* :sig20* valid-ar?* :sig21* valid-ar?* :sig22* valid-ar?* :sig23* valid-ar?* :sig24* valid-ar?* :sig25* valid-ar?* :sig26* valid-ar?* :sig27* valid-ar?* :sig28* valid-ar?* :sig29* valid-ar?* :sig30* valid-ar?* :sig31* valid-ar?* :sig32* valid-ar?* ))
(stest/instrument `outh)

(defn vpowv
  {:arglists '([ifn1 ifn2 kelements & kdstoffset* ksrcoffset* kverbose*])}
  [fn1 fn2 elements & [ dstoffset* srcoffset* verbose* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vpowv"
                      [fn1 fn2 elements dstoffset* srcoffset* verbose*]
                      *global*)]
    (new out-types ast)))

(s/fdef vpowv
  :args (s/cat :fn1 valid-i? :fn2 valid-i? :elements valid-kr? :dstoffset* valid-kr?* :srcoffset* valid-kr?* :verbose* valid-kr?* ))
(stest/instrument `vpowv)

(defn lineto
  {:arglists '([ksig ktime])}
  [sig time]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "lineto"
                      [sig time]
                      *global*)]
    (new out-types ast)))

(s/fdef lineto
  :args (s/cat :sig valid-kr? :time valid-kr? ))
(stest/instrument `lineto)

(defn lineto:k
  {:arglists '([ksig ktime])}
  [sig time]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "lineto"
                      [sig time]
                      *global*)]
    (new out-types ast)))

(s/fdef lineto:k
  :args (s/cat :sig valid-kr? :time valid-kr? ))
(stest/instrument `lineto:k)

(defn readclock
  {:arglists '([inum])}
  [num]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "readclock"
                      [num]
                      *global*)]
    (new out-types ast)))

(s/fdef readclock
  :args (s/cat :num valid-i? ))
(stest/instrument `readclock)

(defn readclock:i
  {:arglists '([inum])}
  [num]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "readclock"
                      [num]
                      *global*)]
    (new out-types ast)))

(s/fdef readclock:i
  :args (s/cat :num valid-i? ))
(stest/instrument `readclock:i)

(defn ATScross
  {:arglists '([ktimepnt kfmod Satsfile itable kmylev kbuflev ipartials & ipartialoffset* ipartialincr* ipartialincr* ipartialincr*] [ktimepnt kfmod iatsfile itable kmylev kbuflev ipartials & ipartialoffset* ipartialincr* ipartialincr* ipartialincr*])}
  [timepnt fmod atsfile table mylev buflev partials & [ partialoffset* partialincr* partialincr* partialincr* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "ATScross"
                      [timepnt fmod atsfile table mylev buflev partials partialoffset* partialincr* partialincr* partialincr*]
                      *global*)]
    (new out-types ast)))

(s/fdef ATScross
  :args (s/alt
         :kkSikkiiiii (s/cat :timepnt valid-kr? :fmod valid-kr? :atsfile valid-S? :table valid-i? :mylev valid-kr? :buflev valid-kr? :partials valid-i? :partialoffset* valid-i?* :partialincr* valid-i?* :partialincr* valid-i?* :partialincr* valid-i?* )
         ))
(stest/instrument `ATScross)

(defn ATScross:a
  {:arglists '([ktimepnt kfmod Satsfile itable kmylev kbuflev ipartials & ipartialoffset* ipartialincr* ipartialincr* ipartialincr*] [ktimepnt kfmod iatsfile itable kmylev kbuflev ipartials & ipartialoffset* ipartialincr* ipartialincr* ipartialincr*])}
  [timepnt fmod atsfile table mylev buflev partials & [ partialoffset* partialincr* partialincr* partialincr* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "ATScross"
                      [timepnt fmod atsfile table mylev buflev partials partialoffset* partialincr* partialincr* partialincr*]
                      *global*)]
    (new out-types ast)))

(s/fdef ATScross:a
  :args (s/alt
         :kkSikkiiiii (s/cat :timepnt valid-kr? :fmod valid-kr? :atsfile valid-S? :table valid-i? :mylev valid-kr? :buflev valid-kr? :partials valid-i? :partialoffset* valid-i?* :partialincr* valid-i?* :partialincr* valid-i?* :partialincr* valid-i?* )
         ))
(stest/instrument `ATScross:a)

(defn pvstrace
  {:arglists '([fsigin kn])}
  [sigin n]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvstrace"
                      [sigin n]
                      *global*)]
    (new out-types ast)))

(s/fdef pvstrace
  :args (s/cat :sigin valid-f? :n valid-kr? ))
(stest/instrument `pvstrace)

(defn pvstrace:f
  {:arglists '([fsigin kn])}
  [sigin n]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvstrace"
                      [sigin n]
                      *global*)]
    (new out-types ast)))

(s/fdef pvstrace:f
  :args (s/cat :sigin valid-f? :n valid-kr? ))
(stest/instrument `pvstrace:f)

(defn outic
  {:arglists '([ichn inum ivalue imin imax])}
  [chn num value min max]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outic"
                      [chn num value min max]
                      *global*)]
    (new out-types ast)))

(s/fdef outic
  :args (s/cat :chn valid-i? :num valid-i? :value valid-i? :min valid-i? :max valid-i? ))
(stest/instrument `outic)

(defn valpass
  {:arglists '([asig krvt xlpt imaxlpt & iskip* insmps*])}
  [sig rvt lpt maxlpt & [ skip* nsmps* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "valpass"
                      [sig rvt lpt maxlpt skip* nsmps*]
                      *global*)]
    (new out-types ast)))

(s/fdef valpass
  :args (s/cat :sig valid-ar? :rvt valid-kr? :lpt valid-x? :maxlpt valid-i? :skip* valid-i?* :nsmps* valid-i?* ))
(stest/instrument `valpass)

(defn valpass:a
  {:arglists '([asig krvt xlpt imaxlpt & iskip* insmps*])}
  [sig rvt lpt maxlpt & [ skip* nsmps* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "valpass"
                      [sig rvt lpt maxlpt skip* nsmps*]
                      *global*)]
    (new out-types ast)))

(s/fdef valpass:a
  :args (s/cat :sig valid-ar? :rvt valid-kr? :lpt valid-x? :maxlpt valid-i? :skip* valid-i?* :nsmps* valid-i?* ))
(stest/instrument `valpass:a)

(defn hypot
  {:arglists '([iarg1Arr iarg2Arr] [karg1Arr karg2Arr])}
  [arg1 arg2]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "hypot"
                      [arg1 arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef hypot
  :args (s/alt
         :iArriArr (s/cat :arg1 valid-iArr? :arg2 valid-iArr? )
         ))
(stest/instrument `hypot)

(defn hypot:iArr
  {:arglists '([iarg1Arr iarg2Arr])}
  [arg1 arg2]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "hypot"
                      [arg1 arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef hypot:iArr
  :args (s/cat :arg1 valid-iArr? :arg2 valid-iArr? ))
(stest/instrument `hypot:iArr)

(defn hypot:kArr
  {:arglists '([karg1Arr karg2Arr])}
  [arg1 arg2]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "hypot"
                      [arg1 arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef hypot:kArr
  :args (s/cat :arg1 valid-kArr? :arg2 valid-kArr? ))
(stest/instrument `hypot:kArr)

(defn serialPrint
  {:arglists '([iPort])}
  [Port]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "serialPrint"
                      [Port]
                      *global*)]
    (new out-types ast)))

(s/fdef serialPrint
  :args (s/cat :Port valid-i? ))
(stest/instrument `serialPrint)

(defn cossegr
  {:arglists '([ia idur2 & ib1* idur2* ic3* irel4* iz5* iz6* iz7* iz8* iz9* iz10* iz11* iz12* iz13* iz14* iz15* iz16*] [ia idur2 & ib1* idur2* ic3* irel4* iz5* iz6* iz7* iz8* iz9* iz10* iz11* iz12* iz13* iz14* iz15* iz16*])}
  [a dur2 & [ b1* dur2* c3* rel4* z5* z6* z7* z8* z9* z10* z11* z12* z13* z14* z15* z16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "cossegr"
                      [a dur2 b1* dur2* c3* rel4* z5* z6* z7* z8* z9* z10* z11* z12* z13* z14* z15* z16*]
                      *global*)]
    (new out-types ast)))

(s/fdef cossegr
  :args (s/alt
         :iiiiiiiiiiiiiiiiii (s/cat :a valid-i? :dur2 valid-i? :b1* valid-i?* :dur2* valid-i?* :c3* valid-i?* :rel4* valid-i?* :z5* valid-i?* :z6* valid-i?* :z7* valid-i?* :z8* valid-i?* :z9* valid-i?* :z10* valid-i?* :z11* valid-i?* :z12* valid-i?* :z13* valid-i?* :z14* valid-i?* :z15* valid-i?* :z16* valid-i?* )
         ))
(stest/instrument `cossegr)

(defn cossegr:a
  {:arglists '([ia idur2 & ib1* idur2* ic3* irel4* iz5* iz6* iz7* iz8* iz9* iz10* iz11* iz12* iz13* iz14* iz15* iz16*])}
  [a dur2 & [ b1* dur2* c3* rel4* z5* z6* z7* z8* z9* z10* z11* z12* z13* z14* z15* z16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "cossegr"
                      [a dur2 b1* dur2* c3* rel4* z5* z6* z7* z8* z9* z10* z11* z12* z13* z14* z15* z16*]
                      *global*)]
    (new out-types ast)))

(s/fdef cossegr:a
  :args (s/cat :a valid-i? :dur2 valid-i? :b1* valid-i?* :dur2* valid-i?* :c3* valid-i?* :rel4* valid-i?* :z5* valid-i?* :z6* valid-i?* :z7* valid-i?* :z8* valid-i?* :z9* valid-i?* :z10* valid-i?* :z11* valid-i?* :z12* valid-i?* :z13* valid-i?* :z14* valid-i?* :z15* valid-i?* :z16* valid-i?* ))
(stest/instrument `cossegr:a)

(defn cossegr:k
  {:arglists '([ia idur2 & ib1* idur2* ic3* irel4* iz5* iz6* iz7* iz8* iz9* iz10* iz11* iz12* iz13* iz14* iz15* iz16*])}
  [a dur2 & [ b1* dur2* c3* rel4* z5* z6* z7* z8* z9* z10* z11* z12* z13* z14* z15* z16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "cossegr"
                      [a dur2 b1* dur2* c3* rel4* z5* z6* z7* z8* z9* z10* z11* z12* z13* z14* z15* z16*]
                      *global*)]
    (new out-types ast)))

(s/fdef cossegr:k
  :args (s/cat :a valid-i? :dur2 valid-i? :b1* valid-i?* :dur2* valid-i?* :c3* valid-i?* :rel4* valid-i?* :z5* valid-i?* :z6* valid-i?* :z7* valid-i?* :z8* valid-i?* :z9* valid-i?* :z10* valid-i?* :z11* valid-i?* :z12* valid-i?* :z13* valid-i?* :z14* valid-i?* :z15* valid-i?* :z16* valid-i?* ))
(stest/instrument `cossegr:k)

(defn pvsdisp
  {:arglists '([fsig & ibins* iwtflg*])}
  [sig & [ bins* wtflg* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "pvsdisp"
                      [sig bins* wtflg*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsdisp
  :args (s/cat :sig valid-f? :bins* valid-i?* :wtflg* valid-i?* ))
(stest/instrument `pvsdisp)

(defn ficlose
  {:arglists '([Sfilename] [ifilename])}
  [filename]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "ficlose"
                      [filename]
                      *global*)]
    (new out-types ast)))

(s/fdef ficlose
  :args (s/alt
         :S (s/cat :filename valid-S? )
         ))
(stest/instrument `ficlose)

(defn fmin
  {:arglists '([iargArr iarg2] [iargArr iarg2Arr] [kargArr karg2] [kargArr karg2Arr])}
  [arg arg2]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "fmin"
                      [arg arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef fmin
  :args (s/alt
         :iArri (s/cat :arg valid-iArr? :arg2 valid-i? )
         ))
(stest/instrument `fmin)

(defn fmin:iArr
  {:arglists '([iargArr iarg2] [iargArr iarg2Arr])}
  [arg arg2]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "fmin"
                      [arg arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef fmin:iArr
  :args (s/alt
         :iArri (s/cat :arg valid-iArr? :arg2 valid-i? )
         ))
(stest/instrument `fmin:iArr)

(defn fmin:kArr
  {:arglists '([kargArr karg2] [kargArr karg2Arr])}
  [arg arg2]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "fmin"
                      [arg arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef fmin:kArr
  :args (s/alt
         :kArrk (s/cat :arg valid-kArr? :arg2 valid-kr? )
         ))
(stest/instrument `fmin:kArr)

(defn atone
  {:arglists '([asig khp & iskip*] [asig khp & iskip*])}
  [sig hp & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "atone"
                      [sig hp skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef atone
  :args (s/alt
         :aki (s/cat :sig valid-ar? :hp valid-kr? :skip* valid-i?* )
         ))
(stest/instrument `atone)

(defn atone:a
  {:arglists '([asig khp & iskip*] [asig khp & iskip*])}
  [sig hp & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "atone"
                      [sig hp skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef atone:a
  :args (s/alt
         :aki (s/cat :sig valid-ar? :hp valid-kr? :skip* valid-i?* )
         ))
(stest/instrument `atone:a)

(defn chnget
  {:arglists '([Ss] [Ss] [Ss] [Ss])}
  [s]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "chnget"
                      [s]
                      *global*)]
    (new out-types ast)))

(s/fdef chnget
  :args (s/alt
         :S (s/cat :s valid-S? )
         ))
(stest/instrument `chnget)

(defn chnget:S
  {:arglists '([Ss])}
  [s]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "chnget"
                      [s]
                      *global*)]
    (new out-types ast)))

(s/fdef chnget:S
  :args (s/cat :s valid-S? ))
(stest/instrument `chnget:S)

(defn chnget:a
  {:arglists '([Ss])}
  [s]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "chnget"
                      [s]
                      *global*)]
    (new out-types ast)))

(s/fdef chnget:a
  :args (s/cat :s valid-S? ))
(stest/instrument `chnget:a)

(defn chnget:i
  {:arglists '([Ss])}
  [s]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "chnget"
                      [s]
                      *global*)]
    (new out-types ast)))

(s/fdef chnget:i
  :args (s/cat :s valid-S? ))
(stest/instrument `chnget:i)

(defn chnget:k
  {:arglists '([Ss])}
  [s]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "chnget"
                      [s]
                      *global*)]
    (new out-types ast)))

(s/fdef chnget:k
  :args (s/cat :s valid-S? ))
(stest/instrument `chnget:k)

(defn adsr
  {:arglists '([iatt idec islev irel & idel*] [iatt idec islev irel & idel*])}
  [att dec slev rel & [ del* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "adsr"
                      [att dec slev rel del*]
                      *global*)]
    (new out-types ast)))

(s/fdef adsr
  :args (s/alt
         :iiiii (s/cat :att valid-i? :dec valid-i? :slev valid-i? :rel valid-i? :del* valid-i?* )
         ))
(stest/instrument `adsr)

(defn adsr:a
  {:arglists '([iatt idec islev irel & idel*])}
  [att dec slev rel & [ del* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "adsr"
                      [att dec slev rel del*]
                      *global*)]
    (new out-types ast)))

(s/fdef adsr:a
  :args (s/cat :att valid-i? :dec valid-i? :slev valid-i? :rel valid-i? :del* valid-i?* ))
(stest/instrument `adsr:a)

(defn adsr:k
  {:arglists '([iatt idec islev irel & idel*])}
  [att dec slev rel & [ del* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "adsr"
                      [att dec slev rel del*]
                      *global*)]
    (new out-types ast)))

(s/fdef adsr:k
  :args (s/cat :att valid-i? :dec valid-i? :slev valid-i? :rel valid-i? :del* valid-i?* ))
(stest/instrument `adsr:k)

(defn vcopy
  {:arglists '([ifn1 ifn2 kelements & kdstoffset* ksrcoffset* kverbose*])}
  [fn1 fn2 elements & [ dstoffset* srcoffset* verbose* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vcopy"
                      [fn1 fn2 elements dstoffset* srcoffset* verbose*]
                      *global*)]
    (new out-types ast)))

(s/fdef vcopy
  :args (s/cat :fn1 valid-i? :fn2 valid-i? :elements valid-kr? :dstoffset* valid-kr?* :srcoffset* valid-kr?* :verbose* valid-kr?* ))
(stest/instrument `vcopy)

(defn fini
  {:arglists '([Sfilename iskipframes iformat & in1* in2* in3* in4* in5* in6* in7* in8* in9* in10* in11* in12* in13* in14* in15* in16*] [ifilename iskipframes iformat & in1* in2* in3* in4* in5* in6* in7* in8* in9* in10* in11* in12* in13* in14* in15* in16*])}
  [filename skipframes format & [ n1* n2* n3* n4* n5* n6* n7* n8* n9* n10* n11* n12* n13* n14* n15* n16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "fini"
                      [filename skipframes format n1* n2* n3* n4* n5* n6* n7* n8* n9* n10* n11* n12* n13* n14* n15* n16*]
                      *global*)]
    (new out-types ast)))

(s/fdef fini
  :args (s/alt
         :Siiiiiiiiiiiiiiiiii (s/cat :filename valid-S? :skipframes valid-i? :format valid-i? :n1* valid-i?* :n2* valid-i?* :n3* valid-i?* :n4* valid-i?* :n5* valid-i?* :n6* valid-i?* :n7* valid-i?* :n8* valid-i?* :n9* valid-i?* :n10* valid-i?* :n11* valid-i?* :n12* valid-i?* :n13* valid-i?* :n14* valid-i?* :n15* valid-i?* :n16* valid-i?* )
         ))
(stest/instrument `fini)

(defn hvs3
  {:arglists '([kx ky kz inumParms inumPointsX inumPointsY inumPointsZ iOutTab iPositionsTab iSnapTab & iConfigTab*])}
  [x y z numParms numPointsX numPointsY numPointsZ OutTab PositionsTab SnapTab & [ ConfigTab* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "hvs3"
                      [x y z numParms numPointsX numPointsY numPointsZ OutTab PositionsTab SnapTab ConfigTab*]
                      *global*)]
    (new out-types ast)))

(s/fdef hvs3
  :args (s/cat :x valid-kr? :y valid-kr? :z valid-kr? :numParms valid-i? :numPointsX valid-i? :numPointsY valid-i? :numPointsZ valid-i? :OutTab valid-i? :PositionsTab valid-i? :SnapTab valid-i? :ConfigTab* valid-i?* ))
(stest/instrument `hvs3)

(defn xscansmap
  {:arglists '([kpos kvel iscan kamp kvamp & iwhich*])}
  [pos vel scan amp vamp & [ which* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "xscansmap"
                      [pos vel scan amp vamp which*]
                      *global*)]
    (new out-types ast)))

(s/fdef xscansmap
  :args (s/cat :pos valid-kr? :vel valid-kr? :scan valid-i? :amp valid-kr? :vamp valid-kr? :which* valid-i?* ))
(stest/instrument `xscansmap)

(defn stix
  {:arglists '([iamp idettack & inum* idamp* imaxshake*])}
  [amp dettack & [ num* damp* maxshake* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "stix"
                      [amp dettack num* damp* maxshake*]
                      *global*)]
    (new out-types ast)))

(s/fdef stix
  :args (s/cat :amp valid-i? :dettack valid-i? :num* valid-i?* :damp* valid-i?* :maxshake* valid-i?* ))
(stest/instrument `stix)

(defn stix:a
  {:arglists '([iamp idettack & inum* idamp* imaxshake*])}
  [amp dettack & [ num* damp* maxshake* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "stix"
                      [amp dettack num* damp* maxshake*]
                      *global*)]
    (new out-types ast)))

(s/fdef stix:a
  :args (s/cat :amp valid-i? :dettack valid-i? :num* valid-i?* :damp* valid-i?* :maxshake* valid-i?* ))
(stest/instrument `stix:a)

(defn dumpk3
  {:arglists '([ksig1 ksig2 ksig3 Sfilname iformat iprd] [ksig1 ksig2 ksig3 ifilname iformat iprd])}
  [sig1 sig2 sig3 filname format prd]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "dumpk3"
                      [sig1 sig2 sig3 filname format prd]
                      *global*)]
    (new out-types ast)))

(s/fdef dumpk3
  :args (s/alt
         :kkkSii (s/cat :sig1 valid-kr? :sig2 valid-kr? :sig3 valid-kr? :filname valid-S? :format valid-i? :prd valid-i? )
         ))
(stest/instrument `dumpk3)

(defn vibrato
  {:arglists '([kAverageAmp kAverageFreq kRandAmountAmp kRandAmountFreq kAmpMinRate kAmpMaxRate kcpsMinRate kcpsMaxRate itable & iphase*])}
  [AverageAmp AverageFreq RandAmountAmp RandAmountFreq AmpMinRate AmpMaxRate cpsMinRate cpsMaxRate table & [ phase* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "vibrato"
                      [AverageAmp AverageFreq RandAmountAmp RandAmountFreq AmpMinRate AmpMaxRate cpsMinRate cpsMaxRate table phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef vibrato
  :args (s/cat :AverageAmp valid-kr? :AverageFreq valid-kr? :RandAmountAmp valid-kr? :RandAmountFreq valid-kr? :AmpMinRate valid-kr? :AmpMaxRate valid-kr? :cpsMinRate valid-kr? :cpsMaxRate valid-kr? :table valid-i? :phase* valid-i?* ))
(stest/instrument `vibrato)

(defn vibrato:k
  {:arglists '([kAverageAmp kAverageFreq kRandAmountAmp kRandAmountFreq kAmpMinRate kAmpMaxRate kcpsMinRate kcpsMaxRate itable & iphase*])}
  [AverageAmp AverageFreq RandAmountAmp RandAmountFreq AmpMinRate AmpMaxRate cpsMinRate cpsMaxRate table & [ phase* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "vibrato"
                      [AverageAmp AverageFreq RandAmountAmp RandAmountFreq AmpMinRate AmpMaxRate cpsMinRate cpsMaxRate table phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef vibrato:k
  :args (s/cat :AverageAmp valid-kr? :AverageFreq valid-kr? :RandAmountAmp valid-kr? :RandAmountFreq valid-kr? :AmpMinRate valid-kr? :AmpMaxRate valid-kr? :cpsMinRate valid-kr? :cpsMaxRate valid-kr? :table valid-i? :phase* valid-i?* ))
(stest/instrument `vibrato:k)

(defn partials
  {:arglists '([ffr fphase kthresh kminpts kmaxgap imaxtracks])}
  [fr phase thresh minpts maxgap maxtracks]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "partials"
                      [fr phase thresh minpts maxgap maxtracks]
                      *global*)]
    (new out-types ast)))

(s/fdef partials
  :args (s/cat :fr valid-f? :phase valid-f? :thresh valid-kr? :minpts valid-kr? :maxgap valid-kr? :maxtracks valid-i? ))
(stest/instrument `partials)

(defn partials:f
  {:arglists '([ffr fphase kthresh kminpts kmaxgap imaxtracks])}
  [fr phase thresh minpts maxgap maxtracks]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "partials"
                      [fr phase thresh minpts maxgap maxtracks]
                      *global*)]
    (new out-types ast)))

(s/fdef partials:f
  :args (s/cat :fr valid-f? :phase valid-f? :thresh valid-kr? :minpts valid-kr? :maxgap valid-kr? :maxtracks valid-i? ))
(stest/instrument `partials:f)

(defn expseg
  {:arglists '([ia idur2 & ib1* idur2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*] [ia idur2 & ib1* idur2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a dur2 & [ b1* dur2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "expseg"
                      [a dur2 b1* dur2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef expseg
  :args (s/alt
         :iiiiiiiiiiiiiiiiii (s/cat :a valid-i? :dur2 valid-i? :b1* valid-i?* :dur2* valid-i?* :c3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* )
         ))
(stest/instrument `expseg)

(defn expseg:a
  {:arglists '([ia idur2 & ib1* idur2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a dur2 & [ b1* dur2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "expseg"
                      [a dur2 b1* dur2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef expseg:a
  :args (s/cat :a valid-i? :dur2 valid-i? :b1* valid-i?* :dur2* valid-i?* :c3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* ))
(stest/instrument `expseg:a)

(defn expseg:k
  {:arglists '([ia idur2 & ib1* idur2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a dur2 & [ b1* dur2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "expseg"
                      [a dur2 b1* dur2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef expseg:k
  :args (s/cat :a valid-i? :dur2 valid-i? :b1* valid-i?* :dur2* valid-i?* :c3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* ))
(stest/instrument `expseg:k)

(defn veloc
  {:arglists '([& ilow* ihigh*])}
  [& [ low* high* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "veloc"
                      [low* high*]
                      *global*)]
    (new out-types ast)))

(s/fdef veloc
  :args (s/cat :low* valid-i?* :high* valid-i?* ))
(stest/instrument `veloc)

(defn veloc:i
  {:arglists '([& ilow* ihigh*])}
  [& [ low* high* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "veloc"
                      [low* high*]
                      *global*)]
    (new out-types ast)))

(s/fdef veloc:i
  :args (s/cat :low* valid-i?* :high* valid-i?* ))
(stest/instrument `veloc:i)

(defn tambourine
  {:arglists '([kamp idettack & inum* idamp* imaxshake* ifreq* ifreq1* ifreq1*])}
  [amp dettack & [ num* damp* maxshake* freq* freq1* freq1* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tambourine"
                      [amp dettack num* damp* maxshake* freq* freq1* freq1*]
                      *global*)]
    (new out-types ast)))

(s/fdef tambourine
  :args (s/cat :amp valid-kr? :dettack valid-i? :num* valid-i?* :damp* valid-i?* :maxshake* valid-i?* :freq* valid-i?* :freq1* valid-i?* :freq1* valid-i?* ))
(stest/instrument `tambourine)

(defn tambourine:a
  {:arglists '([kamp idettack & inum* idamp* imaxshake* ifreq* ifreq1* ifreq1*])}
  [amp dettack & [ num* damp* maxshake* freq* freq1* freq1* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tambourine"
                      [amp dettack num* damp* maxshake* freq* freq1* freq1*]
                      *global*)]
    (new out-types ast)))

(s/fdef tambourine:a
  :args (s/cat :amp valid-kr? :dettack valid-i? :num* valid-i?* :damp* valid-i?* :maxshake* valid-i?* :freq* valid-i?* :freq1* valid-i?* :freq1* valid-i?* ))
(stest/instrument `tambourine:a)

(defn gauss
  {:arglists '([krange] [krange] [krange])}
  [range]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "gauss"
                      [range]
                      *global*)]
    (new out-types ast)))

(s/fdef gauss
  :args (s/alt
         :k (s/cat :range valid-kr? )
         ))
(stest/instrument `gauss)

(defn gauss:a
  {:arglists '([krange])}
  [range]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "gauss"
                      [range]
                      *global*)]
    (new out-types ast)))

(s/fdef gauss:a
  :args (s/cat :range valid-kr? ))
(stest/instrument `gauss:a)

(defn gauss:i
  {:arglists '([krange])}
  [range]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "gauss"
                      [range]
                      *global*)]
    (new out-types ast)))

(s/fdef gauss:i
  :args (s/cat :range valid-kr? ))
(stest/instrument `gauss:i)

(defn gauss:k
  {:arglists '([krange])}
  [range]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "gauss"
                      [range]
                      *global*)]
    (new out-types ast)))

(s/fdef gauss:k
  :args (s/cat :range valid-kr? ))
(stest/instrument `gauss:k)

(defn midicontrolchange
  {:arglists '([xcontroller xcontrollervalue & ilow* ihigh*])}
  [controller controllervalue & [ low* high* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "midicontrolchange"
                      [controller controllervalue low* high*]
                      *global*)]
    (new out-types ast)))

(s/fdef midicontrolchange
  :args (s/cat :controller valid-x? :controllervalue valid-x? :low* valid-i?* :high* valid-i?* ))
(stest/instrument `midicontrolchange)

(defn midiout
  {:arglists '([kstatus kchan kdata3 kdata4])}
  [status chan data3 data4]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "midiout"
                      [status chan data3 data4]
                      *global*)]
    (new out-types ast)))

(s/fdef midiout
  :args (s/cat :status valid-kr? :chan valid-kr? :data3 valid-kr? :data4 valid-kr? ))
(stest/instrument `midiout)

(defn c2r
  {:arglists '([iinArr] [kinArr])}
  [in]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "c2r"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef c2r
  :args (s/alt
         :iArr (s/cat :in valid-iArr? )
         ))
(stest/instrument `c2r)

(defn c2r:iArr
  {:arglists '([iinArr])}
  [in]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "c2r"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef c2r:iArr
  :args (s/cat :in valid-iArr? ))
(stest/instrument `c2r:iArr)

(defn c2r:kArr
  {:arglists '([kinArr])}
  [in]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "c2r"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef c2r:kArr
  :args (s/cat :in valid-kArr? ))
(stest/instrument `c2r:kArr)

(defn xadsr
  {:arglists '([iatt idec islev irel & idel*] [iatt idec islev irel & idel*])}
  [att dec slev rel & [ del* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "xadsr"
                      [att dec slev rel del*]
                      *global*)]
    (new out-types ast)))

(s/fdef xadsr
  :args (s/alt
         :iiiii (s/cat :att valid-i? :dec valid-i? :slev valid-i? :rel valid-i? :del* valid-i?* )
         ))
(stest/instrument `xadsr)

(defn xadsr:a
  {:arglists '([iatt idec islev irel & idel*])}
  [att dec slev rel & [ del* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "xadsr"
                      [att dec slev rel del*]
                      *global*)]
    (new out-types ast)))

(s/fdef xadsr:a
  :args (s/cat :att valid-i? :dec valid-i? :slev valid-i? :rel valid-i? :del* valid-i?* ))
(stest/instrument `xadsr:a)

(defn xadsr:k
  {:arglists '([iatt idec islev irel & idel*])}
  [att dec slev rel & [ del* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "xadsr"
                      [att dec slev rel del*]
                      *global*)]
    (new out-types ast)))

(s/fdef xadsr:k
  :args (s/cat :att valid-i? :dec valid-i? :slev valid-i? :rel valid-i? :del* valid-i?* ))
(stest/instrument `xadsr:k)

(defn connect
  {:arglists '([Ssource1 Soutlet2 Ssink3 Sinlet4 & iinlet1*] [Ssource1 Soutlet2 isink3 Sinlet4 & iinlet1*] [isource1 Soutlet2 Ssink3 Sinlet4 & iinlet1*] [isource1 Soutlet2 isink3 Sinlet4 & iinlet1*])}
  [source1 outlet2 sink3 inlet4 & [ inlet1* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "connect"
                      [source1 outlet2 sink3 inlet4 inlet1*]
                      *global*)]
    (new out-types ast)))

(s/fdef connect
  :args (s/alt
         :SSSSi (s/cat :source1 valid-S? :outlet2 valid-S? :sink3 valid-S? :inlet4 valid-S? :inlet1* valid-i?* )
         ))
(stest/instrument `connect)

(defn pvs2tab
  {:arglists '([kmagsArr ffreqs] [kmagsArr kfreqsArr fsig])}
  [mags freqs]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "pvs2tab"
                      [mags freqs]
                      *global*)]
    (new out-types ast)))

(s/fdef pvs2tab
  :args (s/alt
         :kArrf (s/cat :mags valid-kArr? :freqs valid-f? )
         ))
(stest/instrument `pvs2tab)

(defn pvs2tab:k
  {:arglists '([kmagsArr ffreqs] [kmagsArr kfreqsArr fsig])}
  [mags freqs]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "pvs2tab"
                      [mags freqs]
                      *global*)]
    (new out-types ast)))

(s/fdef pvs2tab:k
  :args (s/alt
         :kArrf (s/cat :mags valid-kArr? :freqs valid-f? )
         ))
(stest/instrument `pvs2tab:k)

(defn outleta
  {:arglists '([Sname asignal])}
  [name signal]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outleta"
                      [name signal]
                      *global*)]
    (new out-types ast)))

(s/fdef outleta
  :args (s/cat :name valid-S? :signal valid-ar? ))
(stest/instrument `outleta)

(defn linrand
  {:arglists '([krange] [krange] [krange])}
  [range]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "linrand"
                      [range]
                      *global*)]
    (new out-types ast)))

(s/fdef linrand
  :args (s/alt
         :k (s/cat :range valid-kr? )
         ))
(stest/instrument `linrand)

(defn linrand:a
  {:arglists '([krange])}
  [range]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "linrand"
                      [range]
                      *global*)]
    (new out-types ast)))

(s/fdef linrand:a
  :args (s/cat :range valid-kr? ))
(stest/instrument `linrand:a)

(defn linrand:i
  {:arglists '([krange])}
  [range]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "linrand"
                      [range]
                      *global*)]
    (new out-types ast)))

(s/fdef linrand:i
  :args (s/cat :range valid-kr? ))
(stest/instrument `linrand:i)

(defn linrand:k
  {:arglists '([krange])}
  [range]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "linrand"
                      [range]
                      *global*)]
    (new out-types ast)))

(s/fdef linrand:k
  :args (s/cat :range valid-kr? ))
(stest/instrument `linrand:k)

(defn integ
  {:arglists '([xsig & iskip*] [xsig & iskip*])}
  [sig & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "integ"
                      [sig skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef integ
  :args (s/alt
         :xi (s/cat :sig valid-x? :skip* valid-i?* )
         ))
(stest/instrument `integ)

(defn integ:a
  {:arglists '([xsig & iskip*])}
  [sig & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "integ"
                      [sig skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef integ:a
  :args (s/cat :sig valid-x? :skip* valid-i?* ))
(stest/instrument `integ:a)

(defn integ:k
  {:arglists '([xsig & iskip*])}
  [sig & [ skip* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "integ"
                      [sig skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef integ:k
  :args (s/cat :sig valid-x? :skip* valid-i?* ))
(stest/instrument `integ:k)

(defn gaussi
  {:arglists '([krange xamp xcps] [krange xamp xcps] [krange xamp xcps])}
  [range amp cps]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "gaussi"
                      [range amp cps]
                      *global*)]
    (new out-types ast)))

(s/fdef gaussi
  :args (s/alt
         :kxx (s/cat :range valid-kr? :amp valid-x? :cps valid-x? )
         ))
(stest/instrument `gaussi)

(defn gaussi:a
  {:arglists '([krange xamp xcps])}
  [range amp cps]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "gaussi"
                      [range amp cps]
                      *global*)]
    (new out-types ast)))

(s/fdef gaussi:a
  :args (s/cat :range valid-kr? :amp valid-x? :cps valid-x? ))
(stest/instrument `gaussi:a)

(defn gaussi:i
  {:arglists '([krange xamp xcps])}
  [range amp cps]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "gaussi"
                      [range amp cps]
                      *global*)]
    (new out-types ast)))

(s/fdef gaussi:i
  :args (s/cat :range valid-kr? :amp valid-x? :cps valid-x? ))
(stest/instrument `gaussi:i)

(defn gaussi:k
  {:arglists '([krange xamp xcps])}
  [range amp cps]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "gaussi"
                      [range amp cps]
                      *global*)]
    (new out-types ast)))

(s/fdef gaussi:k
  :args (s/cat :range valid-kr? :amp valid-x? :cps valid-x? ))
(stest/instrument `gaussi:k)

(defn cmplxprod
  {:arglists '([kin1Arr kin2Arr])}
  [in1 in2]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "cmplxprod"
                      [in1 in2]
                      *global*)]
    (new out-types ast)))

(s/fdef cmplxprod
  :args (s/cat :in1 valid-kArr? :in2 valid-kArr? ))
(stest/instrument `cmplxprod)

(defn cmplxprod:kArr
  {:arglists '([kin1Arr kin2Arr])}
  [in1 in2]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "cmplxprod"
                      [in1 in2]
                      *global*)]
    (new out-types ast)))

(s/fdef cmplxprod:kArr
  :args (s/cat :in1 valid-kArr? :in2 valid-kArr? ))
(stest/instrument `cmplxprod:kArr)

(defn loopxseg
  {:arglists '([kfreq ktrig iphase & ktime1* kvalue2* ktime3* kvalue4* ktime5* kvalue6* kvalue7* kvalue8* kvalue9* kvalue10* kvalue11* kvalue12* kvalue13* kvalue14* kvalue15* kvalue16*])}
  [freq trig phase & [ time1* value2* time3* value4* time5* value6* value7* value8* value9* value10* value11* value12* value13* value14* value15* value16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "loopxseg"
                      [freq trig phase time1* value2* time3* value4* time5* value6* value7* value8* value9* value10* value11* value12* value13* value14* value15* value16*]
                      *global*)]
    (new out-types ast)))

(s/fdef loopxseg
  :args (s/cat :freq valid-kr? :trig valid-kr? :phase valid-i? :time1* valid-kr?* :value2* valid-kr?* :time3* valid-kr?* :value4* valid-kr?* :time5* valid-kr?* :value6* valid-kr?* :value7* valid-kr?* :value8* valid-kr?* :value9* valid-kr?* :value10* valid-kr?* :value11* valid-kr?* :value12* valid-kr?* :value13* valid-kr?* :value14* valid-kr?* :value15* valid-kr?* :value16* valid-kr?* ))
(stest/instrument `loopxseg)

(defn loopxseg:k
  {:arglists '([kfreq ktrig iphase & ktime1* kvalue2* ktime3* kvalue4* ktime5* kvalue6* kvalue7* kvalue8* kvalue9* kvalue10* kvalue11* kvalue12* kvalue13* kvalue14* kvalue15* kvalue16*])}
  [freq trig phase & [ time1* value2* time3* value4* time5* value6* value7* value8* value9* value10* value11* value12* value13* value14* value15* value16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "loopxseg"
                      [freq trig phase time1* value2* time3* value4* time5* value6* value7* value8* value9* value10* value11* value12* value13* value14* value15* value16*]
                      *global*)]
    (new out-types ast)))

(s/fdef loopxseg:k
  :args (s/cat :freq valid-kr? :trig valid-kr? :phase valid-i? :time1* valid-kr?* :value2* valid-kr?* :time3* valid-kr?* :value4* valid-kr?* :time5* valid-kr?* :value6* valid-kr?* :value7* valid-kr?* :value8* valid-kr?* :value9* valid-kr?* :value10* valid-kr?* :value11* valid-kr?* :value12* valid-kr?* :value13* valid-kr?* :value14* valid-kr?* :value15* valid-kr?* :value16* valid-kr?* ))
(stest/instrument `loopxseg:k)

(defn poscil3
  {:arglists '([aamp acps & itable* iphase*] [aamp kcps & itable* iphase*] [kamp acps & itable* iphase*] [kamp kcps & itable* iphase*] [kamp kcps & itable* iphase*])}
  [amp cps & [ table* phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "poscil3"
                      [amp cps table* phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef poscil3
  :args (s/alt
         :aaii (s/cat :amp valid-ar? :cps valid-ar? :table* valid-i?* :phase* valid-i?* )
         ))
(stest/instrument `poscil3)

(defn poscil3:a
  {:arglists '([aamp acps & itable* iphase*] [aamp kcps & itable* iphase*] [kamp acps & itable* iphase*] [kamp kcps & itable* iphase*])}
  [amp cps & [ table* phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "poscil3"
                      [amp cps table* phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef poscil3:a
  :args (s/alt
         :aaii (s/cat :amp valid-ar? :cps valid-ar? :table* valid-i?* :phase* valid-i?* )
         ))
(stest/instrument `poscil3:a)

(defn poscil3:k
  {:arglists '([kamp kcps & itable* iphase*])}
  [amp cps & [ table* phase* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "poscil3"
                      [amp cps table* phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef poscil3:k
  :args (s/cat :amp valid-kr? :cps valid-kr? :table* valid-i?* :phase* valid-i?* ))
(stest/instrument `poscil3:k)

(defn seed
  {:arglists '([ival])}
  [val]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "seed"
                      [val]
                      *global*)]
    (new out-types ast)))

(s/fdef seed
  :args (s/cat :val valid-i? ))
(stest/instrument `seed)

(defn resonk
  {:arglists '([ksig kcenter-frequency kbandwidth & iscale* iskip*])}
  [sig center-frequency bandwidth & [ scale* skip* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "resonk"
                      [sig center-frequency bandwidth scale* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef resonk
  :args (s/cat :sig valid-kr? :center-frequency valid-kr? :bandwidth valid-kr? :scale* valid-i?* :skip* valid-i?* ))
(stest/instrument `resonk)

(defn resonk:k
  {:arglists '([ksig kcenter-frequency kbandwidth & iscale* iskip*])}
  [sig center-frequency bandwidth & [ scale* skip* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "resonk"
                      [sig center-frequency bandwidth scale* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef resonk:k
  :args (s/cat :sig valid-kr? :center-frequency valid-kr? :bandwidth valid-kr? :scale* valid-i?* :skip* valid-i?* ))
(stest/instrument `resonk:k)

(defn mp3len
  {:arglists '([Sfilcod] [ifilcod])}
  [filcod]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "mp3len"
                      [filcod]
                      *global*)]
    (new out-types ast)))

(s/fdef mp3len
  :args (s/alt
         :S (s/cat :filcod valid-S? )
         ))
(stest/instrument `mp3len)

(defn mp3len:i
  {:arglists '([Sfilcod] [ifilcod])}
  [filcod]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "mp3len"
                      [filcod]
                      *global*)]
    (new out-types ast)))

(s/fdef mp3len:i
  :args (s/alt
         :S (s/cat :filcod valid-S? )
         ))
(stest/instrument `mp3len:i)

(defn minarray
  {:arglists '([iarrayArr] [karrayArr])}
  [array]
  (let [out-types-quoted '[Variable ]
        out-types [Variable ]
        ast (ast-node out-types-quoted
                      "minarray"
                      [array]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef minarray
  :args (s/alt
         :iArr (s/cat :array valid-iArr? )
         ))
(stest/instrument `minarray)

(defn vbap
  {:arglists '([asig kazim & kelev* kspread* ilayout*] [asig kazim & kelev* kspread* ilayout*])}
  [sig azim & [ elev* spread* layout* ]]
  (let [out-types-quoted 'AudioArray
        out-types AudioArray
        ast (ast-node out-types-quoted
                      "vbap"
                      [sig azim elev* spread* layout*]
                      *global*)]
    (new out-types ast)))

(s/fdef vbap
  :args (s/alt
         :akkki (s/cat :sig valid-ar? :azim valid-kr? :elev* valid-kr?* :spread* valid-kr?* :layout* valid-i?* )
         ))
(stest/instrument `vbap)

(defn vbap:aArr
  {:arglists '([asig kazim & kelev* kspread* ilayout*])}
  [sig azim & [ elev* spread* layout* ]]
  (let [out-types-quoted 'AudioArray
        out-types AudioArray
        ast (ast-node out-types-quoted
                      "vbap"
                      [sig azim elev* spread* layout*]
                      *global*)]
    (new out-types ast)))

(s/fdef vbap:aArr
  :args (s/cat :sig valid-ar? :azim valid-kr? :elev* valid-kr?* :spread* valid-kr?* :layout* valid-i?* ))
(stest/instrument `vbap:aArr)

(defn vbap:a
  {:arglists '([asig kazim & kelev* kspread* ilayout*])}
  [sig azim & [ elev* spread* layout* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "vbap"
                      [sig azim elev* spread* layout*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef vbap:a
  :args (s/cat :sig valid-ar? :azim valid-kr? :elev* valid-kr?* :spread* valid-kr?* :layout* valid-i?* ))
(stest/instrument `vbap:a)

(defn vco2init
  {:arglists '([iwave & ibasfn* ipmul* iminsiz* imaxsiz* isrcft*])}
  [wave & [ basfn* pmul* minsiz* maxsiz* srcft* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "vco2init"
                      [wave basfn* pmul* minsiz* maxsiz* srcft*]
                      *global*)]
    (new out-types ast)))

(s/fdef vco2init
  :args (s/cat :wave valid-i? :basfn* valid-i?* :pmul* valid-i?* :minsiz* valid-i?* :maxsiz* valid-i?* :srcft* valid-i?* ))
(stest/instrument `vco2init)

(defn vco2init:i
  {:arglists '([iwave & ibasfn* ipmul* iminsiz* imaxsiz* isrcft*])}
  [wave & [ basfn* pmul* minsiz* maxsiz* srcft* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "vco2init"
                      [wave basfn* pmul* minsiz* maxsiz* srcft*]
                      *global*)]
    (new out-types ast)))

(s/fdef vco2init:i
  :args (s/cat :wave valid-i? :basfn* valid-i?* :pmul* valid-i?* :minsiz* valid-i?* :maxsiz* valid-i?* :srcft* valid-i?* ))
(stest/instrument `vco2init:i)

(defn setscorepos
  {:arglists '([ipos])}
  [pos]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "setscorepos"
                      [pos]
                      *global*)]
    (new out-types ast)))

(s/fdef setscorepos
  :args (s/cat :pos valid-i? ))
(stest/instrument `setscorepos)

(defn schedkwhen
  {:arglists '([ktrigger kmintim kmaxnum Sinsname kwhen & kdur1* kp2* kp3* kp4* kp5* kp6* kp7* kp8* kp9* kp10* kp11* kp12* kp13* kp14* kp15* kp16*] [ktrigger kmintim kmaxnum kinsname kwhen & kdur1* kp2* kp3* kp4* kp5* kp6* kp7* kp8* kp9* kp10* kp11* kp12* kp13* kp14* kp15* kp16*])}
  [trigger mintim maxnum insname when & [ dur1* p2* p3* p4* p5* p6* p7* p8* p9* p10* p11* p12* p13* p14* p15* p16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "schedkwhen"
                      [trigger mintim maxnum insname when dur1* p2* p3* p4* p5* p6* p7* p8* p9* p10* p11* p12* p13* p14* p15* p16*]
                      *global*)]
    (new out-types ast)))

(s/fdef schedkwhen
  :args (s/alt
         :kkkSkkkkkkkkkkkkkkkkk (s/cat :trigger valid-kr? :mintim valid-kr? :maxnum valid-kr? :insname valid-S? :when valid-kr? :dur1* valid-kr?* :p2* valid-kr?* :p3* valid-kr?* :p4* valid-kr?* :p5* valid-kr?* :p6* valid-kr?* :p7* valid-kr?* :p8* valid-kr?* :p9* valid-kr?* :p10* valid-kr?* :p11* valid-kr?* :p12* valid-kr?* :p13* valid-kr?* :p14* valid-kr?* :p15* valid-kr?* :p16* valid-kr?* )
         ))
(stest/instrument `schedkwhen)

(defn harmon
  {:arglists '([asig kestfrq kmaxvar kgenfreq4 kgenfreq5 imode iminfrq iprd])}
  [sig estfrq maxvar genfreq4 genfreq5 mode minfrq prd]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "harmon"
                      [sig estfrq maxvar genfreq4 genfreq5 mode minfrq prd]
                      *global*)]
    (new out-types ast)))

(s/fdef harmon
  :args (s/cat :sig valid-ar? :estfrq valid-kr? :maxvar valid-kr? :genfreq4 valid-kr? :genfreq5 valid-kr? :mode valid-i? :minfrq valid-i? :prd valid-i? ))
(stest/instrument `harmon)

(defn harmon:a
  {:arglists '([asig kestfrq kmaxvar kgenfreq4 kgenfreq5 imode iminfrq iprd])}
  [sig estfrq maxvar genfreq4 genfreq5 mode minfrq prd]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "harmon"
                      [sig estfrq maxvar genfreq4 genfreq5 mode minfrq prd]
                      *global*)]
    (new out-types ast)))

(s/fdef harmon:a
  :args (s/cat :sig valid-ar? :estfrq valid-kr? :maxvar valid-kr? :genfreq4 valid-kr? :genfreq5 valid-kr? :mode valid-i? :minfrq valid-i? :prd valid-i? ))
(stest/instrument `harmon:a)

(defn pvsarp
  {:arglists '([fsigin kbin kdepth kgain])}
  [sigin bin depth gain]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsarp"
                      [sigin bin depth gain]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsarp
  :args (s/cat :sigin valid-f? :bin valid-kr? :depth valid-kr? :gain valid-kr? ))
(stest/instrument `pvsarp)

(defn pvsarp:f
  {:arglists '([fsigin kbin kdepth kgain])}
  [sigin bin depth gain]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsarp"
                      [sigin bin depth gain]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsarp:f
  :args (s/cat :sigin valid-f? :bin valid-kr? :depth valid-kr? :gain valid-kr? ))
(stest/instrument `pvsarp:f)

(defn tablekt
  {:arglists '([xindex ktable & ixmode* ixoff* iwrap*] [xindex ktable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tablekt"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef tablekt
  :args (s/alt
         :xkiii (s/cat :index valid-x? :table valid-kr? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* )
         ))
(stest/instrument `tablekt)

(defn tablekt:a
  {:arglists '([xindex ktable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tablekt"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef tablekt:a
  :args (s/cat :index valid-x? :table valid-kr? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* ))
(stest/instrument `tablekt:a)

(defn tablekt:k
  {:arglists '([xindex ktable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "tablekt"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef tablekt:k
  :args (s/cat :index valid-x? :table valid-kr? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* ))
(stest/instrument `tablekt:k)

(defn insremot
  {:arglists '([Sdestination Ssource & instrnum1* instrnum2* instrnum3* instrnum4* instrnum5* instrnum6* instrnum7* instrnum8* instrnum9* instrnum10* instrnum11* instrnum12* instrnum13* instrnum14* instrnum15* instrnum16*])}
  [destination source & [ nstrnum1* nstrnum2* nstrnum3* nstrnum4* nstrnum5* nstrnum6* nstrnum7* nstrnum8* nstrnum9* nstrnum10* nstrnum11* nstrnum12* nstrnum13* nstrnum14* nstrnum15* nstrnum16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "insremot"
                      [destination source nstrnum1* nstrnum2* nstrnum3* nstrnum4* nstrnum5* nstrnum6* nstrnum7* nstrnum8* nstrnum9* nstrnum10* nstrnum11* nstrnum12* nstrnum13* nstrnum14* nstrnum15* nstrnum16*]
                      *global*)]
    (new out-types ast)))

(s/fdef insremot
  :args (s/cat :destination valid-S? :source valid-S? :nstrnum1* valid-i?* :nstrnum2* valid-i?* :nstrnum3* valid-i?* :nstrnum4* valid-i?* :nstrnum5* valid-i?* :nstrnum6* valid-i?* :nstrnum7* valid-i?* :nstrnum8* valid-i?* :nstrnum9* valid-i?* :nstrnum10* valid-i?* :nstrnum11* valid-i?* :nstrnum12* valid-i?* :nstrnum13* valid-i?* :nstrnum14* valid-i?* :nstrnum15* valid-i?* :nstrnum16* valid-i?* ))
(stest/instrument `insremot)

(defn minabsaccum
  {:arglists '([aAccumulator aInput])}
  [Accumulator Input]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "minabsaccum"
                      [Accumulator Input]
                      *global*)]
    (new out-types ast)))

(s/fdef minabsaccum
  :args (s/cat :Accumulator valid-ar? :Input valid-ar? ))
(stest/instrument `minabsaccum)

(defn mvclpf3
  {:arglists '([ain acenter-frequency aresonance & istor*] [ain acenter-frequency kresonance & istor*] [ain kcenter-frequency aresonance & istor*] [ain kcenter-frequency kresonance & istor*])}
  [in center-frequency resonance & [ stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "mvclpf3"
                      [in center-frequency resonance stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef mvclpf3
  :args (s/alt
         :aaai (s/cat :in valid-ar? :center-frequency valid-ar? :resonance valid-ar? :stor* valid-i?* )
         ))
(stest/instrument `mvclpf3)

(defn mvclpf3:a
  {:arglists '([ain acenter-frequency aresonance & istor*] [ain acenter-frequency kresonance & istor*] [ain kcenter-frequency aresonance & istor*] [ain kcenter-frequency kresonance & istor*])}
  [in center-frequency resonance & [ stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "mvclpf3"
                      [in center-frequency resonance stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef mvclpf3:a
  :args (s/alt
         :aaai (s/cat :in valid-ar? :center-frequency valid-ar? :resonance valid-ar? :stor* valid-i?* )
         ))
(stest/instrument `mvclpf3:a)

(defn tonek
  {:arglists '([ksig khp & iskip*])}
  [sig hp & [ skip* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "tonek"
                      [sig hp skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef tonek
  :args (s/cat :sig valid-kr? :hp valid-kr? :skip* valid-i?* ))
(stest/instrument `tonek)

(defn tonek:k
  {:arglists '([ksig khp & iskip*])}
  [sig hp & [ skip* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "tonek"
                      [sig hp skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef tonek:k
  :args (s/cat :sig valid-kr? :hp valid-kr? :skip* valid-i?* ))
(stest/instrument `tonek:k)

(defn phs
  {:arglists '([kinArr])}
  [in]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "phs"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef phs
  :args (s/cat :in valid-kArr? ))
(stest/instrument `phs)

(defn phs:kArr
  {:arglists '([kinArr])}
  [in]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "phs"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef phs:kArr
  :args (s/cat :in valid-kArr? ))
(stest/instrument `phs:kArr)

(defn guiro
  {:arglists '([kamp idettack & inum* idamp* imaxshake* ifreq* ifreq1*])}
  [amp dettack & [ num* damp* maxshake* freq* freq1* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "guiro"
                      [amp dettack num* damp* maxshake* freq* freq1*]
                      *global*)]
    (new out-types ast)))

(s/fdef guiro
  :args (s/cat :amp valid-kr? :dettack valid-i? :num* valid-i?* :damp* valid-i?* :maxshake* valid-i?* :freq* valid-i?* :freq1* valid-i?* ))
(stest/instrument `guiro)

(defn guiro:a
  {:arglists '([kamp idettack & inum* idamp* imaxshake* ifreq* ifreq1*])}
  [amp dettack & [ num* damp* maxshake* freq* freq1* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "guiro"
                      [amp dettack num* damp* maxshake* freq* freq1*]
                      *global*)]
    (new out-types ast)))

(s/fdef guiro:a
  :args (s/cat :amp valid-kr? :dettack valid-i? :num* valid-i?* :damp* valid-i?* :maxshake* valid-i?* :freq* valid-i?* :freq1* valid-i?* ))
(stest/instrument `guiro:a)

(defn exp
  {:arglists '([aarg1] [iarg1] [iarg1Arr] [karg1] [karg1Arr])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "exp"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef exp
  :args (s/alt
         :a (s/cat :arg1 valid-ar? )
         ))
(stest/instrument `exp)

(defn exp:a
  {:arglists '([aarg1])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "exp"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef exp:a
  :args (s/cat :arg1 valid-ar? ))
(stest/instrument `exp:a)

(defn exp:i
  {:arglists '([iarg1])}
  [arg1]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "exp"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef exp:i
  :args (s/cat :arg1 valid-i? ))
(stest/instrument `exp:i)

(defn exp:iArr
  {:arglists '([iarg1Arr])}
  [arg1]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "exp"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef exp:iArr
  :args (s/cat :arg1 valid-iArr? ))
(stest/instrument `exp:iArr)

(defn exp:k
  {:arglists '([karg1])}
  [arg1]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "exp"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef exp:k
  :args (s/cat :arg1 valid-kr? ))
(stest/instrument `exp:k)

(defn exp:kArr
  {:arglists '([karg1Arr])}
  [arg1]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "exp"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef exp:kArr
  :args (s/cat :arg1 valid-kArr? ))
(stest/instrument `exp:kArr)

(defn xscanmap
  {:arglists '([iscan kamp kvamp & iwhich*])}
  [scan amp vamp & [ which* ]]
  (let [out-types-quoted '[ControlSignal ControlSignal]
        out-types [ControlSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "xscanmap"
                      [scan amp vamp which*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef xscanmap
  :args (s/cat :scan valid-i? :amp valid-kr? :vamp valid-kr? :which* valid-i?* ))
(stest/instrument `xscanmap)

(defn getcfg
  {:arglists '([iopt])}
  [opt]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "getcfg"
                      [opt]
                      *global*)]
    (new out-types ast)))

(s/fdef getcfg
  :args (s/cat :opt valid-i? ))
(stest/instrument `getcfg)

(defn getcfg:S
  {:arglists '([iopt])}
  [opt]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "getcfg"
                      [opt]
                      *global*)]
    (new out-types ast)))

(s/fdef getcfg:S
  :args (s/cat :opt valid-i? ))
(stest/instrument `getcfg:S)

(defn sorta
  {:arglists '([iarg1Arr] [karg1Arr])}
  [arg1]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "sorta"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sorta
  :args (s/alt
         :iArr (s/cat :arg1 valid-iArr? )
         ))
(stest/instrument `sorta)

(defn sorta:iArr
  {:arglists '([iarg1Arr])}
  [arg1]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "sorta"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sorta:iArr
  :args (s/cat :arg1 valid-iArr? ))
(stest/instrument `sorta:iArr)

(defn sorta:kArr
  {:arglists '([karg1Arr])}
  [arg1]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "sorta"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sorta:kArr
  :args (s/cat :arg1 valid-kArr? ))
(stest/instrument `sorta:kArr)

(defn maparray
  {:arglists '([iiArr Sinarray] [kiArr Sinarray])}
  [i inarray]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "maparray"
                      [i inarray]
                      *global*)]
    (new out-types ast)))

(s/fdef maparray
  :args (s/alt
         :iArrS (s/cat :i valid-iArr? :inarray valid-S? )
         ))
(stest/instrument `maparray)

(defn maparray:iArr
  {:arglists '([iiArr Sinarray])}
  [i inarray]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "maparray"
                      [i inarray]
                      *global*)]
    (new out-types ast)))

(s/fdef maparray:iArr
  :args (s/cat :i valid-iArr? :inarray valid-S? ))
(stest/instrument `maparray:iArr)

(defn maparray:kArr
  {:arglists '([kiArr Sinarray])}
  [i inarray]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "maparray"
                      [i inarray]
                      *global*)]
    (new out-types ast)))

(s/fdef maparray:kArr
  :args (s/cat :i valid-kArr? :inarray valid-S? ))
(stest/instrument `maparray:kArr)

(defn nlfilt
  {:arglists '([ain ka kb kd kC kL])}
  [in a b d C L]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "nlfilt"
                      [in a b d C L]
                      *global*)]
    (new out-types ast)))

(s/fdef nlfilt
  :args (s/cat :in valid-ar? :a valid-kr? :b valid-kr? :d valid-kr? :C valid-kr? :L valid-kr? ))
(stest/instrument `nlfilt)

(defn nlfilt:a
  {:arglists '([ain ka kb kd kC kL])}
  [in a b d C L]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "nlfilt"
                      [in a b d C L]
                      *global*)]
    (new out-types ast)))

(s/fdef nlfilt:a
  :args (s/cat :in valid-ar? :a valid-kr? :b valid-kr? :d valid-kr? :C valid-kr? :L valid-kr? ))
(stest/instrument `nlfilt:a)

(defn vmultv
  {:arglists '([ifn1 ifn2 kelements & kdstoffset* ksrcoffset* kverbose*])}
  [fn1 fn2 elements & [ dstoffset* srcoffset* verbose* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vmultv"
                      [fn1 fn2 elements dstoffset* srcoffset* verbose*]
                      *global*)]
    (new out-types ast)))

(s/fdef vmultv
  :args (s/cat :fn1 valid-i? :fn2 valid-i? :elements valid-kr? :dstoffset* valid-kr?* :srcoffset* valid-kr?* :verbose* valid-kr?* ))
(stest/instrument `vmultv)

(defn modmatrix
  {:arglists '([iresfn isrcmodfn isrcparmfn imodscale inum_mod inum_parm kupdate])}
  [resfn srcmodfn srcparmfn modscale num_mod num_parm update]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "modmatrix"
                      [resfn srcmodfn srcparmfn modscale num_mod num_parm update]
                      *global*)]
    (new out-types ast)))

(s/fdef modmatrix
  :args (s/cat :resfn valid-i? :srcmodfn valid-i? :srcparmfn valid-i? :modscale valid-i? :num_mod valid-i? :num_parm valid-i? :update valid-kr? ))
(stest/instrument `modmatrix)

(defn select
  {:arglists '([aarg1 aarg2 aless aequal amore])}
  [arg1 arg2 less equal more]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "select"
                      [arg1 arg2 less equal more]
                      *global*)]
    (new out-types ast)))

(s/fdef select
  :args (s/cat :arg1 valid-ar? :arg2 valid-ar? :less valid-ar? :equal valid-ar? :more valid-ar? ))
(stest/instrument `select)

(defn select:a
  {:arglists '([aarg1 aarg2 aless aequal amore])}
  [arg1 arg2 less equal more]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "select"
                      [arg1 arg2 less equal more]
                      *global*)]
    (new out-types ast)))

(s/fdef select:a
  :args (s/cat :arg1 valid-ar? :arg2 valid-ar? :less valid-ar? :equal valid-ar? :more valid-ar? ))
(stest/instrument `select:a)

(defn wguide1
  {:arglists '([asig xfreq kcutoff kfeedback])}
  [sig freq cutoff feedback]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "wguide1"
                      [sig freq cutoff feedback]
                      *global*)]
    (new out-types ast)))

(s/fdef wguide1
  :args (s/cat :sig valid-ar? :freq valid-x? :cutoff valid-kr? :feedback valid-kr? ))
(stest/instrument `wguide1)

(defn wguide1:a
  {:arglists '([asig xfreq kcutoff kfeedback])}
  [sig freq cutoff feedback]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "wguide1"
                      [sig freq cutoff feedback]
                      *global*)]
    (new out-types ast)))

(s/fdef wguide1:a
  :args (s/cat :sig valid-ar? :freq valid-x? :cutoff valid-kr? :feedback valid-kr? ))
(stest/instrument `wguide1:a)

(defn resonz
  {:arglists '([asig xcenter-frequency xbandwidth & iscale* iskip*])}
  [sig center-frequency bandwidth & [ scale* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "resonz"
                      [sig center-frequency bandwidth scale* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef resonz
  :args (s/cat :sig valid-ar? :center-frequency valid-x? :bandwidth valid-x? :scale* valid-i?* :skip* valid-i?* ))
(stest/instrument `resonz)

(defn resonz:a
  {:arglists '([asig xcenter-frequency xbandwidth & iscale* iskip*])}
  [sig center-frequency bandwidth & [ scale* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "resonz"
                      [sig center-frequency bandwidth scale* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef resonz:a
  :args (s/cat :sig valid-ar? :center-frequency valid-x? :bandwidth valid-x? :scale* valid-i?* :skip* valid-i?* ))
(stest/instrument `resonz:a)

(defn dctinv
  {:arglists '([iinArr] [kinArr])}
  [in]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "dctinv"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef dctinv
  :args (s/alt
         :iArr (s/cat :in valid-iArr? )
         ))
(stest/instrument `dctinv)

(defn dctinv:iArr
  {:arglists '([iinArr])}
  [in]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "dctinv"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef dctinv:iArr
  :args (s/cat :in valid-iArr? ))
(stest/instrument `dctinv:iArr)

(defn dctinv:kArr
  {:arglists '([kinArr])}
  [in]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "dctinv"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef dctinv:kArr
  :args (s/cat :in valid-kArr? ))
(stest/instrument `dctinv:kArr)

(defn outletk
  {:arglists '([Sname ksignal])}
  [name signal]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outletk"
                      [name signal]
                      *global*)]
    (new out-types ast)))

(s/fdef outletk
  :args (s/cat :name valid-S? :signal valid-kr? ))
(stest/instrument `outletk)

(defn sfplay3
  {:arglists '([ivel inotenum xamp xfreq ipreindex & iflag* ioffset* ienv*])}
  [vel notenum amp freq preindex & [ flag* offset* env* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "sfplay3"
                      [vel notenum amp freq preindex flag* offset* env*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef sfplay3
  :args (s/cat :vel valid-i? :notenum valid-i? :amp valid-x? :freq valid-x? :preindex valid-i? :flag* valid-i?* :offset* valid-i?* :env* valid-i?* ))
(stest/instrument `sfplay3)

(defn prealloc
  {:arglists '([Sinsname icount & icount*] [iinsname icount & icount*])}
  [insname count & [ count* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "prealloc"
                      [insname count count*]
                      *global*)]
    (new out-types ast)))

(s/fdef prealloc
  :args (s/alt
         :Sii (s/cat :insname valid-S? :count valid-i? :count* valid-i?* )
         ))
(stest/instrument `prealloc)

(defn fof2
  {:arglists '([xamp xfund xform koct kband kris kdur kdec iolaps ifna ifnb itotdur kphase kgliss & iskip*])}
  [amp fund form oct band ris dur dec olaps fna fnb totdur phase gliss & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fof2"
                      [amp fund form oct band ris dur dec olaps fna fnb totdur phase gliss skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef fof2
  :args (s/cat :amp valid-x? :fund valid-x? :form valid-x? :oct valid-kr? :band valid-kr? :ris valid-kr? :dur valid-kr? :dec valid-kr? :olaps valid-i? :fna valid-i? :fnb valid-i? :totdur valid-i? :phase valid-kr? :gliss valid-kr? :skip* valid-i?* ))
(stest/instrument `fof2)

(defn fof2:a
  {:arglists '([xamp xfund xform koct kband kris kdur kdec iolaps ifna ifnb itotdur kphase kgliss & iskip*])}
  [amp fund form oct band ris dur dec olaps fna fnb totdur phase gliss & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fof2"
                      [amp fund form oct band ris dur dec olaps fna fnb totdur phase gliss skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef fof2:a
  :args (s/cat :amp valid-x? :fund valid-x? :form valid-x? :oct valid-kr? :band valid-kr? :ris valid-kr? :dur valid-kr? :dec valid-kr? :olaps valid-i? :fna valid-i? :fnb valid-i? :totdur valid-i? :phase valid-kr? :gliss valid-kr? :skip* valid-i?* ))
(stest/instrument `fof2:a)

(defn vtablei
  {:arglists '([iindex itable interp ixmode & iout1* iout2* iout3* ioutN4* ioutN5* ioutN6* ioutN7* ioutN8* ioutN9* ioutN10* ioutN11* ioutN12* ioutN13* ioutN14* ioutN15* ioutN16*])}
  [index table nterp xmode & [ out1* out2* out3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vtablei"
                      [index table nterp xmode out1* out2* out3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef vtablei
  :args (s/cat :index valid-i? :table valid-i? :nterp valid-i? :xmode valid-i? :out1* valid-i?* :out2* valid-i?* :out3* valid-i?* :outN4* valid-i?* :outN5* valid-i?* :outN6* valid-i?* :outN7* valid-i?* :outN8* valid-i?* :outN9* valid-i?* :outN10* valid-i?* :outN11* valid-i?* :outN12* valid-i?* :outN13* valid-i?* :outN14* valid-i?* :outN15* valid-i?* :outN16* valid-i?* ))
(stest/instrument `vtablei)

(defn harmon3
  {:arglists '([asig koct kfrq3 kfrq4 kfrq5 icpsmode ilowest & ipolarity*])}
  [sig oct frq3 frq4 frq5 cpsmode lowest & [ polarity* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "harmon3"
                      [sig oct frq3 frq4 frq5 cpsmode lowest polarity*]
                      *global*)]
    (new out-types ast)))

(s/fdef harmon3
  :args (s/cat :sig valid-ar? :oct valid-kr? :frq3 valid-kr? :frq4 valid-kr? :frq5 valid-kr? :cpsmode valid-i? :lowest valid-i? :polarity* valid-i?* ))
(stest/instrument `harmon3)

(defn harmon3:a
  {:arglists '([asig koct kfrq3 kfrq4 kfrq5 icpsmode ilowest & ipolarity*])}
  [sig oct frq3 frq4 frq5 cpsmode lowest & [ polarity* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "harmon3"
                      [sig oct frq3 frq4 frq5 cpsmode lowest polarity*]
                      *global*)]
    (new out-types ast)))

(s/fdef harmon3:a
  :args (s/cat :sig valid-ar? :oct valid-kr? :frq3 valid-kr? :frq4 valid-kr? :frq5 valid-kr? :cpsmode valid-i? :lowest valid-i? :polarity* valid-i?* ))
(stest/instrument `harmon3:a)

(defn timeinstk
  {:arglists '()}
  []
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "timeinstk"
                      []
                      *global*)]
    (new out-types ast)))


(defn timeinstk:k
  {:arglists '()}
  []
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "timeinstk"
                      []
                      *global*)]
    (new out-types ast)))


(defn ftgen
  {:arglists '([itable itime isize Sgen Sarray & iarray1* iarray2* iarray3* iarray4* iarray5* iarray6* iarray7* iarray8* iarray9* iarray10* iarray11* iarray12* iarray13* iarray14* iarray15* iarray16*] [itable itime isize Sgen iarrayArr] [itable itime isize Sgen iarray & iarray1* iarray2* iarray3* iarray4* iarray5* iarray6* iarray7* iarray8* iarray9* iarray10* iarray11* iarray12* iarray13* iarray14* iarray15* iarray16*] [itable itime isize igen Sarray & iarray1* iarray2* iarray3* iarray4* iarray5* iarray6* iarray7* iarray8* iarray9* iarray10* iarray11* iarray12* iarray13* iarray14* iarray15* iarray16*] [itable itime isize igen iarrayArr] [itable itime isize igen iarray & iarray1* iarray2* iarray3* iarray4* iarray5* iarray6* iarray7* iarray8* iarray9* iarray10* iarray11* iarray12* iarray13* iarray14* iarray15* iarray16*])}
  [table time size gen array & [ array1* array2* array3* array4* array5* array6* array7* array8* array9* array10* array11* array12* array13* array14* array15* array16* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ftgen"
                      [table time size gen array array1* array2* array3* array4* array5* array6* array7* array8* array9* array10* array11* array12* array13* array14* array15* array16*]
                      *global*)]
    (new out-types ast)))

(s/fdef ftgen
  :args (s/alt
         :iiiSSiiiiiiiiiiiiiiii (s/cat :table valid-i? :time valid-i? :size valid-i? :gen valid-S? :array valid-S? :array1* valid-i?* :array2* valid-i?* :array3* valid-i?* :array4* valid-i?* :array5* valid-i?* :array6* valid-i?* :array7* valid-i?* :array8* valid-i?* :array9* valid-i?* :array10* valid-i?* :array11* valid-i?* :array12* valid-i?* :array13* valid-i?* :array14* valid-i?* :array15* valid-i?* :array16* valid-i?* )
         ))
(stest/instrument `ftgen)

(defn ftgen:i
  {:arglists '([itable itime isize Sgen Sarray & iarray1* iarray2* iarray3* iarray4* iarray5* iarray6* iarray7* iarray8* iarray9* iarray10* iarray11* iarray12* iarray13* iarray14* iarray15* iarray16*] [itable itime isize Sgen iarrayArr] [itable itime isize Sgen iarray & iarray1* iarray2* iarray3* iarray4* iarray5* iarray6* iarray7* iarray8* iarray9* iarray10* iarray11* iarray12* iarray13* iarray14* iarray15* iarray16*] [itable itime isize igen Sarray & iarray1* iarray2* iarray3* iarray4* iarray5* iarray6* iarray7* iarray8* iarray9* iarray10* iarray11* iarray12* iarray13* iarray14* iarray15* iarray16*] [itable itime isize igen iarrayArr] [itable itime isize igen iarray & iarray1* iarray2* iarray3* iarray4* iarray5* iarray6* iarray7* iarray8* iarray9* iarray10* iarray11* iarray12* iarray13* iarray14* iarray15* iarray16*])}
  [table time size gen array & [ array1* array2* array3* array4* array5* array6* array7* array8* array9* array10* array11* array12* array13* array14* array15* array16* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ftgen"
                      [table time size gen array array1* array2* array3* array4* array5* array6* array7* array8* array9* array10* array11* array12* array13* array14* array15* array16*]
                      *global*)]
    (new out-types ast)))

(s/fdef ftgen:i
  :args (s/alt
         :iiiSSiiiiiiiiiiiiiiii (s/cat :table valid-i? :time valid-i? :size valid-i? :gen valid-S? :array valid-S? :array1* valid-i?* :array2* valid-i?* :array3* valid-i?* :array4* valid-i?* :array5* valid-i?* :array6* valid-i?* :array7* valid-i?* :array8* valid-i?* :array9* valid-i?* :array10* valid-i?* :array11* valid-i?* :array12* valid-i?* :array13* valid-i?* :array14* valid-i?* :array15* valid-i?* :array16* valid-i?* )
         ))
(stest/instrument `ftgen:i)

(defn outkc
  {:arglists '([kchn knum kvalue kmin kmax])}
  [chn num value min max]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outkc"
                      [chn num value min max]
                      *global*)]
    (new out-types ast)))

(s/fdef outkc
  :args (s/cat :chn valid-kr? :num valid-kr? :value valid-kr? :min valid-kr? :max valid-kr? ))
(stest/instrument `outkc)

(defn vmult
  {:arglists '([itable kval kelements & kdstoffset* kverbose*])}
  [table val elements & [ dstoffset* verbose* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vmult"
                      [table val elements dstoffset* verbose*]
                      *global*)]
    (new out-types ast)))

(s/fdef vmult
  :args (s/cat :table valid-i? :val valid-kr? :elements valid-kr? :dstoffset* valid-kr?* :verbose* valid-kr?* ))
(stest/instrument `vmult)

(defn chnset
  {:arglists '([Ss Sval] [as Sval] [is Sval] [ks Sval])}
  [s val]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "chnset"
                      [s val]
                      *global*)]
    (new out-types ast)))

(s/fdef chnset
  :args (s/alt
         :SS (s/cat :s valid-S? :val valid-S? )
         ))
(stest/instrument `chnset)

(defn opcode
  {:arglists '()}
  []
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "opcode"
                      []
                      *global*)]
    (new out-types ast)))


(defn seqtime
  {:arglists '([ktime_unit kstart kloop kinitndx kfn_times])}
  [time_unit start loop initndx fn_times]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "seqtime"
                      [time_unit start loop initndx fn_times]
                      *global*)]
    (new out-types ast)))

(s/fdef seqtime
  :args (s/cat :time_unit valid-kr? :start valid-kr? :loop valid-kr? :initndx valid-kr? :fn_times valid-kr? ))
(stest/instrument `seqtime)

(defn seqtime:k
  {:arglists '([ktime_unit kstart kloop kinitndx kfn_times])}
  [time_unit start loop initndx fn_times]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "seqtime"
                      [time_unit start loop initndx fn_times]
                      *global*)]
    (new out-types ast)))

(s/fdef seqtime:k
  :args (s/cat :time_unit valid-kr? :start valid-kr? :loop valid-kr? :initndx valid-kr? :fn_times valid-kr? ))
(stest/instrument `seqtime:k)

(defn syncloop
  {:arglists '([kamp kfreq kpitch kgrsize kprate klstart klend ifun8 ifun9 iolaps & istart* iskip*])}
  [amp freq pitch grsize prate lstart lend fun8 fun9 olaps & [ start* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "syncloop"
                      [amp freq pitch grsize prate lstart lend fun8 fun9 olaps start* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef syncloop
  :args (s/cat :amp valid-kr? :freq valid-kr? :pitch valid-kr? :grsize valid-kr? :prate valid-kr? :lstart valid-kr? :lend valid-kr? :fun8 valid-i? :fun9 valid-i? :olaps valid-i? :start* valid-i?* :skip* valid-i?* ))
(stest/instrument `syncloop)

(defn syncloop:a
  {:arglists '([kamp kfreq kpitch kgrsize kprate klstart klend ifun8 ifun9 iolaps & istart* iskip*])}
  [amp freq pitch grsize prate lstart lend fun8 fun9 olaps & [ start* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "syncloop"
                      [amp freq pitch grsize prate lstart lend fun8 fun9 olaps start* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef syncloop:a
  :args (s/cat :amp valid-kr? :freq valid-kr? :pitch valid-kr? :grsize valid-kr? :prate valid-kr? :lstart valid-kr? :lend valid-kr? :fun8 valid-i? :fun9 valid-i? :olaps valid-i? :start* valid-i?* :skip* valid-i?* ))
(stest/instrument `syncloop:a)

(defn lpfreson
  {:arglists '([asig kfrqratio])}
  [sig frqratio]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "lpfreson"
                      [sig frqratio]
                      *global*)]
    (new out-types ast)))

(s/fdef lpfreson
  :args (s/cat :sig valid-ar? :frqratio valid-kr? ))
(stest/instrument `lpfreson)

(defn lpfreson:a
  {:arglists '([asig kfrqratio])}
  [sig frqratio]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "lpfreson"
                      [sig frqratio]
                      *global*)]
    (new out-types ast)))

(s/fdef lpfreson:a
  :args (s/cat :sig valid-ar? :frqratio valid-kr? ))
(stest/instrument `lpfreson:a)

(defn dates
  {:arglists '([& itime*])}
  [& [ time* ]]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "dates"
                      [time*]
                      *global*)]
    (new out-types ast)))

(s/fdef dates
  :args (s/cat :time* valid-i?* ))
(stest/instrument `dates)

(defn dates:S
  {:arglists '([& itime*])}
  [& [ time* ]]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "dates"
                      [time*]
                      *global*)]
    (new out-types ast)))

(s/fdef dates:S
  :args (s/cat :time* valid-i?* ))
(stest/instrument `dates:S)

(defn pvsgain
  {:arglists '([fsigin kgain])}
  [sigin gain]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsgain"
                      [sigin gain]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsgain
  :args (s/cat :sigin valid-f? :gain valid-kr? ))
(stest/instrument `pvsgain)

(defn pvsgain:f
  {:arglists '([fsigin kgain])}
  [sigin gain]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsgain"
                      [sigin gain]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsgain:f
  :args (s/cat :sigin valid-f? :gain valid-kr? ))
(stest/instrument `pvsgain:f)

(defn biquada
  {:arglists '([asig ab2 ab3 ab4 aa5 aa6 aa7 & iskip*])}
  [sig b2 b3 b4 a5 a6 a7 & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "biquada"
                      [sig b2 b3 b4 a5 a6 a7 skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef biquada
  :args (s/cat :sig valid-ar? :b2 valid-ar? :b3 valid-ar? :b4 valid-ar? :a5 valid-ar? :a6 valid-ar? :a7 valid-ar? :skip* valid-i?* ))
(stest/instrument `biquada)

(defn biquada:a
  {:arglists '([asig ab2 ab3 ab4 aa5 aa6 aa7 & iskip*])}
  [sig b2 b3 b4 a5 a6 a7 & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "biquada"
                      [sig b2 b3 b4 a5 a6 a7 skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef biquada:a
  :args (s/cat :sig valid-ar? :b2 valid-ar? :b3 valid-ar? :b4 valid-ar? :a5 valid-ar? :a6 valid-ar? :a7 valid-ar? :skip* valid-i?* ))
(stest/instrument `biquada:a)

(defn strlenk
  {:arglists '([Sstr])}
  [str]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "strlenk"
                      [str]
                      *global*)]
    (new out-types ast)))

(s/fdef strlenk
  :args (s/cat :str valid-S? ))
(stest/instrument `strlenk)

(defn strlenk:k
  {:arglists '([Sstr])}
  [str]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "strlenk"
                      [str]
                      *global*)]
    (new out-types ast)))

(s/fdef strlenk:k
  :args (s/cat :str valid-S? ))
(stest/instrument `strlenk:k)

(defn framebuffer
  {:arglists '([ain isize] [kin isize])}
  [in size]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "framebuffer"
                      [in size]
                      *global*)]
    (new out-types ast)))

(s/fdef framebuffer
  :args (s/alt
         :ai (s/cat :in valid-ar? :size valid-i? )
         ))
(stest/instrument `framebuffer)

(defn framebuffer:kArr
  {:arglists '([ain isize])}
  [in size]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "framebuffer"
                      [in size]
                      *global*)]
    (new out-types ast)))

(s/fdef framebuffer:kArr
  :args (s/cat :in valid-ar? :size valid-i? ))
(stest/instrument `framebuffer:kArr)

(defn framebuffer:a
  {:arglists '([kin isize])}
  [in size]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "framebuffer"
                      [in size]
                      *global*)]
    (new out-types ast)))

(s/fdef framebuffer:a
  :args (s/cat :in valid-kr? :size valid-i? ))
(stest/instrument `framebuffer:a)

(defn lenarray
  {:arglists '([iarrayArr & iwhich*] [karrayArr & iwhich*])}
  [array & [ which* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "lenarray"
                      [array which*]
                      *global*)]
    (new out-types ast)))

(s/fdef lenarray
  :args (s/alt
         :iArri (s/cat :array valid-iArr? :which* valid-i?* )
         ))
(stest/instrument `lenarray)

(defn lenarray:i
  {:arglists '([iarrayArr & iwhich*])}
  [array & [ which* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "lenarray"
                      [array which*]
                      *global*)]
    (new out-types ast)))

(s/fdef lenarray:i
  :args (s/cat :array valid-iArr? :which* valid-i?* ))
(stest/instrument `lenarray:i)

(defn lenarray:k
  {:arglists '([karrayArr & iwhich*])}
  [array & [ which* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "lenarray"
                      [array which*]
                      *global*)]
    (new out-types ast)))

(s/fdef lenarray:k
  :args (s/cat :array valid-kArr? :which* valid-i?* ))
(stest/instrument `lenarray:k)

(defn hrtfreverb
  {:arglists '([asrc ilowrt2 ihighrt3 Sfilel Sfiler & isr* imfp* iorder*])}
  [src lowrt2 highrt3 filel filer & [ sr* mfp* order* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal Variable]
        out-types [AudioSignal AudioSignal Variable]
        ast (ast-node out-types-quoted
                      "hrtfreverb"
                      [src lowrt2 highrt3 filel filer sr* mfp* order*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef hrtfreverb
  :args (s/cat :src valid-ar? :lowrt2 valid-i? :highrt3 valid-i? :filel valid-S? :filer valid-S? :sr* valid-i?* :mfp* valid-i?* :order* valid-i?* ))
(stest/instrument `hrtfreverb)

(defn scans
  {:arglists '([kamp kfreq itable id & iorder*])}
  [amp freq table d & [ order* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "scans"
                      [amp freq table d order*]
                      *global*)]
    (new out-types ast)))

(s/fdef scans
  :args (s/cat :amp valid-kr? :freq valid-kr? :table valid-i? :d valid-i? :order* valid-i?* ))
(stest/instrument `scans)

(defn scans:a
  {:arglists '([kamp kfreq itable id & iorder*])}
  [amp freq table d & [ order* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "scans"
                      [amp freq table d order*]
                      *global*)]
    (new out-types ast)))

(s/fdef scans:a
  :args (s/cat :amp valid-kr? :freq valid-kr? :table valid-i? :d valid-i? :order* valid-i?* ))
(stest/instrument `scans:a)

(defn vdelayxq
  {:arglists '([ain1 ain2 ain3 ain4 adl imd iws & ist*])}
  [in1 in2 in3 in4 dl md ws & [ st* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "vdelayxq"
                      [in1 in2 in3 in4 dl md ws st*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef vdelayxq
  :args (s/cat :in1 valid-ar? :in2 valid-ar? :in3 valid-ar? :in4 valid-ar? :dl valid-ar? :md valid-i? :ws valid-i? :st* valid-i?* ))
(stest/instrument `vdelayxq)

(defn wgpluck2
  {:arglists '([iplk kamp icps kpick krefl])}
  [plk amp cps pick refl]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "wgpluck2"
                      [plk amp cps pick refl]
                      *global*)]
    (new out-types ast)))

(s/fdef wgpluck2
  :args (s/cat :plk valid-i? :amp valid-kr? :cps valid-i? :pick valid-kr? :refl valid-kr? ))
(stest/instrument `wgpluck2)

(defn wgpluck2:a
  {:arglists '([iplk kamp icps kpick krefl])}
  [plk amp cps pick refl]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "wgpluck2"
                      [plk amp cps pick refl]
                      *global*)]
    (new out-types ast)))

(s/fdef wgpluck2:a
  :args (s/cat :plk valid-i? :amp valid-kr? :cps valid-i? :pick valid-kr? :refl valid-kr? ))
(stest/instrument `wgpluck2:a)

(defn remove
  {:arglists '([iinsnum] [Sinsnum])}
  [insnum]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "remove"
                      [insnum]
                      *global*)]
    (new out-types ast)))

(s/fdef remove
  :args (s/alt
         :i (s/cat :insnum valid-i? )
         ))
(stest/instrument `remove)

(defn fold
  {:arglists '([asig kincr])}
  [sig incr]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fold"
                      [sig incr]
                      *global*)]
    (new out-types ast)))

(s/fdef fold
  :args (s/cat :sig valid-ar? :incr valid-kr? ))
(stest/instrument `fold)

(defn fold:a
  {:arglists '([asig kincr])}
  [sig incr]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fold"
                      [sig incr]
                      *global*)]
    (new out-types ast)))

(s/fdef fold:a
  :args (s/cat :sig valid-ar? :incr valid-kr? ))
(stest/instrument `fold:a)

(defn mpulse
  {:arglists '([kamp kintvl & ioffset*])}
  [amp intvl & [ offset* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "mpulse"
                      [amp intvl offset*]
                      *global*)]
    (new out-types ast)))

(s/fdef mpulse
  :args (s/cat :amp valid-kr? :intvl valid-kr? :offset* valid-i?* ))
(stest/instrument `mpulse)

(defn mpulse:a
  {:arglists '([kamp kintvl & ioffset*])}
  [amp intvl & [ offset* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "mpulse"
                      [amp intvl offset*]
                      *global*)]
    (new out-types ast)))

(s/fdef mpulse:a
  :args (s/cat :amp valid-kr? :intvl valid-kr? :offset* valid-i?* ))
(stest/instrument `mpulse:a)

(defn hvs1
  {:arglists '([kx inumParms inumPointsX iOutTab iPositionsTab iSnapTab & iConfigTab*])}
  [x numParms numPointsX OutTab PositionsTab SnapTab & [ ConfigTab* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "hvs1"
                      [x numParms numPointsX OutTab PositionsTab SnapTab ConfigTab*]
                      *global*)]
    (new out-types ast)))

(s/fdef hvs1
  :args (s/cat :x valid-kr? :numParms valid-i? :numPointsX valid-i? :OutTab valid-i? :PositionsTab valid-i? :SnapTab valid-i? :ConfigTab* valid-i?* ))
(stest/instrument `hvs1)

(defn chn_S
  {:arglists '([Sname imode])}
  [name mode]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "chn_S"
                      [name mode]
                      *global*)]
    (new out-types ast)))

(s/fdef chn_S
  :args (s/cat :name valid-S? :mode valid-i? ))
(stest/instrument `chn_S)

(defn vexpv_i
  {:arglists '([ifn1 ifn2 ielements & idstoffset* isrcoffset*])}
  [fn1 fn2 elements & [ dstoffset* srcoffset* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vexpv_i"
                      [fn1 fn2 elements dstoffset* srcoffset*]
                      *global*)]
    (new out-types ast)))

(s/fdef vexpv_i
  :args (s/cat :fn1 valid-i? :fn2 valid-i? :elements valid-i? :dstoffset* valid-i?* :srcoffset* valid-i?* ))
(stest/instrument `vexpv_i)

(defn pvcross
  {:arglists '([ktimpnt kfmod Sfile kampscale4 kampscale5 & ispecwp*] [ktimpnt kfmod ifile kampscale4 kampscale5 & ispecwp*])}
  [timpnt fmod file ampscale4 ampscale5 & [ specwp* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pvcross"
                      [timpnt fmod file ampscale4 ampscale5 specwp*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvcross
  :args (s/alt
         :kkSkki (s/cat :timpnt valid-kr? :fmod valid-kr? :file valid-S? :ampscale4 valid-kr? :ampscale5 valid-kr? :specwp* valid-i?* )
         ))
(stest/instrument `pvcross)

(defn pvcross:a
  {:arglists '([ktimpnt kfmod Sfile kampscale4 kampscale5 & ispecwp*] [ktimpnt kfmod ifile kampscale4 kampscale5 & ispecwp*])}
  [timpnt fmod file ampscale4 ampscale5 & [ specwp* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pvcross"
                      [timpnt fmod file ampscale4 ampscale5 specwp*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvcross:a
  :args (s/alt
         :kkSkki (s/cat :timpnt valid-kr? :fmod valid-kr? :file valid-S? :ampscale4 valid-kr? :ampscale5 valid-kr? :specwp* valid-i?* )
         ))
(stest/instrument `pvcross:a)

(defn randi
  {:arglists '([xamp xcps iseed & isize* ioffset*] [xamp xcps iseed & isize* ioffset*])}
  [amp cps seed & [ size* offset* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "randi"
                      [amp cps seed size* offset*]
                      *global*)]
    (new out-types ast)))

(s/fdef randi
  :args (s/alt
         :xxiii (s/cat :amp valid-x? :cps valid-x? :seed valid-i? :size* valid-i?* :offset* valid-i?* )
         ))
(stest/instrument `randi)

(defn randi:a
  {:arglists '([xamp xcps iseed & isize* ioffset*])}
  [amp cps seed & [ size* offset* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "randi"
                      [amp cps seed size* offset*]
                      *global*)]
    (new out-types ast)))

(s/fdef randi:a
  :args (s/cat :amp valid-x? :cps valid-x? :seed valid-i? :size* valid-i?* :offset* valid-i?* ))
(stest/instrument `randi:a)

(defn randi:k
  {:arglists '([xamp xcps iseed & isize* ioffset*])}
  [amp cps seed & [ size* offset* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "randi"
                      [amp cps seed size* offset*]
                      *global*)]
    (new out-types ast)))

(s/fdef randi:k
  :args (s/cat :amp valid-x? :cps valid-x? :seed valid-i? :size* valid-i?* :offset* valid-i?* ))
(stest/instrument `randi:k)

(defn compilestr
  {:arglists '([Sorch])}
  [orch]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "compilestr"
                      [orch]
                      *global*)]
    (new out-types ast)))

(s/fdef compilestr
  :args (s/cat :orch valid-S? ))
(stest/instrument `compilestr)

(defn compilestr:i
  {:arglists '([Sorch])}
  [orch]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "compilestr"
                      [orch]
                      *global*)]
    (new out-types ast)))

(s/fdef compilestr:i
  :args (s/cat :orch valid-S? ))
(stest/instrument `compilestr:i)

(defn cpstuni
  {:arglists '([index itable])}
  [ndex table]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "cpstuni"
                      [ndex table]
                      *global*)]
    (new out-types ast)))

(s/fdef cpstuni
  :args (s/cat :ndex valid-i? :table valid-i? ))
(stest/instrument `cpstuni)

(defn cpstuni:i
  {:arglists '([index itable])}
  [ndex table]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "cpstuni"
                      [ndex table]
                      *global*)]
    (new out-types ast)))

(s/fdef cpstuni:i
  :args (s/cat :ndex valid-i? :table valid-i? ))
(stest/instrument `cpstuni:i)

(defn log10
  {:arglists '([aarg1] [iarg1] [iarg1Arr] [karg1] [karg1Arr])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "log10"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef log10
  :args (s/alt
         :a (s/cat :arg1 valid-ar? )
         ))
(stest/instrument `log10)

(defn log10:a
  {:arglists '([aarg1])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "log10"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef log10:a
  :args (s/cat :arg1 valid-ar? ))
(stest/instrument `log10:a)

(defn log10:i
  {:arglists '([iarg1])}
  [arg1]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "log10"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef log10:i
  :args (s/cat :arg1 valid-i? ))
(stest/instrument `log10:i)

(defn log10:iArr
  {:arglists '([iarg1Arr])}
  [arg1]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "log10"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef log10:iArr
  :args (s/cat :arg1 valid-iArr? ))
(stest/instrument `log10:iArr)

(defn log10:k
  {:arglists '([karg1])}
  [arg1]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "log10"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef log10:k
  :args (s/cat :arg1 valid-kr? ))
(stest/instrument `log10:k)

(defn log10:kArr
  {:arglists '([karg1Arr])}
  [arg1]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "log10"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef log10:kArr
  :args (s/cat :arg1 valid-kArr? ))
(stest/instrument `log10:kArr)

(defn mton
  {:arglists '([imidi] [kmidi])}
  [midi]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "mton"
                      [midi]
                      *global*)]
    (new out-types ast)))

(s/fdef mton
  :args (s/alt
         :i (s/cat :midi valid-i? )
         ))
(stest/instrument `mton)

(defn mton:S
  {:arglists '([imidi] [kmidi])}
  [midi]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "mton"
                      [midi]
                      *global*)]
    (new out-types ast)))

(s/fdef mton:S
  :args (s/alt
         :i (s/cat :midi valid-i? )
         ))
(stest/instrument `mton:S)

(defn midion2
  {:arglists '([kchn knum kvel ktrig])}
  [chn num vel trig]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "midion2"
                      [chn num vel trig]
                      *global*)]
    (new out-types ast)))

(s/fdef midion2
  :args (s/cat :chn valid-kr? :num valid-kr? :vel valid-kr? :trig valid-kr? ))
(stest/instrument `midion2)

(defn pvscent
  {:arglists '([fsig])}
  [sig]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "pvscent"
                      [sig]
                      *global*)]
    (new out-types ast)))

(s/fdef pvscent
  :args (s/cat :sig valid-f? ))
(stest/instrument `pvscent)

(defn pvscent:k
  {:arglists '([fsig])}
  [sig]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "pvscent"
                      [sig]
                      *global*)]
    (new out-types ast)))

(s/fdef pvscent:k
  :args (s/cat :sig valid-f? ))
(stest/instrument `pvscent:k)

(defn readk2
  {:arglists '([Sfilname iformat iprd] [ifilname iformat iprd])}
  [filname format prd]
  (let [out-types-quoted '[ControlSignal ControlSignal]
        out-types [ControlSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "readk2"
                      [filname format prd]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef readk2
  :args (s/alt
         :Sii (s/cat :filname valid-S? :format valid-i? :prd valid-i? )
         ))
(stest/instrument `readk2)

(defn harmon4
  {:arglists '([asig koct kfrq3 kfrq4 kfrq5 kfrq6 icpsmode ilowest & ipolarity*])}
  [sig oct frq3 frq4 frq5 frq6 cpsmode lowest & [ polarity* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "harmon4"
                      [sig oct frq3 frq4 frq5 frq6 cpsmode lowest polarity*]
                      *global*)]
    (new out-types ast)))

(s/fdef harmon4
  :args (s/cat :sig valid-ar? :oct valid-kr? :frq3 valid-kr? :frq4 valid-kr? :frq5 valid-kr? :frq6 valid-kr? :cpsmode valid-i? :lowest valid-i? :polarity* valid-i?* ))
(stest/instrument `harmon4)

(defn harmon4:a
  {:arglists '([asig koct kfrq3 kfrq4 kfrq5 kfrq6 icpsmode ilowest & ipolarity*])}
  [sig oct frq3 frq4 frq5 frq6 cpsmode lowest & [ polarity* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "harmon4"
                      [sig oct frq3 frq4 frq5 frq6 cpsmode lowest polarity*]
                      *global*)]
    (new out-types ast)))

(s/fdef harmon4:a
  :args (s/cat :sig valid-ar? :oct valid-kr? :frq3 valid-kr? :frq4 valid-kr? :frq5 valid-kr? :frq6 valid-kr? :cpsmode valid-i? :lowest valid-i? :polarity* valid-i?* ))
(stest/instrument `harmon4:a)

(defn jitter
  {:arglists '([kamp kcpsMin kcpsMax])}
  [amp cpsMin cpsMax]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "jitter"
                      [amp cpsMin cpsMax]
                      *global*)]
    (new out-types ast)))

(s/fdef jitter
  :args (s/cat :amp valid-kr? :cpsMin valid-kr? :cpsMax valid-kr? ))
(stest/instrument `jitter)

(defn jitter:k
  {:arglists '([kamp kcpsMin kcpsMax])}
  [amp cpsMin cpsMax]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "jitter"
                      [amp cpsMin cpsMax]
                      *global*)]
    (new out-types ast)))

(s/fdef jitter:k
  :args (s/cat :amp valid-kr? :cpsMin valid-kr? :cpsMax valid-kr? ))
(stest/instrument `jitter:k)

(defn moogladder
  {:arglists '([ain acenter-frequency aresonance & istor*] [ain acenter-frequency kresonance & istor*] [ain kcenter-frequency aresonance & istor*] [ain kcenter-frequency kresonance & istor*])}
  [in center-frequency resonance & [ stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "moogladder"
                      [in center-frequency resonance stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef moogladder
  :args (s/alt
         :aaai (s/cat :in valid-ar? :center-frequency valid-ar? :resonance valid-ar? :stor* valid-i?* )
         ))
(stest/instrument `moogladder)

(defn moogladder:a
  {:arglists '([ain acenter-frequency aresonance & istor*] [ain acenter-frequency kresonance & istor*] [ain kcenter-frequency aresonance & istor*] [ain kcenter-frequency kresonance & istor*])}
  [in center-frequency resonance & [ stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "moogladder"
                      [in center-frequency resonance stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef moogladder:a
  :args (s/alt
         :aaai (s/cat :in valid-ar? :center-frequency valid-ar? :resonance valid-ar? :stor* valid-i?* )
         ))
(stest/instrument `moogladder:a)

(defn diode_ladder
  {:arglists '([ain xcenter-frequency xk & knlp* ksaturation* istor*])}
  [in center-frequency k & [ nlp* saturation* stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "diode_ladder"
                      [in center-frequency k nlp* saturation* stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef diode_ladder
  :args (s/cat :in valid-ar? :center-frequency valid-x? :k valid-x? :nlp* valid-kr?* :saturation* valid-kr?* :stor* valid-i?* ))
(stest/instrument `diode_ladder)

(defn diode_ladder:a
  {:arglists '([ain xcenter-frequency xk & knlp* ksaturation* istor*])}
  [in center-frequency k & [ nlp* saturation* stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "diode_ladder"
                      [in center-frequency k nlp* saturation* stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef diode_ladder:a
  :args (s/cat :in valid-ar? :center-frequency valid-x? :k valid-x? :nlp* valid-kr?* :saturation* valid-kr?* :stor* valid-i?* ))
(stest/instrument `diode_ladder:a)

(defn notnum
  {:arglists '()}
  []
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "notnum"
                      []
                      *global*)]
    (new out-types ast)))


(defn notnum:i
  {:arglists '()}
  []
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "notnum"
                      []
                      *global*)]
    (new out-types ast)))


(defn delayk
  {:arglists '([ksig idelay & imode*])}
  [sig delay & [ mode* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "delayk"
                      [sig delay mode*]
                      *global*)]
    (new out-types ast)))

(s/fdef delayk
  :args (s/cat :sig valid-kr? :delay valid-i? :mode* valid-i?* ))
(stest/instrument `delayk)

(defn delayk:k
  {:arglists '([ksig idelay & imode*])}
  [sig delay & [ mode* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "delayk"
                      [sig delay mode*]
                      *global*)]
    (new out-types ast)))

(s/fdef delayk:k
  :args (s/cat :sig valid-kr? :delay valid-i? :mode* valid-i?* ))
(stest/instrument `delayk:k)

(defn ATSsinnoi
  {:arglists '([ktimepnt ksinlev knzlev kfmod Satsfile ipartials & ipartialoffset* ipartialincr*] [ktimepnt ksinlev knzlev kfmod iatsfile ipartials & ipartialoffset* ipartialincr*])}
  [timepnt sinlev nzlev fmod atsfile partials & [ partialoffset* partialincr* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "ATSsinnoi"
                      [timepnt sinlev nzlev fmod atsfile partials partialoffset* partialincr*]
                      *global*)]
    (new out-types ast)))

(s/fdef ATSsinnoi
  :args (s/alt
         :kkkkSiii (s/cat :timepnt valid-kr? :sinlev valid-kr? :nzlev valid-kr? :fmod valid-kr? :atsfile valid-S? :partials valid-i? :partialoffset* valid-i?* :partialincr* valid-i?* )
         ))
(stest/instrument `ATSsinnoi)

(defn ATSsinnoi:a
  {:arglists '([ktimepnt ksinlev knzlev kfmod Satsfile ipartials & ipartialoffset* ipartialincr*] [ktimepnt ksinlev knzlev kfmod iatsfile ipartials & ipartialoffset* ipartialincr*])}
  [timepnt sinlev nzlev fmod atsfile partials & [ partialoffset* partialincr* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "ATSsinnoi"
                      [timepnt sinlev nzlev fmod atsfile partials partialoffset* partialincr*]
                      *global*)]
    (new out-types ast)))

(s/fdef ATSsinnoi:a
  :args (s/alt
         :kkkkSiii (s/cat :timepnt valid-kr? :sinlev valid-kr? :nzlev valid-kr? :fmod valid-kr? :atsfile valid-S? :partials valid-i? :partialoffset* valid-i?* :partialincr* valid-i?* )
         ))
(stest/instrument `ATSsinnoi:a)

(defn fmax
  {:arglists '([iargArr iarg2] [iargArr iarg2Arr] [kargArr karg2] [kargArr karg2Arr])}
  [arg arg2]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "fmax"
                      [arg arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef fmax
  :args (s/alt
         :iArri (s/cat :arg valid-iArr? :arg2 valid-i? )
         ))
(stest/instrument `fmax)

(defn fmax:iArr
  {:arglists '([iargArr iarg2] [iargArr iarg2Arr])}
  [arg arg2]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "fmax"
                      [arg arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef fmax:iArr
  :args (s/alt
         :iArri (s/cat :arg valid-iArr? :arg2 valid-i? )
         ))
(stest/instrument `fmax:iArr)

(defn fmax:kArr
  {:arglists '([kargArr karg2] [kargArr karg2Arr])}
  [arg arg2]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "fmax"
                      [arg arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef fmax:kArr
  :args (s/alt
         :kArrk (s/cat :arg valid-kArr? :arg2 valid-kr? )
         ))
(stest/instrument `fmax:kArr)

(defn dumpk2
  {:arglists '([ksig1 ksig2 Sfilname iformat iprd] [ksig1 ksig2 ifilname iformat iprd])}
  [sig1 sig2 filname format prd]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "dumpk2"
                      [sig1 sig2 filname format prd]
                      *global*)]
    (new out-types ast)))

(s/fdef dumpk2
  :args (s/alt
         :kkSii (s/cat :sig1 valid-kr? :sig2 valid-kr? :filname valid-S? :format valid-i? :prd valid-i? )
         ))
(stest/instrument `dumpk2)

(defn scoreline
  {:arglists '([Sin ktrig])}
  [in trig]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "scoreline"
                      [in trig]
                      *global*)]
    (new out-types ast)))

(s/fdef scoreline
  :args (s/cat :in valid-S? :trig valid-kr? ))
(stest/instrument `scoreline)

(defn moogvcf2
  {:arglists '([asig xcutoff-frequency xresonance & iscale* iskip*])}
  [sig cutoff-frequency resonance & [ scale* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "moogvcf2"
                      [sig cutoff-frequency resonance scale* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef moogvcf2
  :args (s/cat :sig valid-ar? :cutoff-frequency valid-x? :resonance valid-x? :scale* valid-i?* :skip* valid-i?* ))
(stest/instrument `moogvcf2)

(defn moogvcf2:a
  {:arglists '([asig xcutoff-frequency xresonance & iscale* iskip*])}
  [sig cutoff-frequency resonance & [ scale* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "moogvcf2"
                      [sig cutoff-frequency resonance scale* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef moogvcf2:a
  :args (s/cat :sig valid-ar? :cutoff-frequency valid-x? :resonance valid-x? :scale* valid-i?* :skip* valid-i?* ))
(stest/instrument `moogvcf2:a)

(defn pvsin
  {:arglists '([kchan & isize* iolap* iwinsize* iwintype* iformat*])}
  [chan & [ size* olap* winsize* wintype* format* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsin"
                      [chan size* olap* winsize* wintype* format*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsin
  :args (s/cat :chan valid-kr? :size* valid-i?* :olap* valid-i?* :winsize* valid-i?* :wintype* valid-i?* :format* valid-i?* ))
(stest/instrument `pvsin)

(defn pvsin:f
  {:arglists '([kchan & isize* iolap* iwinsize* iwintype* iformat*])}
  [chan & [ size* olap* winsize* wintype* format* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsin"
                      [chan size* olap* winsize* wintype* format*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsin:f
  :args (s/cat :chan valid-kr? :size* valid-i?* :olap* valid-i?* :winsize* valid-i?* :wintype* valid-i?* :format* valid-i?* ))
(stest/instrument `pvsin:f)

(defn dcblock
  {:arglists '([ain & igain*])}
  [in & [ gain* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "dcblock"
                      [in gain*]
                      *global*)]
    (new out-types ast)))

(s/fdef dcblock
  :args (s/cat :in valid-ar? :gain* valid-i?* ))
(stest/instrument `dcblock)

(defn dcblock:a
  {:arglists '([ain & igain*])}
  [in & [ gain* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "dcblock"
                      [in gain*]
                      *global*)]
    (new out-types ast)))

(s/fdef dcblock:a
  :args (s/cat :in valid-ar? :gain* valid-i?* ))
(stest/instrument `dcblock:a)

(defn strtol
  {:arglists '([Sindex] [iindex])}
  [index]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "strtol"
                      [index]
                      *global*)]
    (new out-types ast)))

(s/fdef strtol
  :args (s/alt
         :S (s/cat :index valid-S? )
         ))
(stest/instrument `strtol)

(defn strtol:i
  {:arglists '([Sindex] [iindex])}
  [index]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "strtol"
                      [index]
                      *global*)]
    (new out-types ast)))

(s/fdef strtol:i
  :args (s/alt
         :S (s/cat :index valid-S? )
         ))
(stest/instrument `strtol:i)

(defn sfplist
  {:arglists '([ifilhandle])}
  [filhandle]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "sfplist"
                      [filhandle]
                      *global*)]
    (new out-types ast)))

(s/fdef sfplist
  :args (s/cat :filhandle valid-i? ))
(stest/instrument `sfplist)

(defn vlimit
  {:arglists '([itable kmin kmax ielements])}
  [table min max elements]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vlimit"
                      [table min max elements]
                      *global*)]
    (new out-types ast)))

(s/fdef vlimit
  :args (s/cat :table valid-i? :min valid-kr? :max valid-kr? :elements valid-i? ))
(stest/instrument `vlimit)

(defn pdclip
  {:arglists '([ain kWidth kCenter & ibipolar* ifullscale*])}
  [in Width Center & [ bipolar* fullscale* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pdclip"
                      [in Width Center bipolar* fullscale*]
                      *global*)]
    (new out-types ast)))

(s/fdef pdclip
  :args (s/cat :in valid-ar? :Width valid-kr? :Center valid-kr? :bipolar* valid-i?* :fullscale* valid-i?* ))
(stest/instrument `pdclip)

(defn pdclip:a
  {:arglists '([ain kWidth kCenter & ibipolar* ifullscale*])}
  [in Width Center & [ bipolar* fullscale* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pdclip"
                      [in Width Center bipolar* fullscale*]
                      *global*)]
    (new out-types ast)))

(s/fdef pdclip:a
  :args (s/cat :in valid-ar? :Width valid-kr? :Center valid-kr? :bipolar* valid-i?* :fullscale* valid-i?* ))
(stest/instrument `pdclip:a)

(defn pdhalf
  {:arglists '([ain kShapeAmount & ibipolar* ifullscale*])}
  [in ShapeAmount & [ bipolar* fullscale* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pdhalf"
                      [in ShapeAmount bipolar* fullscale*]
                      *global*)]
    (new out-types ast)))

(s/fdef pdhalf
  :args (s/cat :in valid-ar? :ShapeAmount valid-kr? :bipolar* valid-i?* :fullscale* valid-i?* ))
(stest/instrument `pdhalf)

(defn pdhalf:a
  {:arglists '([ain kShapeAmount & ibipolar* ifullscale*])}
  [in ShapeAmount & [ bipolar* fullscale* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pdhalf"
                      [in ShapeAmount bipolar* fullscale*]
                      *global*)]
    (new out-types ast)))

(s/fdef pdhalf:a
  :args (s/cat :in valid-ar? :ShapeAmount valid-kr? :bipolar* valid-i?* :fullscale* valid-i?* ))
(stest/instrument `pdhalf:a)

(defn vrandi
  {:arglists '([itable krange kcps ielements & idstoffset* iseed* isize* ioffset*])}
  [table range cps elements & [ dstoffset* seed* size* offset* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vrandi"
                      [table range cps elements dstoffset* seed* size* offset*]
                      *global*)]
    (new out-types ast)))

(s/fdef vrandi
  :args (s/cat :table valid-i? :range valid-kr? :cps valid-kr? :elements valid-i? :dstoffset* valid-i?* :seed* valid-i?* :size* valid-i?* :offset* valid-i?* ))
(stest/instrument `vrandi)

(defn butterhp
  {:arglists '([asig afreq & iskip*] [asig kfreq & iskip*])}
  [sig freq & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "butterhp"
                      [sig freq skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef butterhp
  :args (s/alt
         :aai (s/cat :sig valid-ar? :freq valid-ar? :skip* valid-i?* )
         ))
(stest/instrument `butterhp)

(defn butterhp:a
  {:arglists '([asig afreq & iskip*] [asig kfreq & iskip*])}
  [sig freq & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "butterhp"
                      [sig freq skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef butterhp:a
  :args (s/alt
         :aai (s/cat :sig valid-ar? :freq valid-ar? :skip* valid-i?* )
         ))
(stest/instrument `butterhp:a)

(defn invalue
  {:arglists '([Schannel-name] [ichannel-name] [Schannel-name] [ichannel-name] [Schannel-name] [ichannel-name])}
  [channel-name]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "invalue"
                      [channel-name]
                      *global*)]
    (new out-types ast)))

(s/fdef invalue
  :args (s/alt
         :S (s/cat :channel-name valid-S? )
         ))
(stest/instrument `invalue)

(defn invalue:S
  {:arglists '([Schannel-name] [ichannel-name])}
  [channel-name]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "invalue"
                      [channel-name]
                      *global*)]
    (new out-types ast)))

(s/fdef invalue:S
  :args (s/alt
         :S (s/cat :channel-name valid-S? )
         ))
(stest/instrument `invalue:S)

(defn invalue:i
  {:arglists '([Schannel-name] [ichannel-name])}
  [channel-name]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "invalue"
                      [channel-name]
                      *global*)]
    (new out-types ast)))

(s/fdef invalue:i
  :args (s/alt
         :S (s/cat :channel-name valid-S? )
         ))
(stest/instrument `invalue:i)

(defn invalue:k
  {:arglists '([Schannel-name] [ichannel-name])}
  [channel-name]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "invalue"
                      [channel-name]
                      *global*)]
    (new out-types ast)))

(s/fdef invalue:k
  :args (s/alt
         :S (s/cat :channel-name valid-S? )
         ))
(stest/instrument `invalue:k)

(defn strindex
  {:arglists '([Sarg1 Sarg2])}
  [arg1 arg2]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "strindex"
                      [arg1 arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef strindex
  :args (s/cat :arg1 valid-S? :arg2 valid-S? ))
(stest/instrument `strindex)

(defn strindex:i
  {:arglists '([Sarg1 Sarg2])}
  [arg1 arg2]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "strindex"
                      [arg1 arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef strindex:i
  :args (s/cat :arg1 valid-S? :arg2 valid-S? ))
(stest/instrument `strindex:i)

(defn sqrt
  {:arglists '([aarg1] [iarg1] [iarg1Arr] [karg1] [karg1Arr])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sqrt"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sqrt
  :args (s/alt
         :a (s/cat :arg1 valid-ar? )
         ))
(stest/instrument `sqrt)

(defn sqrt:a
  {:arglists '([aarg1])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sqrt"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sqrt:a
  :args (s/cat :arg1 valid-ar? ))
(stest/instrument `sqrt:a)

(defn sqrt:i
  {:arglists '([iarg1])}
  [arg1]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "sqrt"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sqrt:i
  :args (s/cat :arg1 valid-i? ))
(stest/instrument `sqrt:i)

(defn sqrt:iArr
  {:arglists '([iarg1Arr])}
  [arg1]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "sqrt"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sqrt:iArr
  :args (s/cat :arg1 valid-iArr? ))
(stest/instrument `sqrt:iArr)

(defn sqrt:k
  {:arglists '([karg1])}
  [arg1]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "sqrt"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sqrt:k
  :args (s/cat :arg1 valid-kr? ))
(stest/instrument `sqrt:k)

(defn sqrt:kArr
  {:arglists '([karg1Arr])}
  [arg1]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "sqrt"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sqrt:kArr
  :args (s/cat :arg1 valid-kArr? ))
(stest/instrument `sqrt:kArr)

(defn butterlp
  {:arglists '([asig afreq & iskip*] [asig kfreq & iskip*])}
  [sig freq & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "butterlp"
                      [sig freq skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef butterlp
  :args (s/alt
         :aai (s/cat :sig valid-ar? :freq valid-ar? :skip* valid-i?* )
         ))
(stest/instrument `butterlp)

(defn butterlp:a
  {:arglists '([asig afreq & iskip*] [asig kfreq & iskip*])}
  [sig freq & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "butterlp"
                      [sig freq skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef butterlp:a
  :args (s/alt
         :aai (s/cat :sig valid-ar? :freq valid-ar? :skip* valid-i?* )
         ))
(stest/instrument `butterlp:a)

(defn vtabk
  {:arglists '([kindex itable & kout1* kout2* kout3* koutN4* koutN5* koutN6* koutN7* koutN8* koutN9* koutN10* koutN11* koutN12* koutN13* koutN14* koutN15* koutN16*])}
  [index table & [ out1* out2* out3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vtabk"
                      [index table out1* out2* out3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef vtabk
  :args (s/cat :index valid-kr? :table valid-i? :out1* valid-kr?* :out2* valid-kr?* :out3* valid-kr?* :outN4* valid-kr?* :outN5* valid-kr?* :outN6* valid-kr?* :outN7* valid-kr?* :outN8* valid-kr?* :outN9* valid-kr?* :outN10* valid-kr?* :outN11* valid-kr?* :outN12* valid-kr?* :outN13* valid-kr?* :outN14* valid-kr?* :outN15* valid-kr?* :outN16* valid-kr?* ))
(stest/instrument `vtabk)

(defn printk2
  {:arglists '([kvar & inumspaces*])}
  [var & [ numspaces* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "printk2"
                      [var numspaces*]
                      *global*)]
    (new out-types ast)))

(s/fdef printk2
  :args (s/cat :var valid-kr? :numspaces* valid-i?* ))
(stest/instrument `printk2)

(defn tempo
  {:arglists '([ktempo istarttempo])}
  [tempo starttempo]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "tempo"
                      [tempo starttempo]
                      *global*)]
    (new out-types ast)))

(s/fdef tempo
  :args (s/cat :tempo valid-kr? :starttempo valid-i? ))
(stest/instrument `tempo)

(defn sortd
  {:arglists '([iarg1Arr] [karg1Arr])}
  [arg1]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "sortd"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sortd
  :args (s/alt
         :iArr (s/cat :arg1 valid-iArr? )
         ))
(stest/instrument `sortd)

(defn sortd:iArr
  {:arglists '([iarg1Arr])}
  [arg1]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "sortd"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sortd:iArr
  :args (s/cat :arg1 valid-iArr? ))
(stest/instrument `sortd:iArr)

(defn sortd:kArr
  {:arglists '([karg1Arr])}
  [arg1]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "sortd"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sortd:kArr
  :args (s/cat :arg1 valid-kArr? ))
(stest/instrument `sortd:kArr)

(defn serialWrite_i
  {:arglists '([iPort SBytes] [iPort iBytes])}
  [Port Bytes]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "serialWrite_i"
                      [Port Bytes]
                      *global*)]
    (new out-types ast)))

(s/fdef serialWrite_i
  :args (s/alt
         :iS (s/cat :Port valid-i? :Bytes valid-S? )
         ))
(stest/instrument `serialWrite_i)

(defn outic14
  {:arglists '([ichn imsb ilsb ivalue imin imax])}
  [chn msb lsb value min max]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outic14"
                      [chn msb lsb value min max]
                      *global*)]
    (new out-types ast)))

(s/fdef outic14
  :args (s/cat :chn valid-i? :msb valid-i? :lsb valid-i? :value valid-i? :min valid-i? :max valid-i? ))
(stest/instrument `outic14)

(defn lphasor
  {:arglists '([xtrns & ilps* ilpe* imode* istrt* istor* istor* istor*])}
  [trns & [ lps* lpe* mode* strt* stor* stor* stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "lphasor"
                      [trns lps* lpe* mode* strt* stor* stor* stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef lphasor
  :args (s/cat :trns valid-x? :lps* valid-i?* :lpe* valid-i?* :mode* valid-i?* :strt* valid-i?* :stor* valid-i?* :stor* valid-i?* :stor* valid-i?* ))
(stest/instrument `lphasor)

(defn lphasor:a
  {:arglists '([xtrns & ilps* ilpe* imode* istrt* istor* istor* istor*])}
  [trns & [ lps* lpe* mode* strt* stor* stor* stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "lphasor"
                      [trns lps* lpe* mode* strt* stor* stor* stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef lphasor:a
  :args (s/cat :trns valid-x? :lps* valid-i?* :lpe* valid-i?* :mode* valid-i?* :strt* valid-i?* :stor* valid-i?* :stor* valid-i?* :stor* valid-i?* ))
(stest/instrument `lphasor:a)

(defn bformenc1
  {:arglists '([asig kalpha kbeta] [asig kalpha kbeta])}
  [sig alpha beta]
  (let [out-types-quoted 'AudioArray
        out-types AudioArray
        ast (ast-node out-types-quoted
                      "bformenc1"
                      [sig alpha beta]
                      *global*)]
    (new out-types ast)))

(s/fdef bformenc1
  :args (s/alt
         :akk (s/cat :sig valid-ar? :alpha valid-kr? :beta valid-kr? )
         ))
(stest/instrument `bformenc1)

(defn bformenc1:aArr
  {:arglists '([asig kalpha kbeta])}
  [sig alpha beta]
  (let [out-types-quoted 'AudioArray
        out-types AudioArray
        ast (ast-node out-types-quoted
                      "bformenc1"
                      [sig alpha beta]
                      *global*)]
    (new out-types ast)))

(s/fdef bformenc1:aArr
  :args (s/cat :sig valid-ar? :alpha valid-kr? :beta valid-kr? ))
(stest/instrument `bformenc1:aArr)

(defn bformenc1:a
  {:arglists '([asig kalpha kbeta])}
  [sig alpha beta]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "bformenc1"
                      [sig alpha beta]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef bformenc1:a
  :args (s/cat :sig valid-ar? :alpha valid-kr? :beta valid-kr? ))
(stest/instrument `bformenc1:a)

(defn pareq
  {:arglists '([asig kc kv kq & imode* iskip*])}
  [sig c v q & [ mode* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pareq"
                      [sig c v q mode* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef pareq
  :args (s/cat :sig valid-ar? :c valid-kr? :v valid-kr? :q valid-kr? :mode* valid-i?* :skip* valid-i?* ))
(stest/instrument `pareq)

(defn pareq:a
  {:arglists '([asig kc kv kq & imode* iskip*])}
  [sig c v q & [ mode* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pareq"
                      [sig c v q mode* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef pareq:a
  :args (s/cat :sig valid-ar? :c valid-kr? :v valid-kr? :q valid-kr? :mode* valid-i?* :skip* valid-i?* ))
(stest/instrument `pareq:a)

(defn control
  {:arglists '([knum])}
  [num]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "control"
                      [num]
                      *global*)]
    (new out-types ast)))

(s/fdef control
  :args (s/cat :num valid-kr? ))
(stest/instrument `control)

(defn control:k
  {:arglists '([knum])}
  [num]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "control"
                      [num]
                      *global*)]
    (new out-types ast)))

(s/fdef control:k
  :args (s/cat :num valid-kr? ))
(stest/instrument `control:k)

(defn zdf_1pole
  {:arglists '([ain xcenter-frequency & kmode* istor*])}
  [in center-frequency & [ mode* stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "zdf_1pole"
                      [in center-frequency mode* stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef zdf_1pole
  :args (s/cat :in valid-ar? :center-frequency valid-x? :mode* valid-kr?* :stor* valid-i?* ))
(stest/instrument `zdf_1pole)

(defn zdf_1pole:a
  {:arglists '([ain xcenter-frequency & kmode* istor*])}
  [in center-frequency & [ mode* stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "zdf_1pole"
                      [in center-frequency mode* stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef zdf_1pole:a
  :args (s/cat :in valid-ar? :center-frequency valid-x? :mode* valid-kr?* :stor* valid-i?* ))
(stest/instrument `zdf_1pole:a)

(defn pvsbufread2
  {:arglists '([ktime khandle kft3 kft4])}
  [time handle ft3 ft4]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsbufread2"
                      [time handle ft3 ft4]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsbufread2
  :args (s/cat :time valid-kr? :handle valid-kr? :ft3 valid-kr? :ft4 valid-kr? ))
(stest/instrument `pvsbufread2)

(defn pvsbufread2:f
  {:arglists '([ktime khandle kft3 kft4])}
  [time handle ft3 ft4]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsbufread2"
                      [time handle ft3 ft4]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsbufread2:f
  :args (s/cat :time valid-kr? :handle valid-kr? :ft3 valid-kr? :ft4 valid-kr? ))
(stest/instrument `pvsbufread2:f)

(defn genarray_i
  {:arglists '([istart iend & inc*])}
  [start end & [ nc* ]]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "genarray_i"
                      [start end nc*]
                      *global*)]
    (new out-types ast)))

(s/fdef genarray_i
  :args (s/cat :start valid-i? :end valid-i? :nc* valid-i?* ))
(stest/instrument `genarray_i)

(defn genarray_i:kArr
  {:arglists '([istart iend & inc*])}
  [start end & [ nc* ]]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "genarray_i"
                      [start end nc*]
                      *global*)]
    (new out-types ast)))

(s/fdef genarray_i:kArr
  :args (s/cat :start valid-i? :end valid-i? :nc* valid-i?* ))
(stest/instrument `genarray_i:kArr)

(defn zakinit
  {:arglists '([isizea isizek])}
  [sizea sizek]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "zakinit"
                      [sizea sizek]
                      *global*)]
    (new out-types ast)))

(s/fdef zakinit
  :args (s/cat :sizea valid-i? :sizek valid-i? ))
(stest/instrument `zakinit)

(defn ctrl7
  {:arglists '([ichan ictlno kmin kmax & itable* icutoff*] [ichan ictlno imin imax & itable*] [ichan ictlno kmin kmax & itable*])}
  [chan ctlno min max & [ table* cutoff* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "ctrl7"
                      [chan ctlno min max table* cutoff*]
                      *global*)]
    (new out-types ast)))

(s/fdef ctrl7
  :args (s/alt
         :iikkii (s/cat :chan valid-i? :ctlno valid-i? :min valid-kr? :max valid-kr? :table* valid-i?* :cutoff* valid-i?* )
         ))
(stest/instrument `ctrl7)

(defn ctrl7:a
  {:arglists '([ichan ictlno kmin kmax & itable* icutoff*])}
  [chan ctlno min max & [ table* cutoff* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "ctrl7"
                      [chan ctlno min max table* cutoff*]
                      *global*)]
    (new out-types ast)))

(s/fdef ctrl7:a
  :args (s/cat :chan valid-i? :ctlno valid-i? :min valid-kr? :max valid-kr? :table* valid-i?* :cutoff* valid-i?* ))
(stest/instrument `ctrl7:a)

(defn ctrl7:i
  {:arglists '([ichan ictlno imin imax & itable*])}
  [chan ctlno min max & [ table* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ctrl7"
                      [chan ctlno min max table*]
                      *global*)]
    (new out-types ast)))

(s/fdef ctrl7:i
  :args (s/cat :chan valid-i? :ctlno valid-i? :min valid-i? :max valid-i? :table* valid-i?* ))
(stest/instrument `ctrl7:i)

(defn ctrl7:k
  {:arglists '([ichan ictlno kmin kmax & itable*])}
  [chan ctlno min max & [ table* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "ctrl7"
                      [chan ctlno min max table*]
                      *global*)]
    (new out-types ast)))

(s/fdef ctrl7:k
  :args (s/cat :chan valid-i? :ctlno valid-i? :min valid-kr? :max valid-kr? :table* valid-i?* ))
(stest/instrument `ctrl7:k)

(defn vpow_i
  {:arglists '([itable ival ielements & idstoffset*])}
  [table val elements & [ dstoffset* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vpow_i"
                      [table val elements dstoffset*]
                      *global*)]
    (new out-types ast)))

(s/fdef vpow_i
  :args (s/cat :table valid-i? :val valid-i? :elements valid-i? :dstoffset* valid-i?* ))
(stest/instrument `vpow_i)

(defn zdf_2pole_mode
  {:arglists '([ain xcenter-frequency xQ & istor*])}
  [in center-frequency Q & [ stor* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "zdf_2pole_mode"
                      [in center-frequency Q stor*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef zdf_2pole_mode
  :args (s/cat :in valid-ar? :center-frequency valid-x? :Q valid-x? :stor* valid-i?* ))
(stest/instrument `zdf_2pole_mode)

(defn wgbowedbar
  {:arglists '([kamp kfreq kpos kbowpres kgain & iconst* itvel* ibowpos* ilow*])}
  [amp freq pos bowpres gain & [ const* tvel* bowpos* low* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "wgbowedbar"
                      [amp freq pos bowpres gain const* tvel* bowpos* low*]
                      *global*)]
    (new out-types ast)))

(s/fdef wgbowedbar
  :args (s/cat :amp valid-kr? :freq valid-kr? :pos valid-kr? :bowpres valid-kr? :gain valid-kr? :const* valid-i?* :tvel* valid-i?* :bowpos* valid-i?* :low* valid-i?* ))
(stest/instrument `wgbowedbar)

(defn wgbowedbar:a
  {:arglists '([kamp kfreq kpos kbowpres kgain & iconst* itvel* ibowpos* ilow*])}
  [amp freq pos bowpres gain & [ const* tvel* bowpos* low* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "wgbowedbar"
                      [amp freq pos bowpres gain const* tvel* bowpos* low*]
                      *global*)]
    (new out-types ast)))

(s/fdef wgbowedbar:a
  :args (s/cat :amp valid-kr? :freq valid-kr? :pos valid-kr? :bowpres valid-kr? :gain valid-kr? :const* valid-i?* :tvel* valid-i?* :bowpos* valid-i?* :low* valid-i?* ))
(stest/instrument `wgbowedbar:a)

(defn pvslock
  {:arglists '([fsigin klock])}
  [sigin lock]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvslock"
                      [sigin lock]
                      *global*)]
    (new out-types ast)))

(s/fdef pvslock
  :args (s/cat :sigin valid-f? :lock valid-kr? ))
(stest/instrument `pvslock)

(defn pvslock:f
  {:arglists '([fsigin klock])}
  [sigin lock]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvslock"
                      [sigin lock]
                      *global*)]
    (new out-types ast)))

(s/fdef pvslock:f
  :args (s/cat :sigin valid-f? :lock valid-kr? ))
(stest/instrument `pvslock:f)

(defn hrtfmove
  {:arglists '([asrc kAz kElev Sfilel Sfiler & imode* ifade* isr*])}
  [src Az Elev filel filer & [ mode* fade* sr* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "hrtfmove"
                      [src Az Elev filel filer mode* fade* sr*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef hrtfmove
  :args (s/cat :src valid-ar? :Az valid-kr? :Elev valid-kr? :filel valid-S? :filer valid-S? :mode* valid-i?* :fade* valid-i?* :sr* valid-i?* ))
(stest/instrument `hrtfmove)

(defn dssiaudio
  {:arglists '([ihandle & xin1* xin2* xin3* xin4* xin5* xin6* xin7* xin8* xin9* xin10* xin11* xin12* xin13* xin14* xin15* xin16*])}
  [handle & [ in1* in2* in3* in4* in5* in6* in7* in8* in9* in10* in11* in12* in13* in14* in15* in16* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "dssiaudio"
                      [handle in1* in2* in3* in4* in5* in6* in7* in8* in9* in10* in11* in12* in13* in14* in15* in16*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef dssiaudio
  :args (s/cat :handle valid-i? :in1* valid-x?* :in2* valid-x?* :in3* valid-x?* :in4* valid-x?* :in5* valid-x?* :in6* valid-x?* :in7* valid-x?* :in8* valid-x?* :in9* valid-x?* :in10* valid-x?* :in11* valid-x?* :in12* valid-x?* :in13* valid-x?* :in14* valid-x?* :in15* valid-x?* :in16* valid-x?* ))
(stest/instrument `dssiaudio)

(defn vtable1k
  {:arglists '([ktable & kout1* kout2* kout3* koutN4* koutN5* koutN6* koutN7* koutN8* koutN9* koutN10* koutN11* koutN12* koutN13* koutN14* koutN15* koutN16*])}
  [table & [ out1* out2* out3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vtable1k"
                      [table out1* out2* out3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef vtable1k
  :args (s/cat :table valid-kr? :out1* valid-kr?* :out2* valid-kr?* :out3* valid-kr?* :outN4* valid-kr?* :outN5* valid-kr?* :outN6* valid-kr?* :outN7* valid-kr?* :outN8* valid-kr?* :outN9* valid-kr?* :outN10* valid-kr?* :outN11* valid-kr?* :outN12* valid-kr?* :outN13* valid-kr?* :outN14* valid-kr?* :outN15* valid-kr?* :outN16* valid-kr?* ))
(stest/instrument `vtable1k)

(defn butlp
  {:arglists '([asig afreq & iskip*] [asig kfreq & iskip*])}
  [sig freq & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "butlp"
                      [sig freq skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef butlp
  :args (s/alt
         :aai (s/cat :sig valid-ar? :freq valid-ar? :skip* valid-i?* )
         ))
(stest/instrument `butlp)

(defn butlp:a
  {:arglists '([asig afreq & iskip*] [asig kfreq & iskip*])}
  [sig freq & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "butlp"
                      [sig freq skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef butlp:a
  :args (s/alt
         :aai (s/cat :sig valid-ar? :freq valid-ar? :skip* valid-i?* )
         ))
(stest/instrument `butlp:a)

(defn fouti
  {:arglists '([ihandle iformat iflag & iout1* iout2* iout3* ioutN4* ioutN5* ioutN6* ioutN7* ioutN8* ioutN9* ioutN10* ioutN11* ioutN12* ioutN13* ioutN14* ioutN15* ioutN16*])}
  [handle format flag & [ out1* out2* out3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "fouti"
                      [handle format flag out1* out2* out3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef fouti
  :args (s/cat :handle valid-i? :format valid-i? :flag valid-i? :out1* valid-i?* :out2* valid-i?* :out3* valid-i?* :outN4* valid-i?* :outN5* valid-i?* :outN6* valid-i?* :outN7* valid-i?* :outN8* valid-i?* :outN9* valid-i?* :outN10* valid-i?* :outN11* valid-i?* :outN12* valid-i?* :outN13* valid-i?* :outN14* valid-i?* :outN15* valid-i?* :outN16* valid-i?* ))
(stest/instrument `fouti)

(defn lowresx
  {:arglists '([asig xcutoff xresonance & inumlayer* iskip*])}
  [sig cutoff resonance & [ numlayer* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "lowresx"
                      [sig cutoff resonance numlayer* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef lowresx
  :args (s/cat :sig valid-ar? :cutoff valid-x? :resonance valid-x? :numlayer* valid-i?* :skip* valid-i?* ))
(stest/instrument `lowresx)

(defn lowresx:a
  {:arglists '([asig xcutoff xresonance & inumlayer* iskip*])}
  [sig cutoff resonance & [ numlayer* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "lowresx"
                      [sig cutoff resonance numlayer* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef lowresx:a
  :args (s/cat :sig valid-ar? :cutoff valid-x? :resonance valid-x? :numlayer* valid-i?* :skip* valid-i?* ))
(stest/instrument `lowresx:a)

(defn fprints
  {:arglists '([Sfilename Sstring & xval1* xval2* xval3* xval4* xval5* xval6* xval7* xval8* xval9* xval10* xval11* xval12* xval13* xval14* xval15* xval16*] [ifilename Sstring & xval1* xval2* xval3* xval4* xval5* xval6* xval7* xval8* xval9* xval10* xval11* xval12* xval13* xval14* xval15* xval16*])}
  [filename string & [ val1* val2* val3* val4* val5* val6* val7* val8* val9* val10* val11* val12* val13* val14* val15* val16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "fprints"
                      [filename string val1* val2* val3* val4* val5* val6* val7* val8* val9* val10* val11* val12* val13* val14* val15* val16*]
                      *global*)]
    (new out-types ast)))

(s/fdef fprints
  :args (s/alt
         :SSxxxxxxxxxxxxxxxx (s/cat :filename valid-S? :string valid-S? :val1* valid-x?* :val2* valid-x?* :val3* valid-x?* :val4* valid-x?* :val5* valid-x?* :val6* valid-x?* :val7* valid-x?* :val8* valid-x?* :val9* valid-x?* :val10* valid-x?* :val11* valid-x?* :val12* valid-x?* :val13* valid-x?* :val14* valid-x?* :val15* valid-x?* :val16* valid-x?* )
         ))
(stest/instrument `fprints)

(defn port
  {:arglists '([ksig ihtim & isig*])}
  [sig htim & [ sig* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "port"
                      [sig htim sig*]
                      *global*)]
    (new out-types ast)))

(s/fdef port
  :args (s/cat :sig valid-kr? :htim valid-i? :sig* valid-i?* ))
(stest/instrument `port)

(defn port:k
  {:arglists '([ksig ihtim & isig*])}
  [sig htim & [ sig* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "port"
                      [sig htim sig*]
                      *global*)]
    (new out-types ast)))

(s/fdef port:k
  :args (s/cat :sig valid-kr? :htim valid-i? :sig* valid-i?* ))
(stest/instrument `port:k)

(defn nstance
  {:arglists '([Sinsname iwhen idur & ip1* ip2* ip3* ip4* ip5* ip6* ip7* ip8* ip9* ip10* ip11* ip12* ip13* ip14* ip15* ip16*] [iinsname iwhen idur & ip1* ip2* ip3* ip4* ip5* ip6* ip7* ip8* ip9* ip10* ip11* ip12* ip13* ip14* ip15* ip16*] [Sinsname Swhen & kdur1* kp2* kp3* kp4* kp5* kp6* kp7* kp8* kp9* kp10* kp11* kp12* kp13* kp14* kp15* kp16*] [kinsname kwhen & kdur1* kp2* kp3* kp4* kp5* kp6* kp7* kp8* kp9* kp10* kp11* kp12* kp13* kp14* kp15* kp16*])}
  [insname when dur & [ p1* p2* p3* p4* p5* p6* p7* p8* p9* p10* p11* p12* p13* p14* p15* p16* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "nstance"
                      [insname when dur p1* p2* p3* p4* p5* p6* p7* p8* p9* p10* p11* p12* p13* p14* p15* p16*]
                      *global*)]
    (new out-types ast)))

(s/fdef nstance
  :args (s/alt
         :Siiiiiiiiiiiiiiiiii (s/cat :insname valid-S? :when valid-i? :dur valid-i? :p1* valid-i?* :p2* valid-i?* :p3* valid-i?* :p4* valid-i?* :p5* valid-i?* :p6* valid-i?* :p7* valid-i?* :p8* valid-i?* :p9* valid-i?* :p10* valid-i?* :p11* valid-i?* :p12* valid-i?* :p13* valid-i?* :p14* valid-i?* :p15* valid-i?* :p16* valid-i?* )
         ))
(stest/instrument `nstance)

(defn nstance:i
  {:arglists '([Sinsname iwhen idur & ip1* ip2* ip3* ip4* ip5* ip6* ip7* ip8* ip9* ip10* ip11* ip12* ip13* ip14* ip15* ip16*] [iinsname iwhen idur & ip1* ip2* ip3* ip4* ip5* ip6* ip7* ip8* ip9* ip10* ip11* ip12* ip13* ip14* ip15* ip16*])}
  [insname when dur & [ p1* p2* p3* p4* p5* p6* p7* p8* p9* p10* p11* p12* p13* p14* p15* p16* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "nstance"
                      [insname when dur p1* p2* p3* p4* p5* p6* p7* p8* p9* p10* p11* p12* p13* p14* p15* p16*]
                      *global*)]
    (new out-types ast)))

(s/fdef nstance:i
  :args (s/alt
         :Siiiiiiiiiiiiiiiiii (s/cat :insname valid-S? :when valid-i? :dur valid-i? :p1* valid-i?* :p2* valid-i?* :p3* valid-i?* :p4* valid-i?* :p5* valid-i?* :p6* valid-i?* :p7* valid-i?* :p8* valid-i?* :p9* valid-i?* :p10* valid-i?* :p11* valid-i?* :p12* valid-i?* :p13* valid-i?* :p14* valid-i?* :p15* valid-i?* :p16* valid-i?* )
         ))
(stest/instrument `nstance:i)

(defn nstance:k
  {:arglists '([Sinsname Swhen & kdur1* kp2* kp3* kp4* kp5* kp6* kp7* kp8* kp9* kp10* kp11* kp12* kp13* kp14* kp15* kp16*] [kinsname kwhen & kdur1* kp2* kp3* kp4* kp5* kp6* kp7* kp8* kp9* kp10* kp11* kp12* kp13* kp14* kp15* kp16*])}
  [insname when & [ dur1* p2* p3* p4* p5* p6* p7* p8* p9* p10* p11* p12* p13* p14* p15* p16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "nstance"
                      [insname when dur1* p2* p3* p4* p5* p6* p7* p8* p9* p10* p11* p12* p13* p14* p15* p16*]
                      *global*)]
    (new out-types ast)))

(s/fdef nstance:k
  :args (s/alt
         :SSkkkkkkkkkkkkkkkk (s/cat :insname valid-S? :when valid-S? :dur1* valid-kr?* :p2* valid-kr?* :p3* valid-kr?* :p4* valid-kr?* :p5* valid-kr?* :p6* valid-kr?* :p7* valid-kr?* :p8* valid-kr?* :p9* valid-kr?* :p10* valid-kr?* :p11* valid-kr?* :p12* valid-kr?* :p13* valid-kr?* :p14* valid-kr?* :p15* valid-kr?* :p16* valid-kr?* )
         ))
(stest/instrument `nstance:k)

(defn tablegpw
  {:arglists '([ktable])}
  [table]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "tablegpw"
                      [table]
                      *global*)]
    (new out-types ast)))

(s/fdef tablegpw
  :args (s/cat :table valid-kr? ))
(stest/instrument `tablegpw)

(defn ampmidid
  {:arglists '([ivelocity idecibels & idecibels*] [kvelocity idecibels & idecibels*])}
  [velocity decibels & [ decibels* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ampmidid"
                      [velocity decibels decibels*]
                      *global*)]
    (new out-types ast)))

(s/fdef ampmidid
  :args (s/alt
         :iii (s/cat :velocity valid-i? :decibels valid-i? :decibels* valid-i?* )
         ))
(stest/instrument `ampmidid)

(defn ampmidid:i
  {:arglists '([ivelocity idecibels & idecibels*])}
  [velocity decibels & [ decibels* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ampmidid"
                      [velocity decibels decibels*]
                      *global*)]
    (new out-types ast)))

(s/fdef ampmidid:i
  :args (s/cat :velocity valid-i? :decibels valid-i? :decibels* valid-i?* ))
(stest/instrument `ampmidid:i)

(defn ampmidid:k
  {:arglists '([kvelocity idecibels & idecibels*])}
  [velocity decibels & [ decibels* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "ampmidid"
                      [velocity decibels decibels*]
                      *global*)]
    (new out-types ast)))

(s/fdef ampmidid:k
  :args (s/cat :velocity valid-kr? :decibels valid-i? :decibels* valid-i?* ))
(stest/instrument `ampmidid:k)

(defn tan
  {:arglists '([aarg1] [iarg1] [iarg1Arr] [karg1] [karg1Arr])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tan"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef tan
  :args (s/alt
         :a (s/cat :arg1 valid-ar? )
         ))
(stest/instrument `tan)

(defn tan:a
  {:arglists '([aarg1])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tan"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef tan:a
  :args (s/cat :arg1 valid-ar? ))
(stest/instrument `tan:a)

(defn tan:i
  {:arglists '([iarg1])}
  [arg1]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "tan"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef tan:i
  :args (s/cat :arg1 valid-i? ))
(stest/instrument `tan:i)

(defn tan:iArr
  {:arglists '([iarg1Arr])}
  [arg1]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "tan"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef tan:iArr
  :args (s/cat :arg1 valid-iArr? ))
(stest/instrument `tan:iArr)

(defn tan:k
  {:arglists '([karg1])}
  [arg1]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "tan"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef tan:k
  :args (s/cat :arg1 valid-kr? ))
(stest/instrument `tan:k)

(defn tan:kArr
  {:arglists '([karg1Arr])}
  [arg1]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "tan"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef tan:kArr
  :args (s/cat :arg1 valid-kArr? ))
(stest/instrument `tan:kArr)

(defn denorm
  {:arglists '([& aarg1* aarg2* aarg3* aarg4* aarg5* aarg6* aarg7* aarg8* aarg9* aarg10* aarg11* aarg12* aarg13* aarg14* aarg15* aarg16* aarg17* aarg18* aarg19* aarg20* aarg21* aarg22* aarg23* aarg24* aarg25* aarg26* aarg27* aarg28* aarg29* aarg30* aarg31* aarg32*])}
  [& [ arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16* arg17* arg18* arg19* arg20* arg21* arg22* arg23* arg24* arg25* arg26* arg27* arg28* arg29* arg30* arg31* arg32* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "denorm"
                      [arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16* arg17* arg18* arg19* arg20* arg21* arg22* arg23* arg24* arg25* arg26* arg27* arg28* arg29* arg30* arg31* arg32*]
                      *global*)]
    (new out-types ast)))

(s/fdef denorm
  :args (s/cat :arg1* valid-ar?* :arg2* valid-ar?* :arg3* valid-ar?* :arg4* valid-ar?* :arg5* valid-ar?* :arg6* valid-ar?* :arg7* valid-ar?* :arg8* valid-ar?* :arg9* valid-ar?* :arg10* valid-ar?* :arg11* valid-ar?* :arg12* valid-ar?* :arg13* valid-ar?* :arg14* valid-ar?* :arg15* valid-ar?* :arg16* valid-ar?* :arg17* valid-ar?* :arg18* valid-ar?* :arg19* valid-ar?* :arg20* valid-ar?* :arg21* valid-ar?* :arg22* valid-ar?* :arg23* valid-ar?* :arg24* valid-ar?* :arg25* valid-ar?* :arg26* valid-ar?* :arg27* valid-ar?* :arg28* valid-ar?* :arg29* valid-ar?* :arg30* valid-ar?* :arg31* valid-ar?* :arg32* valid-ar?* ))
(stest/instrument `denorm)

(defn cos
  {:arglists '([aarg1] [iarg1] [iarg1Arr] [karg1] [karg1Arr])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "cos"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef cos
  :args (s/alt
         :a (s/cat :arg1 valid-ar? )
         ))
(stest/instrument `cos)

(defn cos:a
  {:arglists '([aarg1])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "cos"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef cos:a
  :args (s/cat :arg1 valid-ar? ))
(stest/instrument `cos:a)

(defn cos:i
  {:arglists '([iarg1])}
  [arg1]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "cos"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef cos:i
  :args (s/cat :arg1 valid-i? ))
(stest/instrument `cos:i)

(defn cos:iArr
  {:arglists '([iarg1Arr])}
  [arg1]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "cos"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef cos:iArr
  :args (s/cat :arg1 valid-iArr? ))
(stest/instrument `cos:iArr)

(defn cos:k
  {:arglists '([karg1])}
  [arg1]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "cos"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef cos:k
  :args (s/cat :arg1 valid-kr? ))
(stest/instrument `cos:k)

(defn cos:kArr
  {:arglists '([karg1Arr])}
  [arg1]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "cos"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef cos:kArr
  :args (s/cat :arg1 valid-kArr? ))
(stest/instrument `cos:kArr)

(defn outo
  {:arglists '([& asig1* asig2* asig3* asig4* asig5* asig6* asig7* asig8* asig9* asig10* asig11* asig12* asig13* asig14* asig15* asig16* asig17* asig18* asig19* asig20* asig21* asig22* asig23* asig24* asig25* asig26* asig27* asig28* asig29* asig30* asig31* asig32*])}
  [& [ sig1* sig2* sig3* sig4* sig5* sig6* sig7* sig8* sig9* sig10* sig11* sig12* sig13* sig14* sig15* sig16* sig17* sig18* sig19* sig20* sig21* sig22* sig23* sig24* sig25* sig26* sig27* sig28* sig29* sig30* sig31* sig32* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outo"
                      [sig1* sig2* sig3* sig4* sig5* sig6* sig7* sig8* sig9* sig10* sig11* sig12* sig13* sig14* sig15* sig16* sig17* sig18* sig19* sig20* sig21* sig22* sig23* sig24* sig25* sig26* sig27* sig28* sig29* sig30* sig31* sig32*]
                      *global*)]
    (new out-types ast)))

(s/fdef outo
  :args (s/cat :sig1* valid-ar?* :sig2* valid-ar?* :sig3* valid-ar?* :sig4* valid-ar?* :sig5* valid-ar?* :sig6* valid-ar?* :sig7* valid-ar?* :sig8* valid-ar?* :sig9* valid-ar?* :sig10* valid-ar?* :sig11* valid-ar?* :sig12* valid-ar?* :sig13* valid-ar?* :sig14* valid-ar?* :sig15* valid-ar?* :sig16* valid-ar?* :sig17* valid-ar?* :sig18* valid-ar?* :sig19* valid-ar?* :sig20* valid-ar?* :sig21* valid-ar?* :sig22* valid-ar?* :sig23* valid-ar?* :sig24* valid-ar?* :sig25* valid-ar?* :sig26* valid-ar?* :sig27* valid-ar?* :sig28* valid-ar?* :sig29* valid-ar?* :sig30* valid-ar?* :sig31* valid-ar?* :sig32* valid-ar?* ))
(stest/instrument `outo)

(defn dumpk4
  {:arglists '([ksig1 ksig2 ksig3 ksig4 Sfilname iformat iprd] [ksig1 ksig2 ksig3 ksig4 ifilname iformat iprd])}
  [sig1 sig2 sig3 sig4 filname format prd]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "dumpk4"
                      [sig1 sig2 sig3 sig4 filname format prd]
                      *global*)]
    (new out-types ast)))

(s/fdef dumpk4
  :args (s/alt
         :kkkkSii (s/cat :sig1 valid-kr? :sig2 valid-kr? :sig3 valid-kr? :sig4 valid-kr? :filname valid-S? :format valid-i? :prd valid-i? )
         ))
(stest/instrument `dumpk4)

(defn midifilestatus
  {:arglists '()}
  []
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "midifilestatus"
                      []
                      *global*)]
    (new out-types ast)))


(defn midifilestatus:k
  {:arglists '()}
  []
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "midifilestatus"
                      []
                      *global*)]
    (new out-types ast)))


(defn syncphasor
  {:arglists '([xcps asyncin & iphase*])}
  [cps syncin & [ phase* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "syncphasor"
                      [cps syncin phase*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef syncphasor
  :args (s/cat :cps valid-x? :syncin valid-ar? :phase* valid-i?* ))
(stest/instrument `syncphasor)

(defn vtabwk
  {:arglists '([kindex itable & kinarg1* kinarg2* kinarg3* kinargN4* kinargN5* kinargN6* kinargN7* kinargN8* kinargN9* kinargN10* kinargN11* kinargN12* kinargN13* kinargN14* kinargN15* kinargN16*])}
  [index table & [ inarg1* inarg2* inarg3* inargN4* inargN5* inargN6* inargN7* inargN8* inargN9* inargN10* inargN11* inargN12* inargN13* inargN14* inargN15* inargN16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vtabwk"
                      [index table inarg1* inarg2* inarg3* inargN4* inargN5* inargN6* inargN7* inargN8* inargN9* inargN10* inargN11* inargN12* inargN13* inargN14* inargN15* inargN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef vtabwk
  :args (s/cat :index valid-kr? :table valid-i? :inarg1* valid-kr?* :inarg2* valid-kr?* :inarg3* valid-kr?* :inargN4* valid-kr?* :inargN5* valid-kr?* :inargN6* valid-kr?* :inargN7* valid-kr?* :inargN8* valid-kr?* :inargN9* valid-kr?* :inargN10* valid-kr?* :inargN11* valid-kr?* :inargN12* valid-kr?* :inargN13* valid-kr?* :inargN14* valid-kr?* :inargN15* valid-kr?* :inargN16* valid-kr?* ))
(stest/instrument `vtabwk)

(defn midic21
  {:arglists '([ictlno1 ictlno2 ictlno3 imin imax & itable*] [ictlno1 ictlno2 ictlno3 kmin kmax & itable*])}
  [ctlno1 ctlno2 ctlno3 min max & [ table* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "midic21"
                      [ctlno1 ctlno2 ctlno3 min max table*]
                      *global*)]
    (new out-types ast)))

(s/fdef midic21
  :args (s/alt
         :iiiiii (s/cat :ctlno1 valid-i? :ctlno2 valid-i? :ctlno3 valid-i? :min valid-i? :max valid-i? :table* valid-i?* )
         ))
(stest/instrument `midic21)

(defn midic21:i
  {:arglists '([ictlno1 ictlno2 ictlno3 imin imax & itable*])}
  [ctlno1 ctlno2 ctlno3 min max & [ table* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "midic21"
                      [ctlno1 ctlno2 ctlno3 min max table*]
                      *global*)]
    (new out-types ast)))

(s/fdef midic21:i
  :args (s/cat :ctlno1 valid-i? :ctlno2 valid-i? :ctlno3 valid-i? :min valid-i? :max valid-i? :table* valid-i?* ))
(stest/instrument `midic21:i)

(defn midic21:k
  {:arglists '([ictlno1 ictlno2 ictlno3 kmin kmax & itable*])}
  [ctlno1 ctlno2 ctlno3 min max & [ table* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "midic21"
                      [ctlno1 ctlno2 ctlno3 min max table*]
                      *global*)]
    (new out-types ast)))

(s/fdef midic21:k
  :args (s/cat :ctlno1 valid-i? :ctlno2 valid-i? :ctlno3 valid-i? :min valid-kr? :max valid-kr? :table* valid-i?* ))
(stest/instrument `midic21:k)

(defn mandel
  {:arglists '([ktrig kx ky kmaxIter])}
  [trig x y maxIter]
  (let [out-types-quoted '[ControlSignal ControlSignal]
        out-types [ControlSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "mandel"
                      [trig x y maxIter]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef mandel
  :args (s/cat :trig valid-kr? :x valid-kr? :y valid-kr? :maxIter valid-kr? ))
(stest/instrument `mandel)

(defn filebit
  {:arglists '([Sfilcod & iallowraw*] [ifilcod & iallowraw*])}
  [filcod & [ allowraw* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "filebit"
                      [filcod allowraw*]
                      *global*)]
    (new out-types ast)))

(s/fdef filebit
  :args (s/alt
         :Si (s/cat :filcod valid-S? :allowraw* valid-i?* )
         ))
(stest/instrument `filebit)

(defn filebit:i
  {:arglists '([Sfilcod & iallowraw*] [ifilcod & iallowraw*])}
  [filcod & [ allowraw* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "filebit"
                      [filcod allowraw*]
                      *global*)]
    (new out-types ast)))

(s/fdef filebit:i
  :args (s/alt
         :Si (s/cat :filcod valid-S? :allowraw* valid-i?* )
         ))
(stest/instrument `filebit:i)

(defn chn_k
  {:arglists '([Sname imode & itype* idflt* imin* ima* ix* iy* iwidth* iheight* xattribute1* xattribute2* xattribute3* xattribute4* xattribute5* xattribute6* xattribute7* xattribute8* xattribute9* xattribute10* xattribute11* xattribute12* xattribute13* xattribute14* xattribute15* xattribute16*])}
  [name mode & [ type* dflt* min* ma* x* y* width* height* attribute1* attribute2* attribute3* attribute4* attribute5* attribute6* attribute7* attribute8* attribute9* attribute10* attribute11* attribute12* attribute13* attribute14* attribute15* attribute16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "chn_k"
                      [name mode type* dflt* min* ma* x* y* width* height* attribute1* attribute2* attribute3* attribute4* attribute5* attribute6* attribute7* attribute8* attribute9* attribute10* attribute11* attribute12* attribute13* attribute14* attribute15* attribute16*]
                      *global*)]
    (new out-types ast)))

(s/fdef chn_k
  :args (s/cat :name valid-S? :mode valid-i? :type* valid-i?* :dflt* valid-i?* :min* valid-i?* :ma* valid-i?* :x* valid-i?* :y* valid-i?* :width* valid-i?* :height* valid-i?* :attribute1* valid-x?* :attribute2* valid-x?* :attribute3* valid-x?* :attribute4* valid-x?* :attribute5* valid-x?* :attribute6* valid-x?* :attribute7* valid-x?* :attribute8* valid-x?* :attribute9* valid-x?* :attribute10* valid-x?* :attribute11* valid-x?* :attribute12* valid-x?* :attribute13* valid-x?* :attribute14* valid-x?* :attribute15* valid-x?* :attribute16* valid-x?* ))
(stest/instrument `chn_k)

(defn powershape
  {:arglists '([ain kShapeAmount & ifullscale*])}
  [in ShapeAmount & [ fullscale* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "powershape"
                      [in ShapeAmount fullscale*]
                      *global*)]
    (new out-types ast)))

(s/fdef powershape
  :args (s/cat :in valid-ar? :ShapeAmount valid-kr? :fullscale* valid-i?* ))
(stest/instrument `powershape)

(defn powershape:a
  {:arglists '([ain kShapeAmount & ifullscale*])}
  [in ShapeAmount & [ fullscale* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "powershape"
                      [in ShapeAmount fullscale*]
                      *global*)]
    (new out-types ast)))

(s/fdef powershape:a
  :args (s/cat :in valid-ar? :ShapeAmount valid-kr? :fullscale* valid-i?* ))
(stest/instrument `powershape:a)

(defn vtabwi
  {:arglists '([iindex itable & inarg1* inarg2* inarg3* inargN4* inargN5* inargN6* inargN7* inargN8* inargN9* inargN10* inargN11* inargN12* inargN13* inargN14* inargN15* inargN16*])}
  [index table & [ narg1* narg2* narg3* nargN4* nargN5* nargN6* nargN7* nargN8* nargN9* nargN10* nargN11* nargN12* nargN13* nargN14* nargN15* nargN16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vtabwi"
                      [index table narg1* narg2* narg3* nargN4* nargN5* nargN6* nargN7* nargN8* nargN9* nargN10* nargN11* nargN12* nargN13* nargN14* nargN15* nargN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef vtabwi
  :args (s/cat :index valid-i? :table valid-i? :narg1* valid-i?* :narg2* valid-i?* :narg3* valid-i?* :nargN4* valid-i?* :nargN5* valid-i?* :nargN6* valid-i?* :nargN7* valid-i?* :nargN8* valid-i?* :nargN9* valid-i?* :nargN10* valid-i?* :nargN11* valid-i?* :nargN12* valid-i?* :nargN13* valid-i?* :nargN14* valid-i?* :nargN15* valid-i?* :nargN16* valid-i?* ))
(stest/instrument `vtabwi)

(defn mirror
  {:arglists '([asig klow khigh] [isig ilow ihigh] [ksig klow khigh])}
  [sig low high]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "mirror"
                      [sig low high]
                      *global*)]
    (new out-types ast)))

(s/fdef mirror
  :args (s/alt
         :akk (s/cat :sig valid-ar? :low valid-kr? :high valid-kr? )
         ))
(stest/instrument `mirror)

(defn mirror:a
  {:arglists '([asig klow khigh])}
  [sig low high]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "mirror"
                      [sig low high]
                      *global*)]
    (new out-types ast)))

(s/fdef mirror:a
  :args (s/cat :sig valid-ar? :low valid-kr? :high valid-kr? ))
(stest/instrument `mirror:a)

(defn mirror:i
  {:arglists '([isig ilow ihigh])}
  [sig low high]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "mirror"
                      [sig low high]
                      *global*)]
    (new out-types ast)))

(s/fdef mirror:i
  :args (s/cat :sig valid-i? :low valid-i? :high valid-i? ))
(stest/instrument `mirror:i)

(defn mirror:k
  {:arglists '([ksig klow khigh])}
  [sig low high]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "mirror"
                      [sig low high]
                      *global*)]
    (new out-types ast)))

(s/fdef mirror:k
  :args (s/cat :sig valid-kr? :low valid-kr? :high valid-kr? ))
(stest/instrument `mirror:k)

(defn line
  {:arglists '([ia idur ib] [ia idur ib])}
  [a dur b]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "line"
                      [a dur b]
                      *global*)]
    (new out-types ast)))

(s/fdef line
  :args (s/alt
         :iii (s/cat :a valid-i? :dur valid-i? :b valid-i? )
         ))
(stest/instrument `line)

(defn line:a
  {:arglists '([ia idur ib])}
  [a dur b]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "line"
                      [a dur b]
                      *global*)]
    (new out-types ast)))

(s/fdef line:a
  :args (s/cat :a valid-i? :dur valid-i? :b valid-i? ))
(stest/instrument `line:a)

(defn line:k
  {:arglists '([ia idur ib])}
  [a dur b]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "line"
                      [a dur b]
                      *global*)]
    (new out-types ast)))

(s/fdef line:k
  :args (s/cat :a valid-i? :dur valid-i? :b valid-i? ))
(stest/instrument `line:k)

(defn bamboo
  {:arglists '([kamp idettack & inum* idamp* imaxshake* ifreq* ifreq1* ifreq1*])}
  [amp dettack & [ num* damp* maxshake* freq* freq1* freq1* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "bamboo"
                      [amp dettack num* damp* maxshake* freq* freq1* freq1*]
                      *global*)]
    (new out-types ast)))

(s/fdef bamboo
  :args (s/cat :amp valid-kr? :dettack valid-i? :num* valid-i?* :damp* valid-i?* :maxshake* valid-i?* :freq* valid-i?* :freq1* valid-i?* :freq1* valid-i?* ))
(stest/instrument `bamboo)

(defn bamboo:a
  {:arglists '([kamp idettack & inum* idamp* imaxshake* ifreq* ifreq1* ifreq1*])}
  [amp dettack & [ num* damp* maxshake* freq* freq1* freq1* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "bamboo"
                      [amp dettack num* damp* maxshake* freq* freq1* freq1*]
                      *global*)]
    (new out-types ast)))

(s/fdef bamboo:a
  :args (s/cat :amp valid-kr? :dettack valid-i? :num* valid-i?* :damp* valid-i?* :maxshake* valid-i?* :freq* valid-i?* :freq1* valid-i?* :freq1* valid-i?* ))
(stest/instrument `bamboo:a)

(defn out
  {:arglists '([aarrayArr] [aarrayArr] [& aarray1* aarray2* aarray3* aarray4* aarray5* aarray6* aarray7* aarray8* aarray9* aarray10* aarray11* aarray12* aarray13* aarray14* aarray15* aarray16* aarray17* aarray18* aarray19* aarray20* aarray21* aarray22* aarray23* aarray24* aarray25* aarray26* aarray27* aarray28* aarray29* aarray30* aarray31* aarray32*])}
  [array]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "out"
                      [array]
                      *global*)]
    (new out-types ast)))

(s/fdef out
  :args (s/alt
         :aArr (s/cat :array valid-aArr? )
         ))
(stest/instrument `out)

(defn ihold
  {:arglists '()}
  []
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "ihold"
                      []
                      *global*)]
    (new out-types ast)))


(defn minabs
  {:arglists '([ain1 & ain1* ain2* ain3* ain4* ain5* ain6* ain7* ain8* ain9* ain10* ain11* ain12* ain13* ain14* ain15* ain16* ain17* ain18* ain19* ain20* ain21* ain22* ain23* ain24* ain25* ain26* ain27* ain28* ain29* ain30* ain31* ain32*] [kin1 & kin1* kin2* kin3* kin4* kin5* kin6* kin7* kin8* kin9* kin10* kin11* kin12* kin13* kin14* kin15* kin16*])}
  [in1 & [ in1* in2* in3* in4* in5* in6* in7* in8* in9* in10* in11* in12* in13* in14* in15* in16* in17* in18* in19* in20* in21* in22* in23* in24* in25* in26* in27* in28* in29* in30* in31* in32* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "minabs"
                      [in1 in1* in2* in3* in4* in5* in6* in7* in8* in9* in10* in11* in12* in13* in14* in15* in16* in17* in18* in19* in20* in21* in22* in23* in24* in25* in26* in27* in28* in29* in30* in31* in32*]
                      *global*)]
    (new out-types ast)))

(s/fdef minabs
  :args (s/alt
         :aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa (s/cat :in1 valid-ar? :in1* valid-ar?* :in2* valid-ar?* :in3* valid-ar?* :in4* valid-ar?* :in5* valid-ar?* :in6* valid-ar?* :in7* valid-ar?* :in8* valid-ar?* :in9* valid-ar?* :in10* valid-ar?* :in11* valid-ar?* :in12* valid-ar?* :in13* valid-ar?* :in14* valid-ar?* :in15* valid-ar?* :in16* valid-ar?* :in17* valid-ar?* :in18* valid-ar?* :in19* valid-ar?* :in20* valid-ar?* :in21* valid-ar?* :in22* valid-ar?* :in23* valid-ar?* :in24* valid-ar?* :in25* valid-ar?* :in26* valid-ar?* :in27* valid-ar?* :in28* valid-ar?* :in29* valid-ar?* :in30* valid-ar?* :in31* valid-ar?* :in32* valid-ar?* )
         ))
(stest/instrument `minabs)

(defn minabs:a
  {:arglists '([ain1 & ain1* ain2* ain3* ain4* ain5* ain6* ain7* ain8* ain9* ain10* ain11* ain12* ain13* ain14* ain15* ain16* ain17* ain18* ain19* ain20* ain21* ain22* ain23* ain24* ain25* ain26* ain27* ain28* ain29* ain30* ain31* ain32*])}
  [in1 & [ in1* in2* in3* in4* in5* in6* in7* in8* in9* in10* in11* in12* in13* in14* in15* in16* in17* in18* in19* in20* in21* in22* in23* in24* in25* in26* in27* in28* in29* in30* in31* in32* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "minabs"
                      [in1 in1* in2* in3* in4* in5* in6* in7* in8* in9* in10* in11* in12* in13* in14* in15* in16* in17* in18* in19* in20* in21* in22* in23* in24* in25* in26* in27* in28* in29* in30* in31* in32*]
                      *global*)]
    (new out-types ast)))

(s/fdef minabs:a
  :args (s/cat :in1 valid-ar? :in1* valid-ar?* :in2* valid-ar?* :in3* valid-ar?* :in4* valid-ar?* :in5* valid-ar?* :in6* valid-ar?* :in7* valid-ar?* :in8* valid-ar?* :in9* valid-ar?* :in10* valid-ar?* :in11* valid-ar?* :in12* valid-ar?* :in13* valid-ar?* :in14* valid-ar?* :in15* valid-ar?* :in16* valid-ar?* :in17* valid-ar?* :in18* valid-ar?* :in19* valid-ar?* :in20* valid-ar?* :in21* valid-ar?* :in22* valid-ar?* :in23* valid-ar?* :in24* valid-ar?* :in25* valid-ar?* :in26* valid-ar?* :in27* valid-ar?* :in28* valid-ar?* :in29* valid-ar?* :in30* valid-ar?* :in31* valid-ar?* :in32* valid-ar?* ))
(stest/instrument `minabs:a)

(defn minabs:k
  {:arglists '([kin1 & kin1* kin2* kin3* kin4* kin5* kin6* kin7* kin8* kin9* kin10* kin11* kin12* kin13* kin14* kin15* kin16*])}
  [in1 & [ in1* in2* in3* in4* in5* in6* in7* in8* in9* in10* in11* in12* in13* in14* in15* in16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "minabs"
                      [in1 in1* in2* in3* in4* in5* in6* in7* in8* in9* in10* in11* in12* in13* in14* in15* in16*]
                      *global*)]
    (new out-types ast)))

(s/fdef minabs:k
  :args (s/cat :in1 valid-kr? :in1* valid-kr?* :in2* valid-kr?* :in3* valid-kr?* :in4* valid-kr?* :in5* valid-kr?* :in6* valid-kr?* :in7* valid-kr?* :in8* valid-kr?* :in9* valid-kr?* :in10* valid-kr?* :in11* valid-kr?* :in12* valid-kr?* :in13* valid-kr?* :in14* valid-kr?* :in15* valid-kr?* :in16* valid-kr?* ))
(stest/instrument `minabs:k)

(defn randomi
  {:arglists '([kmin kmax xcps & imode* ifirstval*] [kmin kmax kcps & imode* ifirstval*])}
  [min max cps & [ mode* firstval* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "randomi"
                      [min max cps mode* firstval*]
                      *global*)]
    (new out-types ast)))

(s/fdef randomi
  :args (s/alt
         :kkxii (s/cat :min valid-kr? :max valid-kr? :cps valid-x? :mode* valid-i?* :firstval* valid-i?* )
         ))
(stest/instrument `randomi)

(defn randomi:a
  {:arglists '([kmin kmax xcps & imode* ifirstval*])}
  [min max cps & [ mode* firstval* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "randomi"
                      [min max cps mode* firstval*]
                      *global*)]
    (new out-types ast)))

(s/fdef randomi:a
  :args (s/cat :min valid-kr? :max valid-kr? :cps valid-x? :mode* valid-i?* :firstval* valid-i?* ))
(stest/instrument `randomi:a)

(defn randomi:k
  {:arglists '([kmin kmax kcps & imode* ifirstval*])}
  [min max cps & [ mode* firstval* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "randomi"
                      [min max cps mode* firstval*]
                      *global*)]
    (new out-types ast)))

(s/fdef randomi:k
  :args (s/cat :min valid-kr? :max valid-kr? :cps valid-kr? :mode* valid-i?* :firstval* valid-i?* ))
(stest/instrument `randomi:k)

(defn zar
  {:arglists '([kindex])}
  [index]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "zar"
                      [index]
                      *global*)]
    (new out-types ast)))

(s/fdef zar
  :args (s/cat :index valid-kr? ))
(stest/instrument `zar)

(defn zar:a
  {:arglists '([kindex])}
  [index]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "zar"
                      [index]
                      *global*)]
    (new out-types ast)))

(s/fdef zar:a
  :args (s/cat :index valid-kr? ))
(stest/instrument `zar:a)

(defn outrg
  {:arglists '([kstart & aout1* aout2* aout3* aoutN4* aoutN5* aoutN6* aoutN7* aoutN8* aoutN9* aoutN10* aoutN11* aoutN12* aoutN13* aoutN14* aoutN15* aoutN16* aoutN17* aoutN18* aoutN19* aoutN20* aoutN21* aoutN22* aoutN23* aoutN24* aoutN25* aoutN26* aoutN27* aoutN28* aoutN29* aoutN30* aoutN31* aoutN32*])}
  [start & [ out1* out2* out3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16* outN17* outN18* outN19* outN20* outN21* outN22* outN23* outN24* outN25* outN26* outN27* outN28* outN29* outN30* outN31* outN32* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outrg"
                      [start out1* out2* out3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16* outN17* outN18* outN19* outN20* outN21* outN22* outN23* outN24* outN25* outN26* outN27* outN28* outN29* outN30* outN31* outN32*]
                      *global*)]
    (new out-types ast)))

(s/fdef outrg
  :args (s/cat :start valid-kr? :out1* valid-ar?* :out2* valid-ar?* :out3* valid-ar?* :outN4* valid-ar?* :outN5* valid-ar?* :outN6* valid-ar?* :outN7* valid-ar?* :outN8* valid-ar?* :outN9* valid-ar?* :outN10* valid-ar?* :outN11* valid-ar?* :outN12* valid-ar?* :outN13* valid-ar?* :outN14* valid-ar?* :outN15* valid-ar?* :outN16* valid-ar?* :outN17* valid-ar?* :outN18* valid-ar?* :outN19* valid-ar?* :outN20* valid-ar?* :outN21* valid-ar?* :outN22* valid-ar?* :outN23* valid-ar?* :outN24* valid-ar?* :outN25* valid-ar?* :outN26* valid-ar?* :outN27* valid-ar?* :outN28* valid-ar?* :outN29* valid-ar?* :outN30* valid-ar?* :outN31* valid-ar?* :outN32* valid-ar?* ))
(stest/instrument `outrg)

(defn partikkelget
  {:arglists '([kparameterindex iopcode_id])}
  [parameterindex opcode_id]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "partikkelget"
                      [parameterindex opcode_id]
                      *global*)]
    (new out-types ast)))

(s/fdef partikkelget
  :args (s/cat :parameterindex valid-kr? :opcode_id valid-i? ))
(stest/instrument `partikkelget)

(defn partikkelget:k
  {:arglists '([kparameterindex iopcode_id])}
  [parameterindex opcode_id]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "partikkelget"
                      [parameterindex opcode_id]
                      *global*)]
    (new out-types ast)))

(s/fdef partikkelget:k
  :args (s/cat :parameterindex valid-kr? :opcode_id valid-i? ))
(stest/instrument `partikkelget:k)

(defn chn_a
  {:arglists '([Sname imode])}
  [name mode]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "chn_a"
                      [name mode]
                      *global*)]
    (new out-types ast)))

(s/fdef chn_a
  :args (s/cat :name valid-S? :mode valid-i? ))
(stest/instrument `chn_a)

(defn sandpaper
  {:arglists '([iamp idettack & inum* idamp* imaxshake*])}
  [amp dettack & [ num* damp* maxshake* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sandpaper"
                      [amp dettack num* damp* maxshake*]
                      *global*)]
    (new out-types ast)))

(s/fdef sandpaper
  :args (s/cat :amp valid-i? :dettack valid-i? :num* valid-i?* :damp* valid-i?* :maxshake* valid-i?* ))
(stest/instrument `sandpaper)

(defn sandpaper:a
  {:arglists '([iamp idettack & inum* idamp* imaxshake*])}
  [amp dettack & [ num* damp* maxshake* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sandpaper"
                      [amp dettack num* damp* maxshake*]
                      *global*)]
    (new out-types ast)))

(s/fdef sandpaper:a
  :args (s/cat :amp valid-i? :dettack valid-i? :num* valid-i?* :damp* valid-i?* :maxshake* valid-i?* ))
(stest/instrument `sandpaper:a)

(defn outq4
  {:arglists '([asig])}
  [sig]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outq4"
                      [sig]
                      *global*)]
    (new out-types ast)))

(s/fdef outq4
  :args (s/cat :sig valid-ar? ))
(stest/instrument `outq4)

(defn pvspitch
  {:arglists '([fsig kthresh])}
  [sig thresh]
  (let [out-types-quoted '[ControlSignal ControlSignal]
        out-types [ControlSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "pvspitch"
                      [sig thresh]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef pvspitch
  :args (s/cat :sig valid-f? :thresh valid-kr? ))
(stest/instrument `pvspitch)

(defn zarg
  {:arglists '([kindex kgain])}
  [index gain]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "zarg"
                      [index gain]
                      *global*)]
    (new out-types ast)))

(s/fdef zarg
  :args (s/cat :index valid-kr? :gain valid-kr? ))
(stest/instrument `zarg)

(defn zarg:a
  {:arglists '([kindex kgain])}
  [index gain]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "zarg"
                      [index gain]
                      *global*)]
    (new out-types ast)))

(s/fdef zarg:a
  :args (s/cat :index valid-kr? :gain valid-kr? ))
(stest/instrument `zarg:a)

(defn cpsmidi
  {:arglists '()}
  []
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "cpsmidi"
                      []
                      *global*)]
    (new out-types ast)))


(defn cpsmidi:i
  {:arglists '()}
  []
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "cpsmidi"
                      []
                      *global*)]
    (new out-types ast)))


(defn gendy
  {:arglists '([kamp kampdist kdurdist kadpar kddpar kminfreq kmaxfreq kampscl kdurscl & initcps* knum*] [kamp kampdist kdurdist kadpar kddpar kminfreq kmaxfreq kampscl kdurscl & initcps* knum*])}
  [amp ampdist durdist adpar ddpar minfreq maxfreq ampscl durscl & [ nitcps* num* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "gendy"
                      [amp ampdist durdist adpar ddpar minfreq maxfreq ampscl durscl nitcps* num*]
                      *global*)]
    (new out-types ast)))

(s/fdef gendy
  :args (s/alt
         :kkkkkkkkkik (s/cat :amp valid-kr? :ampdist valid-kr? :durdist valid-kr? :adpar valid-kr? :ddpar valid-kr? :minfreq valid-kr? :maxfreq valid-kr? :ampscl valid-kr? :durscl valid-kr? :nitcps* valid-i?* :num* valid-kr?* )
         ))
(stest/instrument `gendy)

(defn gendy:a
  {:arglists '([kamp kampdist kdurdist kadpar kddpar kminfreq kmaxfreq kampscl kdurscl & initcps* knum*])}
  [amp ampdist durdist adpar ddpar minfreq maxfreq ampscl durscl & [ nitcps* num* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "gendy"
                      [amp ampdist durdist adpar ddpar minfreq maxfreq ampscl durscl nitcps* num*]
                      *global*)]
    (new out-types ast)))

(s/fdef gendy:a
  :args (s/cat :amp valid-kr? :ampdist valid-kr? :durdist valid-kr? :adpar valid-kr? :ddpar valid-kr? :minfreq valid-kr? :maxfreq valid-kr? :ampscl valid-kr? :durscl valid-kr? :nitcps* valid-i?* :num* valid-kr?* ))
(stest/instrument `gendy:a)

(defn gendy:k
  {:arglists '([kamp kampdist kdurdist kadpar kddpar kminfreq kmaxfreq kampscl kdurscl & initcps* knum*])}
  [amp ampdist durdist adpar ddpar minfreq maxfreq ampscl durscl & [ nitcps* num* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "gendy"
                      [amp ampdist durdist adpar ddpar minfreq maxfreq ampscl durscl nitcps* num*]
                      *global*)]
    (new out-types ast)))

(s/fdef gendy:k
  :args (s/cat :amp valid-kr? :ampdist valid-kr? :durdist valid-kr? :adpar valid-kr? :ddpar valid-kr? :minfreq valid-kr? :maxfreq valid-kr? :ampscl valid-kr? :durscl valid-kr? :nitcps* valid-i?* :num* valid-kr?* ))
(stest/instrument `gendy:k)

(defn xscans
  {:arglists '([kamp kfreq ifntraj id & iorder*])}
  [amp freq fntraj d & [ order* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "xscans"
                      [amp freq fntraj d order*]
                      *global*)]
    (new out-types ast)))

(s/fdef xscans
  :args (s/cat :amp valid-kr? :freq valid-kr? :fntraj valid-i? :d valid-i? :order* valid-i?* ))
(stest/instrument `xscans)

(defn xscans:a
  {:arglists '([kamp kfreq ifntraj id & iorder*])}
  [amp freq fntraj d & [ order* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "xscans"
                      [amp freq fntraj d order*]
                      *global*)]
    (new out-types ast)))

(s/fdef xscans:a
  :args (s/cat :amp valid-kr? :freq valid-kr? :fntraj valid-i? :d valid-i? :order* valid-i?* ))
(stest/instrument `xscans:a)

(defn hrtfmove2
  {:arglists '([asrc kAz kElev Sfilel Sfiler & ioverlap* iradius* isr*])}
  [src Az Elev filel filer & [ overlap* radius* sr* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "hrtfmove2"
                      [src Az Elev filel filer overlap* radius* sr*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef hrtfmove2
  :args (s/cat :src valid-ar? :Az valid-kr? :Elev valid-kr? :filel valid-S? :filer valid-S? :overlap* valid-i?* :radius* valid-i?* :sr* valid-i?* ))
(stest/instrument `hrtfmove2)

(defn dust2
  {:arglists '([kamp kdensity] [kamp kdensity])}
  [amp density]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "dust2"
                      [amp density]
                      *global*)]
    (new out-types ast)))

(s/fdef dust2
  :args (s/alt
         :kk (s/cat :amp valid-kr? :density valid-kr? )
         ))
(stest/instrument `dust2)

(defn dust2:a
  {:arglists '([kamp kdensity])}
  [amp density]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "dust2"
                      [amp density]
                      *global*)]
    (new out-types ast)))

(s/fdef dust2:a
  :args (s/cat :amp valid-kr? :density valid-kr? ))
(stest/instrument `dust2:a)

(defn dust2:k
  {:arglists '([kamp kdensity])}
  [amp density]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "dust2"
                      [amp density]
                      *global*)]
    (new out-types ast)))

(s/fdef dust2:k
  :args (s/cat :amp valid-kr? :density valid-kr? ))
(stest/instrument `dust2:k)

(defn cpstmid
  {:arglists '([itable])}
  [table]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "cpstmid"
                      [table]
                      *global*)]
    (new out-types ast)))

(s/fdef cpstmid
  :args (s/cat :table valid-i? ))
(stest/instrument `cpstmid)

(defn cpstmid:i
  {:arglists '([itable])}
  [table]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "cpstmid"
                      [table]
                      *global*)]
    (new out-types ast)))

(s/fdef cpstmid:i
  :args (s/cat :table valid-i? ))
(stest/instrument `cpstmid:i)

(defn evalstr
  {:arglists '([Scode] [Scode ktrig])}
  [code]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "evalstr"
                      [code]
                      *global*)]
    (new out-types ast)))

(s/fdef evalstr
  :args (s/alt
         :S (s/cat :code valid-S? )
         ))
(stest/instrument `evalstr)

(defn evalstr:i
  {:arglists '([Scode])}
  [code]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "evalstr"
                      [code]
                      *global*)]
    (new out-types ast)))

(s/fdef evalstr:i
  :args (s/cat :code valid-S? ))
(stest/instrument `evalstr:i)

(defn evalstr:k
  {:arglists '([Scode ktrig])}
  [code trig]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "evalstr"
                      [code trig]
                      *global*)]
    (new out-types ast)))

(s/fdef evalstr:k
  :args (s/cat :code valid-S? :trig valid-kr? ))
(stest/instrument `evalstr:k)

(defn midichannelaftertouch
  {:arglists '([xchannelaftertouch & ilow* ihigh*])}
  [channelaftertouch & [ low* high* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "midichannelaftertouch"
                      [channelaftertouch low* high*]
                      *global*)]
    (new out-types ast)))

(s/fdef midichannelaftertouch
  :args (s/cat :channelaftertouch valid-x? :low* valid-i?* :high* valid-i?* ))
(stest/instrument `midichannelaftertouch)

(defn filesr
  {:arglists '([Sfilcod & iallowraw*] [ifilcod & iallowraw*])}
  [filcod & [ allowraw* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "filesr"
                      [filcod allowraw*]
                      *global*)]
    (new out-types ast)))

(s/fdef filesr
  :args (s/alt
         :Si (s/cat :filcod valid-S? :allowraw* valid-i?* )
         ))
(stest/instrument `filesr)

(defn filesr:i
  {:arglists '([Sfilcod & iallowraw*] [ifilcod & iallowraw*])}
  [filcod & [ allowraw* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "filesr"
                      [filcod allowraw*]
                      *global*)]
    (new out-types ast)))

(s/fdef filesr:i
  :args (s/alt
         :Si (s/cat :filcod valid-S? :allowraw* valid-i?* )
         ))
(stest/instrument `filesr:i)

(defn dispfft
  {:arglists '([xsig iprd iwsiz & iwtyp* idbout* iwtflg* imin* imax*])}
  [sig prd wsiz & [ wtyp* dbout* wtflg* min* max* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "dispfft"
                      [sig prd wsiz wtyp* dbout* wtflg* min* max*]
                      *global*)]
    (new out-types ast)))

(s/fdef dispfft
  :args (s/cat :sig valid-x? :prd valid-i? :wsiz valid-i? :wtyp* valid-i?* :dbout* valid-i?* :wtflg* valid-i?* :min* valid-i?* :max* valid-i?* ))
(stest/instrument `dispfft)

(defn chnmix
  {:arglists '([aval Sname])}
  [val name]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "chnmix"
                      [val name]
                      *global*)]
    (new out-types ast)))

(s/fdef chnmix
  :args (s/cat :val valid-ar? :name valid-S? ))
(stest/instrument `chnmix)

(defn delay
  {:arglists '([asig idlt & iskip*])}
  [sig dlt & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "delay"
                      [sig dlt skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef delay
  :args (s/cat :sig valid-ar? :dlt valid-i? :skip* valid-i?* ))
(stest/instrument `delay)

(defn delay:a
  {:arglists '([asig idlt & iskip*])}
  [sig dlt & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "delay"
                      [sig dlt skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef delay:a
  :args (s/cat :sig valid-ar? :dlt valid-i? :skip* valid-i?* ))
(stest/instrument `delay:a)

(defn zdf_ladder
  {:arglists '([ain xcenter-frequency xQ & istor*])}
  [in center-frequency Q & [ stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "zdf_ladder"
                      [in center-frequency Q stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef zdf_ladder
  :args (s/cat :in valid-ar? :center-frequency valid-x? :Q valid-x? :stor* valid-i?* ))
(stest/instrument `zdf_ladder)

(defn zdf_ladder:a
  {:arglists '([ain xcenter-frequency xQ & istor*])}
  [in center-frequency Q & [ stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "zdf_ladder"
                      [in center-frequency Q stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef zdf_ladder:a
  :args (s/cat :in valid-ar? :center-frequency valid-x? :Q valid-x? :stor* valid-i?* ))
(stest/instrument `zdf_ladder:a)

(defn expcurve
  {:arglists '([kindex ksteepness])}
  [index steepness]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "expcurve"
                      [index steepness]
                      *global*)]
    (new out-types ast)))

(s/fdef expcurve
  :args (s/cat :index valid-kr? :steepness valid-kr? ))
(stest/instrument `expcurve)

(defn expcurve:k
  {:arglists '([kindex ksteepness])}
  [index steepness]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "expcurve"
                      [index steepness]
                      *global*)]
    (new out-types ast)))

(s/fdef expcurve:k
  :args (s/cat :index valid-kr? :steepness valid-kr? ))
(stest/instrument `expcurve:k)

(defn squinewave
  {:arglists '([acps aClip aSkew xsyncin & iMinSweep* iphase*])}
  [cps Clip Skew syncin & [ MinSweep* phase* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "squinewave"
                      [cps Clip Skew syncin MinSweep* phase*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef squinewave
  :args (s/cat :cps valid-ar? :Clip valid-ar? :Skew valid-ar? :syncin valid-x? :MinSweep* valid-i?* :phase* valid-i?* ))
(stest/instrument `squinewave)

(defn OSCraw
  {:arglists '([iport])}
  [port]
  (let [out-types-quoted '[StringArray ControlSignal]
        out-types [StringArray ControlSignal]
        ast (ast-node out-types-quoted
                      "OSCraw"
                      [port]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef OSCraw
  :args (s/cat :port valid-i? ))
(stest/instrument `OSCraw)

(defn taninv
  {:arglists '([aarg1] [iarg1] [iarg1Arr] [iarg1Arr iArr] [karg1] [karg1Arr] [karg1Arr kArr])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "taninv"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef taninv
  :args (s/alt
         :a (s/cat :arg1 valid-ar? )
         ))
(stest/instrument `taninv)

(defn taninv:a
  {:arglists '([aarg1])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "taninv"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef taninv:a
  :args (s/cat :arg1 valid-ar? ))
(stest/instrument `taninv:a)

(defn taninv:i
  {:arglists '([iarg1])}
  [arg1]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "taninv"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef taninv:i
  :args (s/cat :arg1 valid-i? ))
(stest/instrument `taninv:i)

(defn taninv:iArr
  {:arglists '([iarg1Arr] [iarg1Arr iArr])}
  [arg1]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "taninv"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef taninv:iArr
  :args (s/alt
         :iArr (s/cat :arg1 valid-iArr? )
         ))
(stest/instrument `taninv:iArr)

(defn taninv:k
  {:arglists '([karg1])}
  [arg1]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "taninv"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef taninv:k
  :args (s/cat :arg1 valid-kr? ))
(stest/instrument `taninv:k)

(defn taninv:kArr
  {:arglists '([karg1Arr] [karg1Arr kArr])}
  [arg1]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "taninv"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef taninv:kArr
  :args (s/alt
         :kArr (s/cat :arg1 valid-kArr? )
         ))
(stest/instrument `taninv:kArr)

(defn mclock
  {:arglists '([ifreq])}
  [freq]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "mclock"
                      [freq]
                      *global*)]
    (new out-types ast)))

(s/fdef mclock
  :args (s/cat :freq valid-i? ))
(stest/instrument `mclock)

(defn ziwm
  {:arglists '([isig iindex & imix*])}
  [sig index & [ mix* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "ziwm"
                      [sig index mix*]
                      *global*)]
    (new out-types ast)))

(s/fdef ziwm
  :args (s/cat :sig valid-i? :index valid-i? :mix* valid-i?* ))
(stest/instrument `ziwm)

(defn partikkelset
  {:arglists '([kparameterindex kmaskindex iopcode_id])}
  [parameterindex maskindex opcode_id]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "partikkelset"
                      [parameterindex maskindex opcode_id]
                      *global*)]
    (new out-types ast)))

(s/fdef partikkelset
  :args (s/cat :parameterindex valid-kr? :maskindex valid-kr? :opcode_id valid-i? ))
(stest/instrument `partikkelset)

(defn i
  {:arglists '([ikarray] [kkarray] [kkarrayArr & ikarray1* ikarray2* ikarray3* ikarray4* ikarray5* ikarray6* ikarray7* ikarray8* ikarray9* ikarray10* ikarray11* ikarray12* ikarray13* ikarray14* ikarray15* ikarray16*] [kkarrayArr & kkarray1* kkarray2* kkarray3* kkarray4* kkarray5* kkarray6* kkarray7* kkarray8* kkarray9* kkarray10* kkarray11* kkarray12* kkarray13* kkarray14* kkarray15* kkarray16*])}
  [karray]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "i"
                      [karray]
                      *global*)]
    (new out-types ast)))

(s/fdef i
  :args (s/alt
         :i (s/cat :karray valid-i? )
         ))
(stest/instrument `i)

(defn i:i
  {:arglists '([ikarray] [kkarray] [kkarrayArr & ikarray1* ikarray2* ikarray3* ikarray4* ikarray5* ikarray6* ikarray7* ikarray8* ikarray9* ikarray10* ikarray11* ikarray12* ikarray13* ikarray14* ikarray15* ikarray16*] [kkarrayArr & kkarray1* kkarray2* kkarray3* kkarray4* kkarray5* kkarray6* kkarray7* kkarray8* kkarray9* kkarray10* kkarray11* kkarray12* kkarray13* kkarray14* kkarray15* kkarray16*])}
  [karray]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "i"
                      [karray]
                      *global*)]
    (new out-types ast)))

(s/fdef i:i
  :args (s/alt
         :i (s/cat :karray valid-i? )
         ))
(stest/instrument `i:i)

(defn hilbert
  {:arglists '([asig])}
  [sig]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "hilbert"
                      [sig]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef hilbert
  :args (s/cat :sig valid-ar? ))
(stest/instrument `hilbert)

(defn spsend
  {:arglists '()}
  []
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "spsend"
                      []
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))


(defn sfpreset
  {:arglists '([iprog ibank ifilhandle ipreindex])}
  [prog bank filhandle preindex]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "sfpreset"
                      [prog bank filhandle preindex]
                      *global*)]
    (new out-types ast)))

(s/fdef sfpreset
  :args (s/cat :prog valid-i? :bank valid-i? :filhandle valid-i? :preindex valid-i? ))
(stest/instrument `sfpreset)

(defn sfpreset:i
  {:arglists '([iprog ibank ifilhandle ipreindex])}
  [prog bank filhandle preindex]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "sfpreset"
                      [prog bank filhandle preindex]
                      *global*)]
    (new out-types ast)))

(s/fdef sfpreset:i
  :args (s/cat :prog valid-i? :bank valid-i? :filhandle valid-i? :preindex valid-i? ))
(stest/instrument `sfpreset:i)

(defn tableseg
  {:arglists '([ifn1 idur2 & ifn1* idur2* ifn3* ifn4* ifn5* ifn6* ifn7* ifn8* ifn9* ifn10* ifn11* ifn12* ifn13* ifn14* ifn15* ifn16*])}
  [fn1 dur2 & [ fn1* dur2* fn3* fn4* fn5* fn6* fn7* fn8* fn9* fn10* fn11* fn12* fn13* fn14* fn15* fn16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "tableseg"
                      [fn1 dur2 fn1* dur2* fn3* fn4* fn5* fn6* fn7* fn8* fn9* fn10* fn11* fn12* fn13* fn14* fn15* fn16*]
                      *global*)]
    (new out-types ast)))

(s/fdef tableseg
  :args (s/cat :fn1 valid-i? :dur2 valid-i? :fn1* valid-i?* :dur2* valid-i?* :fn3* valid-i?* :fn4* valid-i?* :fn5* valid-i?* :fn6* valid-i?* :fn7* valid-i?* :fn8* valid-i?* :fn9* valid-i?* :fn10* valid-i?* :fn11* valid-i?* :fn12* valid-i?* :fn13* valid-i?* :fn14* valid-i?* :fn15* valid-i?* :fn16* valid-i?* ))
(stest/instrument `tableseg)

(defn timedseq
  {:arglists '([ktimpnt itable & kp1* kp2* kp3* kpN4* kpN5* kpN6* kpN7* kpN8* kpN9* kpN10* kpN11* kpN12* kpN13* kpN14* kpN15* kpN16*])}
  [timpnt table & [ p1* p2* p3* pN4* pN5* pN6* pN7* pN8* pN9* pN10* pN11* pN12* pN13* pN14* pN15* pN16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "timedseq"
                      [timpnt table p1* p2* p3* pN4* pN5* pN6* pN7* pN8* pN9* pN10* pN11* pN12* pN13* pN14* pN15* pN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef timedseq
  :args (s/cat :timpnt valid-kr? :table valid-i? :p1* valid-kr?* :p2* valid-kr?* :p3* valid-kr?* :pN4* valid-kr?* :pN5* valid-kr?* :pN6* valid-kr?* :pN7* valid-kr?* :pN8* valid-kr?* :pN9* valid-kr?* :pN10* valid-kr?* :pN11* valid-kr?* :pN12* valid-kr?* :pN13* valid-kr?* :pN14* valid-kr?* :pN15* valid-kr?* :pN16* valid-kr?* ))
(stest/instrument `timedseq)

(defn timedseq:k
  {:arglists '([ktimpnt itable & kp1* kp2* kp3* kpN4* kpN5* kpN6* kpN7* kpN8* kpN9* kpN10* kpN11* kpN12* kpN13* kpN14* kpN15* kpN16*])}
  [timpnt table & [ p1* p2* p3* pN4* pN5* pN6* pN7* pN8* pN9* pN10* pN11* pN12* pN13* pN14* pN15* pN16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "timedseq"
                      [timpnt table p1* p2* p3* pN4* pN5* pN6* pN7* pN8* pN9* pN10* pN11* pN12* pN13* pN14* pN15* pN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef timedseq:k
  :args (s/cat :timpnt valid-kr? :table valid-i? :p1* valid-kr?* :p2* valid-kr?* :p3* valid-kr?* :pN4* valid-kr?* :pN5* valid-kr?* :pN6* valid-kr?* :pN7* valid-kr?* :pN8* valid-kr?* :pN9* valid-kr?* :pN10* valid-kr?* :pN11* valid-kr?* :pN12* valid-kr?* :pN13* valid-kr?* :pN14* valid-kr?* :pN15* valid-kr?* :pN16* valid-kr?* ))
(stest/instrument `timedseq:k)

(defn pvsdemix
  {:arglists '([fleft fright kpos kwidth ipoints])}
  [left right pos width points]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsdemix"
                      [left right pos width points]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsdemix
  :args (s/cat :left valid-f? :right valid-f? :pos valid-kr? :width valid-kr? :points valid-i? ))
(stest/instrument `pvsdemix)

(defn pvsdemix:f
  {:arglists '([fleft fright kpos kwidth ipoints])}
  [left right pos width points]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsdemix"
                      [left right pos width points]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsdemix:f
  :args (s/cat :left valid-f? :right valid-f? :pos valid-kr? :width valid-kr? :points valid-i? ))
(stest/instrument `pvsdemix:f)

(defn ptablew
  {:arglists '([asig aindex itable & ixmode* ixoff* iwgmode*] [ksig kindex itable & ixmode* ixoff* iwgmode*])}
  [sig index table & [ xmode* xoff* wgmode* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "ptablew"
                      [sig index table xmode* xoff* wgmode*]
                      *global*)]
    (new out-types ast)))

(s/fdef ptablew
  :args (s/alt
         :aaiiii (s/cat :sig valid-ar? :index valid-ar? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wgmode* valid-i?* )
         ))
(stest/instrument `ptablew)

(defn pset
  {:arglists '([& icon1* icon2* icon3* icon4* icon5* icon6* icon7* icon8* icon9* icon10* icon11* icon12* icon13* icon14* icon15* icon16*])}
  [& [ con1* con2* con3* con4* con5* con6* con7* con8* con9* con10* con11* con12* con13* con14* con15* con16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "pset"
                      [con1* con2* con3* con4* con5* con6* con7* con8* con9* con10* con11* con12* con13* con14* con15* con16*]
                      *global*)]
    (new out-types ast)))

(s/fdef pset
  :args (s/cat :con1* valid-i?* :con2* valid-i?* :con3* valid-i?* :con4* valid-i?* :con5* valid-i?* :con6* valid-i?* :con7* valid-i?* :con8* valid-i?* :con9* valid-i?* :con10* valid-i?* :con11* valid-i?* :con12* valid-i?* :con13* valid-i?* :con14* valid-i?* :con15* valid-i?* :con16* valid-i?* ))
(stest/instrument `pset)

(defn downsamp
  {:arglists '([asig & iwlen*])}
  [sig & [ wlen* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "downsamp"
                      [sig wlen*]
                      *global*)]
    (new out-types ast)))

(s/fdef downsamp
  :args (s/cat :sig valid-ar? :wlen* valid-i?* ))
(stest/instrument `downsamp)

(defn downsamp:k
  {:arglists '([asig & iwlen*])}
  [sig & [ wlen* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "downsamp"
                      [sig wlen*]
                      *global*)]
    (new out-types ast)))

(s/fdef downsamp:k
  :args (s/cat :sig valid-ar? :wlen* valid-i?* ))
(stest/instrument `downsamp:k)

(defn atonex
  {:arglists '([asig ahp & inumlayer* iskip*] [asig khp & inumlayer* iskip*])}
  [sig hp & [ numlayer* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "atonex"
                      [sig hp numlayer* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef atonex
  :args (s/alt
         :aaii (s/cat :sig valid-ar? :hp valid-ar? :numlayer* valid-i?* :skip* valid-i?* )
         ))
(stest/instrument `atonex)

(defn atonex:a
  {:arglists '([asig ahp & inumlayer* iskip*] [asig khp & inumlayer* iskip*])}
  [sig hp & [ numlayer* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "atonex"
                      [sig hp numlayer* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef atonex:a
  :args (s/alt
         :aaii (s/cat :sig valid-ar? :hp valid-ar? :numlayer* valid-i?* :skip* valid-i?* )
         ))
(stest/instrument `atonex:a)

(defn sinsyn
  {:arglists '([fin kscal kmaxtracks itable & itable*])}
  [in scal maxtracks table & [ table* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sinsyn"
                      [in scal maxtracks table table*]
                      *global*)]
    (new out-types ast)))

(s/fdef sinsyn
  :args (s/cat :in valid-f? :scal valid-kr? :maxtracks valid-kr? :table valid-i? :table* valid-i?* ))
(stest/instrument `sinsyn)

(defn sinsyn:a
  {:arglists '([fin kscal kmaxtracks itable & itable*])}
  [in scal maxtracks table & [ table* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sinsyn"
                      [in scal maxtracks table table*]
                      *global*)]
    (new out-types ast)))

(s/fdef sinsyn:a
  :args (s/cat :in valid-f? :scal valid-kr? :maxtracks valid-kr? :table valid-i? :table* valid-i?* ))
(stest/instrument `sinsyn:a)

(defn fmvoice
  {:arglists '([kamp kfreq kvowel ktilt kvibamt kvibrate & ifn1* ifn1* ifn1* ifn1* ivibfn*])}
  [amp freq vowel tilt vibamt vibrate & [ fn1* fn1* fn1* fn1* vibfn* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fmvoice"
                      [amp freq vowel tilt vibamt vibrate fn1* fn1* fn1* fn1* vibfn*]
                      *global*)]
    (new out-types ast)))

(s/fdef fmvoice
  :args (s/cat :amp valid-kr? :freq valid-kr? :vowel valid-kr? :tilt valid-kr? :vibamt valid-kr? :vibrate valid-kr? :fn1* valid-i?* :fn1* valid-i?* :fn1* valid-i?* :fn1* valid-i?* :vibfn* valid-i?* ))
(stest/instrument `fmvoice)

(defn fmvoice:a
  {:arglists '([kamp kfreq kvowel ktilt kvibamt kvibrate & ifn1* ifn1* ifn1* ifn1* ivibfn*])}
  [amp freq vowel tilt vibamt vibrate & [ fn1* fn1* fn1* fn1* vibfn* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fmvoice"
                      [amp freq vowel tilt vibamt vibrate fn1* fn1* fn1* fn1* vibfn*]
                      *global*)]
    (new out-types ast)))

(s/fdef fmvoice:a
  :args (s/cat :amp valid-kr? :freq valid-kr? :vowel valid-kr? :tilt valid-kr? :vibamt valid-kr? :vibrate valid-kr? :fn1* valid-i?* :fn1* valid-i?* :fn1* valid-i?* :fn1* valid-i?* :vibfn* valid-i?* ))
(stest/instrument `fmvoice:a)

(defn atonek
  {:arglists '([ksig khp & iskip*])}
  [sig hp & [ skip* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "atonek"
                      [sig hp skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef atonek
  :args (s/cat :sig valid-kr? :hp valid-kr? :skip* valid-i?* ))
(stest/instrument `atonek)

(defn atonek:k
  {:arglists '([ksig khp & iskip*])}
  [sig hp & [ skip* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "atonek"
                      [sig hp skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef atonek:k
  :args (s/cat :sig valid-kr? :hp valid-kr? :skip* valid-i?* ))
(stest/instrument `atonek:k)

(defn endin
  {:arglists '()}
  []
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "endin"
                      []
                      *global*)]
    (new out-types ast)))


(defn pvsbandp
  {:arglists '([fsigin xlowcut xlowfull xhighfull xhighcut & ktype*])}
  [sigin lowcut lowfull highfull highcut & [ type* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsbandp"
                      [sigin lowcut lowfull highfull highcut type*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsbandp
  :args (s/cat :sigin valid-f? :lowcut valid-x? :lowfull valid-x? :highfull valid-x? :highcut valid-x? :type* valid-kr?* ))
(stest/instrument `pvsbandp)

(defn pvsbandp:f
  {:arglists '([fsigin xlowcut xlowfull xhighfull xhighcut & ktype*])}
  [sigin lowcut lowfull highfull highcut & [ type* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsbandp"
                      [sigin lowcut lowfull highfull highcut type*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsbandp:f
  :args (s/cat :sigin valid-f? :lowcut valid-x? :lowfull valid-x? :highfull valid-x? :highcut valid-x? :type* valid-kr?* ))
(stest/instrument `pvsbandp:f)

(defn writescratch
  {:arglists '([ival & index*])}
  [val & [ ndex* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "writescratch"
                      [val ndex*]
                      *global*)]
    (new out-types ast)))

(s/fdef writescratch
  :args (s/cat :val valid-i? :ndex* valid-i?* ))
(stest/instrument `writescratch)

(defn liveconv
  {:arglists '([ain ift iplen kupdate kclear])}
  [in ft plen update clear]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "liveconv"
                      [in ft plen update clear]
                      *global*)]
    (new out-types ast)))

(s/fdef liveconv
  :args (s/cat :in valid-ar? :ft valid-i? :plen valid-i? :update valid-kr? :clear valid-kr? ))
(stest/instrument `liveconv)

(defn liveconv:a
  {:arglists '([ain ift iplen kupdate kclear])}
  [in ft plen update clear]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "liveconv"
                      [in ft plen update clear]
                      *global*)]
    (new out-types ast)))

(s/fdef liveconv:a
  :args (s/cat :in valid-ar? :ft valid-i? :plen valid-i? :update valid-kr? :clear valid-kr? ))
(stest/instrument `liveconv:a)

(defn pvsbin
  {:arglists '([fsig kbin])}
  [sig bin]
  (let [out-types-quoted '[ControlSignal ControlSignal]
        out-types [ControlSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "pvsbin"
                      [sig bin]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef pvsbin
  :args (s/cat :sig valid-f? :bin valid-kr? ))
(stest/instrument `pvsbin)

(defn tableicopy
  {:arglists '([idft isft])}
  [dft sft]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "tableicopy"
                      [dft sft]
                      *global*)]
    (new out-types ast)))

(s/fdef tableicopy
  :args (s/cat :dft valid-i? :sft valid-i? ))
(stest/instrument `tableicopy)

(defn wguide2
  {:arglists '([asig xfreq2 xfreq3 kcutoff4 kcutoff5 kfeedback6 kfeedback7])}
  [sig freq2 freq3 cutoff4 cutoff5 feedback6 feedback7]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "wguide2"
                      [sig freq2 freq3 cutoff4 cutoff5 feedback6 feedback7]
                      *global*)]
    (new out-types ast)))

(s/fdef wguide2
  :args (s/cat :sig valid-ar? :freq2 valid-x? :freq3 valid-x? :cutoff4 valid-kr? :cutoff5 valid-kr? :feedback6 valid-kr? :feedback7 valid-kr? ))
(stest/instrument `wguide2)

(defn wguide2:a
  {:arglists '([asig xfreq2 xfreq3 kcutoff4 kcutoff5 kfeedback6 kfeedback7])}
  [sig freq2 freq3 cutoff4 cutoff5 feedback6 feedback7]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "wguide2"
                      [sig freq2 freq3 cutoff4 cutoff5 feedback6 feedback7]
                      *global*)]
    (new out-types ast)))

(s/fdef wguide2:a
  :args (s/cat :sig valid-ar? :freq2 valid-x? :freq3 valid-x? :cutoff4 valid-kr? :cutoff5 valid-kr? :feedback6 valid-kr? :feedback7 valid-kr? ))
(stest/instrument `wguide2:a)

(defn delayw
  {:arglists '([asig])}
  [sig]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "delayw"
                      [sig]
                      *global*)]
    (new out-types ast)))

(s/fdef delayw
  :args (s/cat :sig valid-ar? ))
(stest/instrument `delayw)

(defn cabasa
  {:arglists '([iamp idettack & inum* idamp* imaxshake*])}
  [amp dettack & [ num* damp* maxshake* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "cabasa"
                      [amp dettack num* damp* maxshake*]
                      *global*)]
    (new out-types ast)))

(s/fdef cabasa
  :args (s/cat :amp valid-i? :dettack valid-i? :num* valid-i?* :damp* valid-i?* :maxshake* valid-i?* ))
(stest/instrument `cabasa)

(defn cabasa:a
  {:arglists '([iamp idettack & inum* idamp* imaxshake*])}
  [amp dettack & [ num* damp* maxshake* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "cabasa"
                      [amp dettack num* damp* maxshake*]
                      *global*)]
    (new out-types ast)))

(s/fdef cabasa:a
  :args (s/cat :amp valid-i? :dettack valid-i? :num* valid-i?* :damp* valid-i?* :maxshake* valid-i?* ))
(stest/instrument `cabasa:a)

(defn strsubk
  {:arglists '([Ssrc kstart kend])}
  [src start end]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "strsubk"
                      [src start end]
                      *global*)]
    (new out-types ast)))

(s/fdef strsubk
  :args (s/cat :src valid-S? :start valid-kr? :end valid-kr? ))
(stest/instrument `strsubk)

(defn strsubk:S
  {:arglists '([Ssrc kstart kend])}
  [src start end]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "strsubk"
                      [src start end]
                      *global*)]
    (new out-types ast)))

(s/fdef strsubk:S
  :args (s/cat :src valid-S? :start valid-kr? :end valid-kr? ))
(stest/instrument `strsubk:S)

(defn linsegr
  {:arglists '([ia idur2 & ib1* idur2* ic3* irel4* iz5* iz6* iz7* iz8* iz9* iz10* iz11* iz12* iz13* iz14* iz15* iz16*] [ia idur2 & ib1* idur2* ic3* irel4* iz5* iz6* iz7* iz8* iz9* iz10* iz11* iz12* iz13* iz14* iz15* iz16*])}
  [a dur2 & [ b1* dur2* c3* rel4* z5* z6* z7* z8* z9* z10* z11* z12* z13* z14* z15* z16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "linsegr"
                      [a dur2 b1* dur2* c3* rel4* z5* z6* z7* z8* z9* z10* z11* z12* z13* z14* z15* z16*]
                      *global*)]
    (new out-types ast)))

(s/fdef linsegr
  :args (s/alt
         :iiiiiiiiiiiiiiiiii (s/cat :a valid-i? :dur2 valid-i? :b1* valid-i?* :dur2* valid-i?* :c3* valid-i?* :rel4* valid-i?* :z5* valid-i?* :z6* valid-i?* :z7* valid-i?* :z8* valid-i?* :z9* valid-i?* :z10* valid-i?* :z11* valid-i?* :z12* valid-i?* :z13* valid-i?* :z14* valid-i?* :z15* valid-i?* :z16* valid-i?* )
         ))
(stest/instrument `linsegr)

(defn linsegr:a
  {:arglists '([ia idur2 & ib1* idur2* ic3* irel4* iz5* iz6* iz7* iz8* iz9* iz10* iz11* iz12* iz13* iz14* iz15* iz16*])}
  [a dur2 & [ b1* dur2* c3* rel4* z5* z6* z7* z8* z9* z10* z11* z12* z13* z14* z15* z16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "linsegr"
                      [a dur2 b1* dur2* c3* rel4* z5* z6* z7* z8* z9* z10* z11* z12* z13* z14* z15* z16*]
                      *global*)]
    (new out-types ast)))

(s/fdef linsegr:a
  :args (s/cat :a valid-i? :dur2 valid-i? :b1* valid-i?* :dur2* valid-i?* :c3* valid-i?* :rel4* valid-i?* :z5* valid-i?* :z6* valid-i?* :z7* valid-i?* :z8* valid-i?* :z9* valid-i?* :z10* valid-i?* :z11* valid-i?* :z12* valid-i?* :z13* valid-i?* :z14* valid-i?* :z15* valid-i?* :z16* valid-i?* ))
(stest/instrument `linsegr:a)

(defn linsegr:k
  {:arglists '([ia idur2 & ib1* idur2* ic3* irel4* iz5* iz6* iz7* iz8* iz9* iz10* iz11* iz12* iz13* iz14* iz15* iz16*])}
  [a dur2 & [ b1* dur2* c3* rel4* z5* z6* z7* z8* z9* z10* z11* z12* z13* z14* z15* z16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "linsegr"
                      [a dur2 b1* dur2* c3* rel4* z5* z6* z7* z8* z9* z10* z11* z12* z13* z14* z15* z16*]
                      *global*)]
    (new out-types ast)))

(s/fdef linsegr:k
  :args (s/cat :a valid-i? :dur2 valid-i? :b1* valid-i?* :dur2* valid-i?* :c3* valid-i?* :rel4* valid-i?* :z5* valid-i?* :z6* valid-i?* :z7* valid-i?* :z8* valid-i?* :z9* valid-i?* :z10* valid-i?* :z11* valid-i?* :z12* valid-i?* :z13* valid-i?* :z14* valid-i?* :z15* valid-i?* :z16* valid-i?* ))
(stest/instrument `linsegr:k)

(defn moscil
  {:arglists '([kchn knum kvel kdur kpause])}
  [chn num vel dur pause]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "moscil"
                      [chn num vel dur pause]
                      *global*)]
    (new out-types ast)))

(s/fdef moscil
  :args (s/cat :chn valid-kr? :num valid-kr? :vel valid-kr? :dur valid-kr? :pause valid-kr? ))
(stest/instrument `moscil)

(defn chano
  {:arglists '([aval kchan] [kval kchan])}
  [val chan]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "chano"
                      [val chan]
                      *global*)]
    (new out-types ast)))

(s/fdef chano
  :args (s/alt
         :ak (s/cat :val valid-ar? :chan valid-kr? )
         ))
(stest/instrument `chano)

(defn moogvcf
  {:arglists '([asig xcutoff-frequency xresonance & iscale* iskip*])}
  [sig cutoff-frequency resonance & [ scale* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "moogvcf"
                      [sig cutoff-frequency resonance scale* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef moogvcf
  :args (s/cat :sig valid-ar? :cutoff-frequency valid-x? :resonance valid-x? :scale* valid-i?* :skip* valid-i?* ))
(stest/instrument `moogvcf)

(defn moogvcf:a
  {:arglists '([asig xcutoff-frequency xresonance & iscale* iskip*])}
  [sig cutoff-frequency resonance & [ scale* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "moogvcf"
                      [sig cutoff-frequency resonance scale* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef moogvcf:a
  :args (s/cat :sig valid-ar? :cutoff-frequency valid-x? :resonance valid-x? :scale* valid-i?* :skip* valid-i?* ))
(stest/instrument `moogvcf:a)

(defn svfilter
  {:arglists '([asig xcenter-frequency xq & iscale* iskip*])}
  [sig center-frequency q & [ scale* skip* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "svfilter"
                      [sig center-frequency q scale* skip*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef svfilter
  :args (s/cat :sig valid-ar? :center-frequency valid-x? :q valid-x? :scale* valid-i?* :skip* valid-i?* ))
(stest/instrument `svfilter)

(defn ftsamplebank
  {:arglists '([SDirectory iFirstTableNumber iTrigger iSkipTime iFormat] [SDirectory kFirstTableNumber kTrigger kSkipTime kFormat kChannel])}
  [Directory FirstTableNumber Trigger SkipTime Format]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ftsamplebank"
                      [Directory FirstTableNumber Trigger SkipTime Format]
                      *global*)]
    (new out-types ast)))

(s/fdef ftsamplebank
  :args (s/alt
         :Siiii (s/cat :Directory valid-S? :FirstTableNumber valid-i? :Trigger valid-i? :SkipTime valid-i? :Format valid-i? )
         ))
(stest/instrument `ftsamplebank)

(defn ftsamplebank:i
  {:arglists '([SDirectory iFirstTableNumber iTrigger iSkipTime iFormat])}
  [Directory FirstTableNumber Trigger SkipTime Format]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ftsamplebank"
                      [Directory FirstTableNumber Trigger SkipTime Format]
                      *global*)]
    (new out-types ast)))

(s/fdef ftsamplebank:i
  :args (s/cat :Directory valid-S? :FirstTableNumber valid-i? :Trigger valid-i? :SkipTime valid-i? :Format valid-i? ))
(stest/instrument `ftsamplebank:i)

(defn ftsamplebank:k
  {:arglists '([SDirectory kFirstTableNumber kTrigger kSkipTime kFormat kChannel])}
  [Directory FirstTableNumber Trigger SkipTime Format Channel]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "ftsamplebank"
                      [Directory FirstTableNumber Trigger SkipTime Format Channel]
                      *global*)]
    (new out-types ast)))

(s/fdef ftsamplebank:k
  :args (s/cat :Directory valid-S? :FirstTableNumber valid-kr? :Trigger valid-kr? :SkipTime valid-kr? :Format valid-kr? :Channel valid-kr? ))
(stest/instrument `ftsamplebank:k)

(defn eqfil
  {:arglists '([ain kcenter-frequency kbandwidth kgain & istor*])}
  [in center-frequency bandwidth gain & [ stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "eqfil"
                      [in center-frequency bandwidth gain stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef eqfil
  :args (s/cat :in valid-ar? :center-frequency valid-kr? :bandwidth valid-kr? :gain valid-kr? :stor* valid-i?* ))
(stest/instrument `eqfil)

(defn eqfil:a
  {:arglists '([ain kcenter-frequency kbandwidth kgain & istor*])}
  [in center-frequency bandwidth gain & [ stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "eqfil"
                      [in center-frequency bandwidth gain stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef eqfil:a
  :args (s/cat :in valid-ar? :center-frequency valid-kr? :bandwidth valid-kr? :gain valid-kr? :stor* valid-i?* ))
(stest/instrument `eqfil:a)

(defn nchnls_hw
  {:arglists '()}
  []
  (let [out-types-quoted '[Variable Variable]
        out-types [Variable Variable]
        ast (ast-node out-types-quoted
                      "nchnls_hw"
                      []
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))


(defn readk
  {:arglists '([Sfilname iformat iprd] [ifilname iformat iprd])}
  [filname format prd]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "readk"
                      [filname format prd]
                      *global*)]
    (new out-types ast)))

(s/fdef readk
  :args (s/alt
         :Sii (s/cat :filname valid-S? :format valid-i? :prd valid-i? )
         ))
(stest/instrument `readk)

(defn readk:k
  {:arglists '([Sfilname iformat iprd] [ifilname iformat iprd])}
  [filname format prd]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "readk"
                      [filname format prd]
                      *global*)]
    (new out-types ast)))

(s/fdef readk:k
  :args (s/alt
         :Sii (s/cat :filname valid-S? :format valid-i? :prd valid-i? )
         ))
(stest/instrument `readk:k)

(defn dripwater
  {:arglists '([kamp idettack & inum* idamp* imaxshake* ifreq* ifreq1* ifreq1*])}
  [amp dettack & [ num* damp* maxshake* freq* freq1* freq1* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "dripwater"
                      [amp dettack num* damp* maxshake* freq* freq1* freq1*]
                      *global*)]
    (new out-types ast)))

(s/fdef dripwater
  :args (s/cat :amp valid-kr? :dettack valid-i? :num* valid-i?* :damp* valid-i?* :maxshake* valid-i?* :freq* valid-i?* :freq1* valid-i?* :freq1* valid-i?* ))
(stest/instrument `dripwater)

(defn dripwater:a
  {:arglists '([kamp idettack & inum* idamp* imaxshake* ifreq* ifreq1* ifreq1*])}
  [amp dettack & [ num* damp* maxshake* freq* freq1* freq1* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "dripwater"
                      [amp dettack num* damp* maxshake* freq* freq1* freq1*]
                      *global*)]
    (new out-types ast)))

(s/fdef dripwater:a
  :args (s/cat :amp valid-kr? :dettack valid-i? :num* valid-i?* :damp* valid-i?* :maxshake* valid-i?* :freq* valid-i?* :freq1* valid-i?* :freq1* valid-i?* ))
(stest/instrument `dripwater:a)

(defn midic14
  {:arglists '([ictlno1 ictlno2 imin imax & itable*] [ictlno1 ictlno2 kmin kmax & itable*])}
  [ctlno1 ctlno2 min max & [ table* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "midic14"
                      [ctlno1 ctlno2 min max table*]
                      *global*)]
    (new out-types ast)))

(s/fdef midic14
  :args (s/alt
         :iiiii (s/cat :ctlno1 valid-i? :ctlno2 valid-i? :min valid-i? :max valid-i? :table* valid-i?* )
         ))
(stest/instrument `midic14)

(defn midic14:i
  {:arglists '([ictlno1 ictlno2 imin imax & itable*])}
  [ctlno1 ctlno2 min max & [ table* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "midic14"
                      [ctlno1 ctlno2 min max table*]
                      *global*)]
    (new out-types ast)))

(s/fdef midic14:i
  :args (s/cat :ctlno1 valid-i? :ctlno2 valid-i? :min valid-i? :max valid-i? :table* valid-i?* ))
(stest/instrument `midic14:i)

(defn midic14:k
  {:arglists '([ictlno1 ictlno2 kmin kmax & itable*])}
  [ctlno1 ctlno2 min max & [ table* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "midic14"
                      [ctlno1 ctlno2 min max table*]
                      *global*)]
    (new out-types ast)))

(s/fdef midic14:k
  :args (s/cat :ctlno1 valid-i? :ctlno2 valid-i? :min valid-kr? :max valid-kr? :table* valid-i?* ))
(stest/instrument `midic14:k)

(defn granule
  {:arglists '([xamp ivoice iratio imode ithd itable ipshift igskip igskip_os ilength kgap igap_os kgsize igsize_os iatt idec iseed & ipitch1* ipitch1* ipitch1* ipitch1* ifnenv*])}
  [amp voice ratio mode thd table pshift gskip gskip_os length gap gap_os gsize gsize_os att dec seed & [ pitch1* pitch1* pitch1* pitch1* fnenv* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "granule"
                      [amp voice ratio mode thd table pshift gskip gskip_os length gap gap_os gsize gsize_os att dec seed pitch1* pitch1* pitch1* pitch1* fnenv*]
                      *global*)]
    (new out-types ast)))

(s/fdef granule
  :args (s/cat :amp valid-x? :voice valid-i? :ratio valid-i? :mode valid-i? :thd valid-i? :table valid-i? :pshift valid-i? :gskip valid-i? :gskip_os valid-i? :length valid-i? :gap valid-kr? :gap_os valid-i? :gsize valid-kr? :gsize_os valid-i? :att valid-i? :dec valid-i? :seed valid-i? :pitch1* valid-i?* :pitch1* valid-i?* :pitch1* valid-i?* :pitch1* valid-i?* :fnenv* valid-i?* ))
(stest/instrument `granule)

(defn granule:a
  {:arglists '([xamp ivoice iratio imode ithd itable ipshift igskip igskip_os ilength kgap igap_os kgsize igsize_os iatt idec iseed & ipitch1* ipitch1* ipitch1* ipitch1* ifnenv*])}
  [amp voice ratio mode thd table pshift gskip gskip_os length gap gap_os gsize gsize_os att dec seed & [ pitch1* pitch1* pitch1* pitch1* fnenv* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "granule"
                      [amp voice ratio mode thd table pshift gskip gskip_os length gap gap_os gsize gsize_os att dec seed pitch1* pitch1* pitch1* pitch1* fnenv*]
                      *global*)]
    (new out-types ast)))

(s/fdef granule:a
  :args (s/cat :amp valid-x? :voice valid-i? :ratio valid-i? :mode valid-i? :thd valid-i? :table valid-i? :pshift valid-i? :gskip valid-i? :gskip_os valid-i? :length valid-i? :gap valid-kr? :gap_os valid-i? :gsize valid-kr? :gsize_os valid-i? :att valid-i? :dec valid-i? :seed valid-i? :pitch1* valid-i?* :pitch1* valid-i?* :pitch1* valid-i?* :pitch1* valid-i?* :fnenv* valid-i?* ))
(stest/instrument `granule:a)

(defn linsegb
  {:arglists '([ia itim2 & ib1* itim2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*] [ia itim2 & ib1* itim2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a tim2 & [ b1* tim2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "linsegb"
                      [a tim2 b1* tim2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef linsegb
  :args (s/alt
         :iiiiiiiiiiiiiiiiii (s/cat :a valid-i? :tim2 valid-i? :b1* valid-i?* :tim2* valid-i?* :c3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* )
         ))
(stest/instrument `linsegb)

(defn linsegb:a
  {:arglists '([ia itim2 & ib1* itim2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a tim2 & [ b1* tim2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "linsegb"
                      [a tim2 b1* tim2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef linsegb:a
  :args (s/cat :a valid-i? :tim2 valid-i? :b1* valid-i?* :tim2* valid-i?* :c3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* ))
(stest/instrument `linsegb:a)

(defn linsegb:k
  {:arglists '([ia itim2 & ib1* itim2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a tim2 & [ b1* tim2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "linsegb"
                      [a tim2 b1* tim2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef linsegb:k
  :args (s/cat :a valid-i? :tim2 valid-i? :b1* valid-i?* :tim2* valid-i?* :c3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* ))
(stest/instrument `linsegb:k)

(defn strrindexk
  {:arglists '([Sarg1 Sarg2])}
  [arg1 arg2]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "strrindexk"
                      [arg1 arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef strrindexk
  :args (s/cat :arg1 valid-S? :arg2 valid-S? ))
(stest/instrument `strrindexk)

(defn strrindexk:k
  {:arglists '([Sarg1 Sarg2])}
  [arg1 arg2]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "strrindexk"
                      [arg1 arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef strrindexk:k
  :args (s/cat :arg1 valid-S? :arg2 valid-S? ))
(stest/instrument `strrindexk:k)

(defn compilecsd
  {:arglists '([Sfilename])}
  [filename]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "compilecsd"
                      [filename]
                      *global*)]
    (new out-types ast)))

(s/fdef compilecsd
  :args (s/cat :filename valid-S? ))
(stest/instrument `compilecsd)

(defn compilecsd:i
  {:arglists '([Sfilename])}
  [filename]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "compilecsd"
                      [filename]
                      *global*)]
    (new out-types ast)))

(s/fdef compilecsd:i
  :args (s/cat :filename valid-S? ))
(stest/instrument `compilecsd:i)

(defn exprandi
  {:arglists '([klambda xamp xcps] [klambda xamp xcps] [klambda xamp xcps])}
  [lambda amp cps]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "exprandi"
                      [lambda amp cps]
                      *global*)]
    (new out-types ast)))

(s/fdef exprandi
  :args (s/alt
         :kxx (s/cat :lambda valid-kr? :amp valid-x? :cps valid-x? )
         ))
(stest/instrument `exprandi)

(defn exprandi:a
  {:arglists '([klambda xamp xcps])}
  [lambda amp cps]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "exprandi"
                      [lambda amp cps]
                      *global*)]
    (new out-types ast)))

(s/fdef exprandi:a
  :args (s/cat :lambda valid-kr? :amp valid-x? :cps valid-x? ))
(stest/instrument `exprandi:a)

(defn exprandi:i
  {:arglists '([klambda xamp xcps])}
  [lambda amp cps]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "exprandi"
                      [lambda amp cps]
                      *global*)]
    (new out-types ast)))

(s/fdef exprandi:i
  :args (s/cat :lambda valid-kr? :amp valid-x? :cps valid-x? ))
(stest/instrument `exprandi:i)

(defn exprandi:k
  {:arglists '([klambda xamp xcps])}
  [lambda amp cps]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "exprandi"
                      [lambda amp cps]
                      *global*)]
    (new out-types ast)))

(s/fdef exprandi:k
  :args (s/cat :lambda valid-kr? :amp valid-x? :cps valid-x? ))
(stest/instrument `exprandi:k)

(defn pvsout
  {:arglists '([fsig kchan])}
  [sig chan]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "pvsout"
                      [sig chan]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsout
  :args (s/cat :sig valid-f? :chan valid-kr? ))
(stest/instrument `pvsout)

(defn filenchnls
  {:arglists '([Sfilcod & iallowraw*] [ifilcod & iallowraw*])}
  [filcod & [ allowraw* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "filenchnls"
                      [filcod allowraw*]
                      *global*)]
    (new out-types ast)))

(s/fdef filenchnls
  :args (s/alt
         :Si (s/cat :filcod valid-S? :allowraw* valid-i?* )
         ))
(stest/instrument `filenchnls)

(defn filenchnls:i
  {:arglists '([Sfilcod & iallowraw*] [ifilcod & iallowraw*])}
  [filcod & [ allowraw* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "filenchnls"
                      [filcod allowraw*]
                      *global*)]
    (new out-types ast)))

(s/fdef filenchnls:i
  :args (s/alt
         :Si (s/cat :filcod valid-S? :allowraw* valid-i?* )
         ))
(stest/instrument `filenchnls:i)

(defn outch
  {:arglists '([& karg1* aarg2* karg3* aarg4* karg5* aarg6* karg7* aarg8* karg9* aarg10* karg11* aarg12* karg13* aarg14* karg15* aarg16*])}
  [& [ arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outch"
                      [arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16*]
                      *global*)]
    (new out-types ast)))

(s/fdef outch
  :args (s/cat :arg1* valid-kr?* :arg2* valid-ar?* :arg3* valid-kr?* :arg4* valid-ar?* :arg5* valid-kr?* :arg6* valid-ar?* :arg7* valid-kr?* :arg8* valid-ar?* :arg9* valid-kr?* :arg10* valid-ar?* :arg11* valid-kr?* :arg12* valid-ar?* :arg13* valid-kr?* :arg14* valid-ar?* :arg15* valid-kr?* :arg16* valid-ar?* ))
(stest/instrument `outch)

(defn init:SArr
  {:arglists '([& isize1* ival2* ival3* ival4* ival5* ival6* ival7* ival8* ival9* ival10* ival11* ival12* ival13* ival14* ival15* ival16*])}
  [& [ size1* val2* val3* val4* val5* val6* val7* val8* val9* val10* val11* val12* val13* val14* val15* val16* ]]
  (let [out-types-quoted 'StringArray
        out-types StringArray
        ast (ast-node out-types-quoted
                      "init"
                      [size1* val2* val3* val4* val5* val6* val7* val8* val9* val10* val11* val12* val13* val14* val15* val16*]
                      *global*)]
    (new out-types ast)))

(s/fdef init:SArr
  :args (s/cat :size1* valid-i?* :val2* valid-i?* :val3* valid-i?* :val4* valid-i?* :val5* valid-i?* :val6* valid-i?* :val7* valid-i?* :val8* valid-i?* :val9* valid-i?* :val10* valid-i?* :val11* valid-i?* :val12* valid-i?* :val13* valid-i?* :val14* valid-i?* :val15* valid-i?* :val16* valid-i?* ))
(stest/instrument `init:SArr)

(defn init:iArr
  {:arglists '([& isize1* ival2* ival3* ival4* ival5* ival6* ival7* ival8* ival9* ival10* ival11* ival12* ival13* ival14* ival15* ival16*])}
  [& [ size1* val2* val3* val4* val5* val6* val7* val8* val9* val10* val11* val12* val13* val14* val15* val16* ]]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "init"
                      [size1* val2* val3* val4* val5* val6* val7* val8* val9* val10* val11* val12* val13* val14* val15* val16*]
                      *global*)]
    (new out-types ast)))

(s/fdef init:iArr
  :args (s/cat :size1* valid-i?* :val2* valid-i?* :val3* valid-i?* :val4* valid-i?* :val5* valid-i?* :val6* valid-i?* :val7* valid-i?* :val8* valid-i?* :val9* valid-i?* :val10* valid-i?* :val11* valid-i?* :val12* valid-i?* :val13* valid-i?* :val14* valid-i?* :val15* valid-i?* :val16* valid-i?* ))
(stest/instrument `init:iArr)

(defn init:f
  {:arglists '([fsize])}
  [size]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "init"
                      [size]
                      *global*)]
    (new out-types ast)))

(s/fdef init:f
  :args (s/cat :size valid-f? ))
(stest/instrument `init:f)

(defn init:a
  {:arglists '([asize])}
  [size]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "init"
                      [size]
                      *global*)]
    (new out-types ast)))

(s/fdef init:a
  :args (s/cat :size valid-ar? ))
(stest/instrument `init:a)

(defn init:S
  {:arglists '([Ssize])}
  [size]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "init"
                      [size]
                      *global*)]
    (new out-types ast)))

(s/fdef init:S
  :args (s/cat :size valid-S? ))
(stest/instrument `init:S)

(defn init
  {:arglists '([& isize1* ival2* ival3* ival4* ival5* ival6* ival7* ival8* ival9* ival10* ival11* ival12* ival13* ival14* ival15* ival16*] [& isize1* ival2* ival3* ival4* ival5* ival6* ival7* ival8* ival9* ival10* ival11* ival12* ival13* ival14* ival15* ival16*] [& isize1* ival2* ival3* ival4* ival5* ival6* ival7* ival8* ival9* ival10* ival11* ival12* ival13* ival14* ival15* ival16*] [isize] [Ssize] [fsize] [asize] [ksize])}
  [& [ size1* val2* val3* val4* val5* val6* val7* val8* val9* val10* val11* val12* val13* val14* val15* val16* ]]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "init"
                      [size1* val2* val3* val4* val5* val6* val7* val8* val9* val10* val11* val12* val13* val14* val15* val16*]
                      *global*)]
    (new out-types ast)))

(s/fdef init
  :args (s/alt
         :iiiiiiiiiiiiiiii (s/cat :size1* valid-i?* :val2* valid-i?* :val3* valid-i?* :val4* valid-i?* :val5* valid-i?* :val6* valid-i?* :val7* valid-i?* :val8* valid-i?* :val9* valid-i?* :val10* valid-i?* :val11* valid-i?* :val12* valid-i?* :val13* valid-i?* :val14* valid-i?* :val15* valid-i?* :val16* valid-i?* )
         ))
(stest/instrument `init)

(defn init:i
  {:arglists '([isize])}
  [size]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "init"
                      [size]
                      *global*)]
    (new out-types ast)))

(s/fdef init:i
  :args (s/cat :size valid-i? ))
(stest/instrument `init:i)

(defn init:k
  {:arglists '([ksize])}
  [size]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "init"
                      [size]
                      *global*)]
    (new out-types ast)))

(s/fdef init:k
  :args (s/cat :size valid-kr? ))
(stest/instrument `init:k)

(defn init:aArr
  {:arglists '([& isize1* ival2* ival3* ival4* ival5* ival6* ival7* ival8* ival9* ival10* ival11* ival12* ival13* ival14* ival15* ival16*])}
  [& [ size1* val2* val3* val4* val5* val6* val7* val8* val9* val10* val11* val12* val13* val14* val15* val16* ]]
  (let [out-types-quoted 'AudioArray
        out-types AudioArray
        ast (ast-node out-types-quoted
                      "init"
                      [size1* val2* val3* val4* val5* val6* val7* val8* val9* val10* val11* val12* val13* val14* val15* val16*]
                      *global*)]
    (new out-types ast)))

(s/fdef init:aArr
  :args (s/cat :size1* valid-i?* :val2* valid-i?* :val3* valid-i?* :val4* valid-i?* :val5* valid-i?* :val6* valid-i?* :val7* valid-i?* :val8* valid-i?* :val9* valid-i?* :val10* valid-i?* :val11* valid-i?* :val12* valid-i?* :val13* valid-i?* :val14* valid-i?* :val15* valid-i?* :val16* valid-i?* ))
(stest/instrument `init:aArr)

(defn pvsmix
  {:arglists '([fsigin1 fsigin2])}
  [sigin1 sigin2]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsmix"
                      [sigin1 sigin2]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsmix
  :args (s/cat :sigin1 valid-f? :sigin2 valid-f? ))
(stest/instrument `pvsmix)

(defn pvsmix:f
  {:arglists '([fsigin1 fsigin2])}
  [sigin1 sigin2]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsmix"
                      [sigin1 sigin2]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsmix:f
  :args (s/cat :sigin1 valid-f? :sigin2 valid-f? ))
(stest/instrument `pvsmix:f)

(defn logcurve
  {:arglists '([kindex ksteepness])}
  [index steepness]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "logcurve"
                      [index steepness]
                      *global*)]
    (new out-types ast)))

(s/fdef logcurve
  :args (s/cat :index valid-kr? :steepness valid-kr? ))
(stest/instrument `logcurve)

(defn logcurve:k
  {:arglists '([kindex ksteepness])}
  [index steepness]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "logcurve"
                      [index steepness]
                      *global*)]
    (new out-types ast)))

(s/fdef logcurve:k
  :args (s/cat :index valid-kr? :steepness valid-kr? ))
(stest/instrument `logcurve:k)

(defn in32
  {:arglists '()}
  []
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "in32"
                      []
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))


(defn cauchy
  {:arglists '([kalpha] [kalpha] [kalpha])}
  [alpha]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "cauchy"
                      [alpha]
                      *global*)]
    (new out-types ast)))

(s/fdef cauchy
  :args (s/alt
         :k (s/cat :alpha valid-kr? )
         ))
(stest/instrument `cauchy)

(defn cauchy:a
  {:arglists '([kalpha])}
  [alpha]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "cauchy"
                      [alpha]
                      *global*)]
    (new out-types ast)))

(s/fdef cauchy:a
  :args (s/cat :alpha valid-kr? ))
(stest/instrument `cauchy:a)

(defn cauchy:i
  {:arglists '([kalpha])}
  [alpha]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "cauchy"
                      [alpha]
                      *global*)]
    (new out-types ast)))

(s/fdef cauchy:i
  :args (s/cat :alpha valid-kr? ))
(stest/instrument `cauchy:i)

(defn cauchy:k
  {:arglists '([kalpha])}
  [alpha]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "cauchy"
                      [alpha]
                      *global*)]
    (new out-types ast)))

(s/fdef cauchy:k
  :args (s/cat :alpha valid-kr? ))
(stest/instrument `cauchy:k)

(defn vexpv
  {:arglists '([ifn1 ifn2 kelements & kdstoffset* ksrcoffset* kverbose*])}
  [fn1 fn2 elements & [ dstoffset* srcoffset* verbose* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vexpv"
                      [fn1 fn2 elements dstoffset* srcoffset* verbose*]
                      *global*)]
    (new out-types ast)))

(s/fdef vexpv
  :args (s/cat :fn1 valid-i? :fn2 valid-i? :elements valid-kr? :dstoffset* valid-kr?* :srcoffset* valid-kr?* :verbose* valid-kr?* ))
(stest/instrument `vexpv)

(defn midiout_i
  {:arglists '([istatus ichan idata3 idata4])}
  [status chan data3 data4]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "midiout_i"
                      [status chan data3 data4]
                      *global*)]
    (new out-types ast)))

(s/fdef midiout_i
  :args (s/cat :status valid-i? :chan valid-i? :data3 valid-i? :data4 valid-i? ))
(stest/instrument `midiout_i)

(defn fractalnoise
  {:arglists '([kamp kbeta])}
  [amp beta]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fractalnoise"
                      [amp beta]
                      *global*)]
    (new out-types ast)))

(s/fdef fractalnoise
  :args (s/cat :amp valid-kr? :beta valid-kr? ))
(stest/instrument `fractalnoise)

(defn fractalnoise:a
  {:arglists '([kamp kbeta])}
  [amp beta]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fractalnoise"
                      [amp beta]
                      *global*)]
    (new out-types ast)))

(s/fdef fractalnoise:a
  :args (s/cat :amp valid-kr? :beta valid-kr? ))
(stest/instrument `fractalnoise:a)

(defn strtodk
  {:arglists '([Sindex])}
  [index]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "strtodk"
                      [index]
                      *global*)]
    (new out-types ast)))

(s/fdef strtodk
  :args (s/cat :index valid-S? ))
(stest/instrument `strtodk)

(defn strtodk:k
  {:arglists '([Sindex])}
  [index]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "strtodk"
                      [index]
                      *global*)]
    (new out-types ast)))

(s/fdef strtodk:k
  :args (s/cat :index valid-S? ))
(stest/instrument `strtodk:k)

(defn harmon2
  {:arglists '([asig koct kfrq3 kfrq4 icpsmode ilowest & ipolarity*])}
  [sig oct frq3 frq4 cpsmode lowest & [ polarity* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "harmon2"
                      [sig oct frq3 frq4 cpsmode lowest polarity*]
                      *global*)]
    (new out-types ast)))

(s/fdef harmon2
  :args (s/cat :sig valid-ar? :oct valid-kr? :frq3 valid-kr? :frq4 valid-kr? :cpsmode valid-i? :lowest valid-i? :polarity* valid-i?* ))
(stest/instrument `harmon2)

(defn harmon2:a
  {:arglists '([asig koct kfrq3 kfrq4 icpsmode ilowest & ipolarity*])}
  [sig oct frq3 frq4 cpsmode lowest & [ polarity* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "harmon2"
                      [sig oct frq3 frq4 cpsmode lowest polarity*]
                      *global*)]
    (new out-types ast)))

(s/fdef harmon2:a
  :args (s/cat :sig valid-ar? :oct valid-kr? :frq3 valid-kr? :frq4 valid-kr? :cpsmode valid-i? :lowest valid-i? :polarity* valid-i?* ))
(stest/instrument `harmon2:a)

(defn zawm
  {:arglists '([asig kindex & imix*])}
  [sig index & [ mix* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "zawm"
                      [sig index mix*]
                      *global*)]
    (new out-types ast)))

(s/fdef zawm
  :args (s/cat :sig valid-ar? :index valid-kr? :mix* valid-i?* ))
(stest/instrument `zawm)

(defn mp3scal
  {:arglists '([Sfile ktimescal kpitch kamp & iskip* ifftsize* idecim* klock* klock*])}
  [file timescal pitch amp & [ skip* fftsize* decim* lock* lock* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal ControlSignal]
        out-types [AudioSignal AudioSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "mp3scal"
                      [file timescal pitch amp skip* fftsize* decim* lock* lock*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef mp3scal
  :args (s/cat :file valid-S? :timescal valid-kr? :pitch valid-kr? :amp valid-kr? :skip* valid-i?* :fftsize* valid-i?* :decim* valid-i?* :lock* valid-kr?* :lock* valid-kr?* ))
(stest/instrument `mp3scal)

(defn outc
  {:arglists '([& asig1* asig2* asig3* asig4* asig5* asig6* asig7* asig8* asig9* asig10* asig11* asig12* asig13* asig14* asig15* asig16* asig17* asig18* asig19* asig20* asig21* asig22* asig23* asig24* asig25* asig26* asig27* asig28* asig29* asig30* asig31* asig32*])}
  [& [ sig1* sig2* sig3* sig4* sig5* sig6* sig7* sig8* sig9* sig10* sig11* sig12* sig13* sig14* sig15* sig16* sig17* sig18* sig19* sig20* sig21* sig22* sig23* sig24* sig25* sig26* sig27* sig28* sig29* sig30* sig31* sig32* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outc"
                      [sig1* sig2* sig3* sig4* sig5* sig6* sig7* sig8* sig9* sig10* sig11* sig12* sig13* sig14* sig15* sig16* sig17* sig18* sig19* sig20* sig21* sig22* sig23* sig24* sig25* sig26* sig27* sig28* sig29* sig30* sig31* sig32*]
                      *global*)]
    (new out-types ast)))

(s/fdef outc
  :args (s/cat :sig1* valid-ar?* :sig2* valid-ar?* :sig3* valid-ar?* :sig4* valid-ar?* :sig5* valid-ar?* :sig6* valid-ar?* :sig7* valid-ar?* :sig8* valid-ar?* :sig9* valid-ar?* :sig10* valid-ar?* :sig11* valid-ar?* :sig12* valid-ar?* :sig13* valid-ar?* :sig14* valid-ar?* :sig15* valid-ar?* :sig16* valid-ar?* :sig17* valid-ar?* :sig18* valid-ar?* :sig19* valid-ar?* :sig20* valid-ar?* :sig21* valid-ar?* :sig22* valid-ar?* :sig23* valid-ar?* :sig24* valid-ar?* :sig25* valid-ar?* :sig26* valid-ar?* :sig27* valid-ar?* :sig28* valid-ar?* :sig29* valid-ar?* :sig30* valid-ar?* :sig31* valid-ar?* :sig32* valid-ar?* ))
(stest/instrument `outc)

(defn polyaft
  {:arglists '([inote & ilow* ihigh*] [inote & ilow* ihigh*])}
  [note & [ low* high* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "polyaft"
                      [note low* high*]
                      *global*)]
    (new out-types ast)))

(s/fdef polyaft
  :args (s/alt
         :iii (s/cat :note valid-i? :low* valid-i?* :high* valid-i?* )
         ))
(stest/instrument `polyaft)

(defn polyaft:i
  {:arglists '([inote & ilow* ihigh*])}
  [note & [ low* high* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "polyaft"
                      [note low* high*]
                      *global*)]
    (new out-types ast)))

(s/fdef polyaft:i
  :args (s/cat :note valid-i? :low* valid-i?* :high* valid-i?* ))
(stest/instrument `polyaft:i)

(defn polyaft:k
  {:arglists '([inote & ilow* ihigh*])}
  [note & [ low* high* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "polyaft"
                      [note low* high*]
                      *global*)]
    (new out-types ast)))

(s/fdef polyaft:k
  :args (s/cat :note valid-i? :low* valid-i?* :high* valid-i?* ))
(stest/instrument `polyaft:k)

(defn outq1
  {:arglists '([asig])}
  [sig]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outq1"
                      [sig]
                      *global*)]
    (new out-types ast)))

(s/fdef outq1
  :args (s/cat :sig valid-ar? ))
(stest/instrument `outq1)

(defn vincr
  {:arglists '([accum aincr])}
  [ccum incr]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vincr"
                      [ccum incr]
                      *global*)]
    (new out-types ast)))

(s/fdef vincr
  :args (s/cat :ccum valid-ar? :incr valid-ar? ))
(stest/instrument `vincr)

(defn dct
  {:arglists '([iinArr] [kinArr])}
  [in]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "dct"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef dct
  :args (s/alt
         :iArr (s/cat :in valid-iArr? )
         ))
(stest/instrument `dct)

(defn dct:iArr
  {:arglists '([iinArr])}
  [in]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "dct"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef dct:iArr
  :args (s/cat :in valid-iArr? ))
(stest/instrument `dct:iArr)

(defn dct:kArr
  {:arglists '([kinArr])}
  [in]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "dct"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef dct:kArr
  :args (s/cat :in valid-kArr? ))
(stest/instrument `dct:kArr)

(defn bpf
  {:arglists '([kx kx2 ky3 kx4 kxn kyn kyn] [kx kx2 ky3 kx4 kxn kyn kyn kyn kyn] [kx kx2 ky3 kx4 kxn kyn kyn kyn kyn kyn kyn])}
  [x x2 y3 x4 xn yn yn]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "bpf"
                      [x x2 y3 x4 xn yn yn]
                      *global*)]
    (new out-types ast)))

(s/fdef bpf
  :args (s/alt
         :kkkkkkk (s/cat :x valid-kr? :x2 valid-kr? :y3 valid-kr? :x4 valid-kr? :xn valid-kr? :yn valid-kr? :yn valid-kr? )
         ))
(stest/instrument `bpf)

(defn bpf:k
  {:arglists '([kx kx2 ky3 kx4 kxn kyn kyn] [kx kx2 ky3 kx4 kxn kyn kyn kyn kyn] [kx kx2 ky3 kx4 kxn kyn kyn kyn kyn kyn kyn])}
  [x x2 y3 x4 xn yn yn]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "bpf"
                      [x x2 y3 x4 xn yn yn]
                      *global*)]
    (new out-types ast)))

(s/fdef bpf:k
  :args (s/alt
         :kkkkkkk (s/cat :x valid-kr? :x2 valid-kr? :y3 valid-kr? :x4 valid-kr? :xn valid-kr? :yn valid-kr? :yn valid-kr? )
         ))
(stest/instrument `bpf:k)

(defn trlowest
  {:arglists '([fin1 kscal])}
  [in1 scal]
  (let [out-types-quoted '[FrequencySignal ControlSignal ControlSignal]
        out-types [FrequencySignal ControlSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "trlowest"
                      [in1 scal]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef trlowest
  :args (s/cat :in1 valid-f? :scal valid-kr? ))
(stest/instrument `trlowest)

(defn tablew
  {:arglists '([asig aindex itable & ixmode* ixoff* iwgmode*] [isig iindex itable & ixmode* ixoff* iwgmode*] [ksig kindex itable & ixmode* ixoff* iwgmode*])}
  [sig index table & [ xmode* xoff* wgmode* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "tablew"
                      [sig index table xmode* xoff* wgmode*]
                      *global*)]
    (new out-types ast)))

(s/fdef tablew
  :args (s/alt
         :aaiiii (s/cat :sig valid-ar? :index valid-ar? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wgmode* valid-i?* )
         ))
(stest/instrument `tablew)

(defn changed
  {:arglists '([Svar1])}
  [var1]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "changed"
                      [var1]
                      *global*)]
    (new out-types ast)))

(s/fdef changed
  :args (s/cat :var1 valid-S? ))
(stest/instrument `changed)

(defn changed:k
  {:arglists '([Svar1])}
  [var1]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "changed"
                      [var1]
                      *global*)]
    (new out-types ast)))

(s/fdef changed:k
  :args (s/cat :var1 valid-S? ))
(stest/instrument `changed:k)

(defn nestedap
  {:arglists '([asig imode imaxdel idel4 igain5 & idel1* igain1* idel1* igain1* istor*])}
  [sig mode maxdel del4 gain5 & [ del1* gain1* del1* gain1* stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "nestedap"
                      [sig mode maxdel del4 gain5 del1* gain1* del1* gain1* stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef nestedap
  :args (s/cat :sig valid-ar? :mode valid-i? :maxdel valid-i? :del4 valid-i? :gain5 valid-i? :del1* valid-i?* :gain1* valid-i?* :del1* valid-i?* :gain1* valid-i?* :stor* valid-i?* ))
(stest/instrument `nestedap)

(defn nestedap:a
  {:arglists '([asig imode imaxdel idel4 igain5 & idel1* igain1* idel1* igain1* istor*])}
  [sig mode maxdel del4 gain5 & [ del1* gain1* del1* gain1* stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "nestedap"
                      [sig mode maxdel del4 gain5 del1* gain1* del1* gain1* stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef nestedap:a
  :args (s/cat :sig valid-ar? :mode valid-i? :maxdel valid-i? :del4 valid-i? :gain5 valid-i? :del1* valid-i?* :gain1* valid-i?* :del1* valid-i?* :gain1* valid-i?* :stor* valid-i?* ))
(stest/instrument `nestedap:a)

(defn strcmpk
  {:arglists '([Sarg1 Sarg2])}
  [arg1 arg2]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "strcmpk"
                      [arg1 arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef strcmpk
  :args (s/cat :arg1 valid-S? :arg2 valid-S? ))
(stest/instrument `strcmpk)

(defn strcmpk:k
  {:arglists '([Sarg1 Sarg2])}
  [arg1 arg2]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "strcmpk"
                      [arg1 arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef strcmpk:k
  :args (s/cat :arg1 valid-S? :arg2 valid-S? ))
(stest/instrument `strcmpk:k)

(defn expsega
  {:arglists '([ia idur2 & ib1* idur2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a dur2 & [ b1* dur2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "expsega"
                      [a dur2 b1* dur2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef expsega
  :args (s/cat :a valid-i? :dur2 valid-i? :b1* valid-i?* :dur2* valid-i?* :c3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* ))
(stest/instrument `expsega)

(defn expsega:a
  {:arglists '([ia idur2 & ib1* idur2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a dur2 & [ b1* dur2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "expsega"
                      [a dur2 b1* dur2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef expsega:a
  :args (s/cat :a valid-i? :dur2 valid-i? :b1* valid-i?* :dur2* valid-i?* :c3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* ))
(stest/instrument `expsega:a)

(defn vtabi
  {:arglists '([iindex itable & iout1* iout2* iout3* ioutN4* ioutN5* ioutN6* ioutN7* ioutN8* ioutN9* ioutN10* ioutN11* ioutN12* ioutN13* ioutN14* ioutN15* ioutN16*])}
  [index table & [ out1* out2* out3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vtabi"
                      [index table out1* out2* out3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef vtabi
  :args (s/cat :index valid-i? :table valid-i? :out1* valid-i?* :out2* valid-i?* :out3* valid-i?* :outN4* valid-i?* :outN5* valid-i?* :outN6* valid-i?* :outN7* valid-i?* :outN8* valid-i?* :outN9* valid-i?* :outN10* valid-i?* :outN11* valid-i?* :outN12* valid-i?* :outN13* valid-i?* :outN14* valid-i?* :outN15* valid-i?* :outN16* valid-i?* ))
(stest/instrument `vtabi)

(defn unirand
  {:arglists '([krange] [krange] [krange])}
  [range]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "unirand"
                      [range]
                      *global*)]
    (new out-types ast)))

(s/fdef unirand
  :args (s/alt
         :k (s/cat :range valid-kr? )
         ))
(stest/instrument `unirand)

(defn unirand:a
  {:arglists '([krange])}
  [range]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "unirand"
                      [range]
                      *global*)]
    (new out-types ast)))

(s/fdef unirand:a
  :args (s/cat :range valid-kr? ))
(stest/instrument `unirand:a)

(defn unirand:i
  {:arglists '([krange])}
  [range]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "unirand"
                      [range]
                      *global*)]
    (new out-types ast)))

(s/fdef unirand:i
  :args (s/cat :range valid-kr? ))
(stest/instrument `unirand:i)

(defn unirand:k
  {:arglists '([krange])}
  [range]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "unirand"
                      [range]
                      *global*)]
    (new out-types ast)))

(s/fdef unirand:k
  :args (s/cat :range valid-kr? ))
(stest/instrument `unirand:k)

(defn mvclpf4
  {:arglists '([ain acenter-frequency aresonance & istor*] [ain acenter-frequency kresonance & istor*] [ain kcenter-frequency aresonance & istor*] [ain kcenter-frequency kresonance & istor*])}
  [in center-frequency resonance & [ stor* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "mvclpf4"
                      [in center-frequency resonance stor*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef mvclpf4
  :args (s/alt
         :aaai (s/cat :in valid-ar? :center-frequency valid-ar? :resonance valid-ar? :stor* valid-i?* )
         ))
(stest/instrument `mvclpf4)

(defn pchtom
  {:arglists '([ipch] [kpch])}
  [pch]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "pchtom"
                      [pch]
                      *global*)]
    (new out-types ast)))

(s/fdef pchtom
  :args (s/alt
         :i (s/cat :pch valid-i? )
         ))
(stest/instrument `pchtom)

(defn pchtom:i
  {:arglists '([ipch])}
  [pch]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "pchtom"
                      [pch]
                      *global*)]
    (new out-types ast)))

(s/fdef pchtom:i
  :args (s/cat :pch valid-i? ))
(stest/instrument `pchtom:i)

(defn pchtom:k
  {:arglists '([kpch])}
  [pch]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "pchtom"
                      [pch]
                      *global*)]
    (new out-types ast)))

(s/fdef pchtom:k
  :args (s/cat :pch valid-kr? ))
(stest/instrument `pchtom:k)

(defn r2c
  {:arglists '([iinArr] [kinArr])}
  [in]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "r2c"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef r2c
  :args (s/alt
         :iArr (s/cat :in valid-iArr? )
         ))
(stest/instrument `r2c)

(defn r2c:iArr
  {:arglists '([iinArr])}
  [in]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "r2c"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef r2c:iArr
  :args (s/cat :in valid-iArr? ))
(stest/instrument `r2c:iArr)

(defn r2c:kArr
  {:arglists '([kinArr])}
  [in]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "r2c"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef r2c:kArr
  :args (s/cat :in valid-kArr? ))
(stest/instrument `r2c:kArr)

(defn gainslider
  {:arglists '([kindex])}
  [index]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "gainslider"
                      [index]
                      *global*)]
    (new out-types ast)))

(s/fdef gainslider
  :args (s/cat :index valid-kr? ))
(stest/instrument `gainslider)

(defn gainslider:k
  {:arglists '([kindex])}
  [index]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "gainslider"
                      [index]
                      *global*)]
    (new out-types ast)))

(s/fdef gainslider:k
  :args (s/cat :index valid-kr? ))
(stest/instrument `gainslider:k)

(defn moogladder2
  {:arglists '([ain acenter-frequency aresonance & istor*] [ain acenter-frequency kresonance & istor*] [ain kcenter-frequency aresonance & istor*] [ain kcenter-frequency kresonance & istor*])}
  [in center-frequency resonance & [ stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "moogladder2"
                      [in center-frequency resonance stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef moogladder2
  :args (s/alt
         :aaai (s/cat :in valid-ar? :center-frequency valid-ar? :resonance valid-ar? :stor* valid-i?* )
         ))
(stest/instrument `moogladder2)

(defn moogladder2:a
  {:arglists '([ain acenter-frequency aresonance & istor*] [ain acenter-frequency kresonance & istor*] [ain kcenter-frequency aresonance & istor*] [ain kcenter-frequency kresonance & istor*])}
  [in center-frequency resonance & [ stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "moogladder2"
                      [in center-frequency resonance stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef moogladder2:a
  :args (s/alt
         :aaai (s/cat :in valid-ar? :center-frequency valid-ar? :resonance valid-ar? :stor* valid-i?* )
         ))
(stest/instrument `moogladder2:a)

(defn lpshold
  {:arglists '([kfreq ktrig iphase & ktime1* kvalue2* kvalue3* ktime4* kvalue5* ktime6* ktime7* ktime8* ktime9* ktime10* ktime11* ktime12* ktime13* ktime14* ktime15* ktime16*])}
  [freq trig phase & [ time1* value2* value3* time4* value5* time6* time7* time8* time9* time10* time11* time12* time13* time14* time15* time16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "lpshold"
                      [freq trig phase time1* value2* value3* time4* value5* time6* time7* time8* time9* time10* time11* time12* time13* time14* time15* time16*]
                      *global*)]
    (new out-types ast)))

(s/fdef lpshold
  :args (s/cat :freq valid-kr? :trig valid-kr? :phase valid-i? :time1* valid-kr?* :value2* valid-kr?* :value3* valid-kr?* :time4* valid-kr?* :value5* valid-kr?* :time6* valid-kr?* :time7* valid-kr?* :time8* valid-kr?* :time9* valid-kr?* :time10* valid-kr?* :time11* valid-kr?* :time12* valid-kr?* :time13* valid-kr?* :time14* valid-kr?* :time15* valid-kr?* :time16* valid-kr?* ))
(stest/instrument `lpshold)

(defn lpshold:k
  {:arglists '([kfreq ktrig iphase & ktime1* kvalue2* kvalue3* ktime4* kvalue5* ktime6* ktime7* ktime8* ktime9* ktime10* ktime11* ktime12* ktime13* ktime14* ktime15* ktime16*])}
  [freq trig phase & [ time1* value2* value3* time4* value5* time6* time7* time8* time9* time10* time11* time12* time13* time14* time15* time16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "lpshold"
                      [freq trig phase time1* value2* value3* time4* value5* time6* time7* time8* time9* time10* time11* time12* time13* time14* time15* time16*]
                      *global*)]
    (new out-types ast)))

(s/fdef lpshold:k
  :args (s/cat :freq valid-kr? :trig valid-kr? :phase valid-i? :time1* valid-kr?* :value2* valid-kr?* :value3* valid-kr?* :time4* valid-kr?* :value5* valid-kr?* :time6* valid-kr?* :time7* valid-kr?* :time8* valid-kr?* :time9* valid-kr?* :time10* valid-kr?* :time11* valid-kr?* :time12* valid-kr?* :time13* valid-kr?* :time14* valid-kr?* :time15* valid-kr?* :time16* valid-kr?* ))
(stest/instrument `lpshold:k)

(defn printks2
  {:arglists '([Sstring kval])}
  [string val]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "printks2"
                      [string val]
                      *global*)]
    (new out-types ast)))

(s/fdef printks2
  :args (s/cat :string valid-S? :val valid-kr? ))
(stest/instrument `printks2)

(defn MixerSetLevel_i
  {:arglists '([isend ibuss igain])}
  [send buss gain]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "MixerSetLevel_i"
                      [send buss gain]
                      *global*)]
    (new out-types ast)))

(s/fdef MixerSetLevel_i
  :args (s/cat :send valid-i? :buss valid-i? :gain valid-i? ))
(stest/instrument `MixerSetLevel_i)

(defn K35_lpf
  {:arglists '([ain xcenter-frequency xQ & knlp* ksaturation* istor*])}
  [in center-frequency Q & [ nlp* saturation* stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "K35_lpf"
                      [in center-frequency Q nlp* saturation* stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef K35_lpf
  :args (s/cat :in valid-ar? :center-frequency valid-x? :Q valid-x? :nlp* valid-kr?* :saturation* valid-kr?* :stor* valid-i?* ))
(stest/instrument `K35_lpf)

(defn K35_lpf:a
  {:arglists '([ain xcenter-frequency xQ & knlp* ksaturation* istor*])}
  [in center-frequency Q & [ nlp* saturation* stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "K35_lpf"
                      [in center-frequency Q nlp* saturation* stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef K35_lpf:a
  :args (s/cat :in valid-ar? :center-frequency valid-x? :Q valid-x? :nlp* valid-kr?* :saturation* valid-kr?* :stor* valid-i?* ))
(stest/instrument `K35_lpf:a)

(defn tablecopy
  {:arglists '([kdft ksft])}
  [dft sft]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "tablecopy"
                      [dft sft]
                      *global*)]
    (new out-types ast)))

(s/fdef tablecopy
  :args (s/cat :dft valid-kr? :sft valid-kr? ))
(stest/instrument `tablecopy)

(defn adsynt
  {:arglists '([kamp kcps iwfn ifreqfn iampfn icnt & iphase*])}
  [amp cps wfn freqfn ampfn cnt & [ phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "adsynt"
                      [amp cps wfn freqfn ampfn cnt phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef adsynt
  :args (s/cat :amp valid-kr? :cps valid-kr? :wfn valid-i? :freqfn valid-i? :ampfn valid-i? :cnt valid-i? :phase* valid-i?* ))
(stest/instrument `adsynt)

(defn adsynt:a
  {:arglists '([kamp kcps iwfn ifreqfn iampfn icnt & iphase*])}
  [amp cps wfn freqfn ampfn cnt & [ phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "adsynt"
                      [amp cps wfn freqfn ampfn cnt phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef adsynt:a
  :args (s/cat :amp valid-kr? :cps valid-kr? :wfn valid-i? :freqfn valid-i? :ampfn valid-i? :cnt valid-i? :phase* valid-i?* ))
(stest/instrument `adsynt:a)

(defn print
  {:arglists '([& iarg1* iarg2* iarg3* iarg4* iarg5* iarg6* iarg7* iarg8* iarg9* iarg10* iarg11* iarg12* iarg13* iarg14* iarg15* iarg16*])}
  [& [ arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "print"
                      [arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16*]
                      *global*)]
    (new out-types ast)))

(s/fdef print
  :args (s/cat :arg1* valid-i?* :arg2* valid-i?* :arg3* valid-i?* :arg4* valid-i?* :arg5* valid-i?* :arg6* valid-i?* :arg7* valid-i?* :arg8* valid-i?* :arg9* valid-i?* :arg10* valid-i?* :arg11* valid-i?* :arg12* valid-i?* :arg13* valid-i?* :arg14* valid-i?* :arg15* valid-i?* :arg16* valid-i?* ))
(stest/instrument `print)

(defn spdist
  {:arglists '([itable ktime kx ky])}
  [table time x y]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "spdist"
                      [table time x y]
                      *global*)]
    (new out-types ast)))

(s/fdef spdist
  :args (s/cat :table valid-i? :time valid-kr? :x valid-kr? :y valid-kr? ))
(stest/instrument `spdist)

(defn spdist:k
  {:arglists '([itable ktime kx ky])}
  [table time x y]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "spdist"
                      [table time x y]
                      *global*)]
    (new out-types ast)))

(s/fdef spdist:k
  :args (s/cat :table valid-i? :time valid-kr? :x valid-kr? :y valid-kr? ))
(stest/instrument `spdist:k)

(defn cpsxpch
  {:arglists '([ipch iequal irepeat ibase])}
  [pch equal repeat base]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "cpsxpch"
                      [pch equal repeat base]
                      *global*)]
    (new out-types ast)))

(s/fdef cpsxpch
  :args (s/cat :pch valid-i? :equal valid-i? :repeat valid-i? :base valid-i? ))
(stest/instrument `cpsxpch)

(defn cpsxpch:i
  {:arglists '([ipch iequal irepeat ibase])}
  [pch equal repeat base]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "cpsxpch"
                      [pch equal repeat base]
                      *global*)]
    (new out-types ast)))

(s/fdef cpsxpch:i
  :args (s/cat :pch valid-i? :equal valid-i? :repeat valid-i? :base valid-i? ))
(stest/instrument `cpsxpch:i)

(defn date
  {:arglists '( )}
  []
  (let [out-types-quoted '[Variable ]
        out-types [Variable ]
        ast (ast-node out-types-quoted
                      "date"
                      []
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))


(defn display
  {:arglists '([xsig iprd & inprds* iwtflg*])}
  [sig prd & [ nprds* wtflg* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "display"
                      [sig prd nprds* wtflg*]
                      *global*)]
    (new out-types ast)))

(s/fdef display
  :args (s/cat :sig valid-x? :prd valid-i? :nprds* valid-i?* :wtflg* valid-i?* ))
(stest/instrument `display)

(defn osciln
  {:arglists '([kamp ifrq itable itimes])}
  [amp frq table times]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "osciln"
                      [amp frq table times]
                      *global*)]
    (new out-types ast)))

(s/fdef osciln
  :args (s/cat :amp valid-kr? :frq valid-i? :table valid-i? :times valid-i? ))
(stest/instrument `osciln)

(defn osciln:a
  {:arglists '([kamp ifrq itable itimes])}
  [amp frq table times]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "osciln"
                      [amp frq table times]
                      *global*)]
    (new out-types ast)))

(s/fdef osciln:a
  :args (s/cat :amp valid-kr? :frq valid-i? :table valid-i? :times valid-i? ))
(stest/instrument `osciln:a)

(defn oscili
  {:arglists '([aamp acps itableArr & iphase*] [aamp acps & itable* iphase*] [aamp kcps itableArr & iphase*] [aamp kcps & itable* iphase*] [kamp acps itableArr & iphase*] [kamp acps & itable* iphase*] [kamp kcps itableArr & iphase*] [kamp kcps & itable* iphase*] [kamp kcps itableArr & iphase*] [kamp kcps & itable* iphase*])}
  [amp cps table & [ phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "oscili"
                      [amp cps table phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef oscili
  :args (s/alt
         :aaiArri (s/cat :amp valid-ar? :cps valid-ar? :table valid-iArr? :phase* valid-i?* )
         ))
(stest/instrument `oscili)

(defn oscili:a
  {:arglists '([aamp acps itableArr & iphase*] [aamp acps & itable* iphase*] [aamp kcps itableArr & iphase*] [aamp kcps & itable* iphase*] [kamp acps itableArr & iphase*] [kamp acps & itable* iphase*] [kamp kcps itableArr & iphase*] [kamp kcps & itable* iphase*])}
  [amp cps table & [ phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "oscili"
                      [amp cps table phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef oscili:a
  :args (s/alt
         :aaiArri (s/cat :amp valid-ar? :cps valid-ar? :table valid-iArr? :phase* valid-i?* )
         ))
(stest/instrument `oscili:a)

(defn oscili:k
  {:arglists '([kamp kcps itableArr & iphase*] [kamp kcps & itable* iphase*])}
  [amp cps table & [ phase* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "oscili"
                      [amp cps table phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef oscili:k
  :args (s/alt
         :kkiArri (s/cat :amp valid-kr? :cps valid-kr? :table valid-iArr? :phase* valid-i?* )
         ))
(stest/instrument `oscili:k)

(defn strset
  {:arglists '([iarg Sstring])}
  [arg string]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "strset"
                      [arg string]
                      *global*)]
    (new out-types ast)))

(s/fdef strset
  :args (s/cat :arg valid-i? :string valid-S? ))
(stest/instrument `strset)

(defn splitrig
  {:arglists '([ktrig kindex imaxtics itable & kout1* kout2* koutN3* koutN4* koutN5* koutN6* koutN7* koutN8* koutN9* koutN10* koutN11* koutN12* koutN13* koutN14* koutN15* koutN16*])}
  [trig index maxtics table & [ out1* out2* outN3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "splitrig"
                      [trig index maxtics table out1* out2* outN3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef splitrig
  :args (s/cat :trig valid-kr? :index valid-kr? :maxtics valid-i? :table valid-i? :out1* valid-kr?* :out2* valid-kr?* :outN3* valid-kr?* :outN4* valid-kr?* :outN5* valid-kr?* :outN6* valid-kr?* :outN7* valid-kr?* :outN8* valid-kr?* :outN9* valid-kr?* :outN10* valid-kr?* :outN11* valid-kr?* :outN12* valid-kr?* :outN13* valid-kr?* :outN14* valid-kr?* :outN15* valid-kr?* :outN16* valid-kr?* ))
(stest/instrument `splitrig)

(defn outvalue
  {:arglists '([Schannel-name Sstring] [Schannel-name istring] [Schannel-name kstring] [ichannel-name Sstring] [ichannel-name istring] [ichannel-name kstring])}
  [channel-name string]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outvalue"
                      [channel-name string]
                      *global*)]
    (new out-types ast)))

(s/fdef outvalue
  :args (s/alt
         :SS (s/cat :channel-name valid-S? :string valid-S? )
         ))
(stest/instrument `outvalue)

(defn deltapxw
  {:arglists '([ain adel iwsize & iwsize*])}
  [in del wsize & [ wsize* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "deltapxw"
                      [in del wsize wsize*]
                      *global*)]
    (new out-types ast)))

(s/fdef deltapxw
  :args (s/cat :in valid-ar? :del valid-ar? :wsize valid-i? :wsize* valid-i?* ))
(stest/instrument `deltapxw)

(defn vdelay3
  {:arglists '([asig xdel imaxdel & iskip*])}
  [sig del maxdel & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "vdelay3"
                      [sig del maxdel skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef vdelay3
  :args (s/cat :sig valid-ar? :del valid-x? :maxdel valid-i? :skip* valid-i?* ))
(stest/instrument `vdelay3)

(defn vdelay3:a
  {:arglists '([asig xdel imaxdel & iskip*])}
  [sig del maxdel & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "vdelay3"
                      [sig del maxdel skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef vdelay3:a
  :args (s/cat :sig valid-ar? :del valid-x? :maxdel valid-i? :skip* valid-i?* ))
(stest/instrument `vdelay3:a)

(defn voice
  {:arglists '([kamp kfreq kphoneme kform kvibf kvamp itable ivfn])}
  [amp freq phoneme form vibf vamp table vfn]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "voice"
                      [amp freq phoneme form vibf vamp table vfn]
                      *global*)]
    (new out-types ast)))

(s/fdef voice
  :args (s/cat :amp valid-kr? :freq valid-kr? :phoneme valid-kr? :form valid-kr? :vibf valid-kr? :vamp valid-kr? :table valid-i? :vfn valid-i? ))
(stest/instrument `voice)

(defn voice:a
  {:arglists '([kamp kfreq kphoneme kform kvibf kvamp itable ivfn])}
  [amp freq phoneme form vibf vamp table vfn]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "voice"
                      [amp freq phoneme form vibf vamp table vfn]
                      *global*)]
    (new out-types ast)))

(s/fdef voice:a
  :args (s/cat :amp valid-kr? :freq valid-kr? :phoneme valid-kr? :form valid-kr? :vibf valid-kr? :vamp valid-kr? :table valid-i? :vfn valid-i? ))
(stest/instrument `voice:a)

(defn bexprnd
  {:arglists '([krange] [krange] [krange])}
  [range]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "bexprnd"
                      [range]
                      *global*)]
    (new out-types ast)))

(s/fdef bexprnd
  :args (s/alt
         :k (s/cat :range valid-kr? )
         ))
(stest/instrument `bexprnd)

(defn bexprnd:a
  {:arglists '([krange])}
  [range]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "bexprnd"
                      [range]
                      *global*)]
    (new out-types ast)))

(s/fdef bexprnd:a
  :args (s/cat :range valid-kr? ))
(stest/instrument `bexprnd:a)

(defn bexprnd:i
  {:arglists '([krange])}
  [range]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "bexprnd"
                      [range]
                      *global*)]
    (new out-types ast)))

(s/fdef bexprnd:i
  :args (s/cat :range valid-kr? ))
(stest/instrument `bexprnd:i)

(defn bexprnd:k
  {:arglists '([krange])}
  [range]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "bexprnd"
                      [range]
                      *global*)]
    (new out-types ast)))

(s/fdef bexprnd:k
  :args (s/cat :range valid-kr? ))
(stest/instrument `bexprnd:k)

(defn chnclear
  {:arglists '([Sname])}
  [name]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "chnclear"
                      [name]
                      *global*)]
    (new out-types ast)))

(s/fdef chnclear
  :args (s/cat :name valid-S? ))
(stest/instrument `chnclear)

(defn pvstanal
  {:arglists '([ktimescal kamp kpitch ktab & kdetect* kwrap* ioffset* ifftsize* ihop* kdbthresh*])}
  [timescal amp pitch tab & [ detect* wrap* offset* fftsize* hop* dbthresh* ]]
  (let [out-types-quoted '[               ]
        out-types [               ]
        ast (ast-node out-types-quoted
                      "pvstanal"
                      [timescal amp pitch tab detect* wrap* offset* fftsize* hop* dbthresh*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef pvstanal
  :args (s/cat :timescal valid-kr? :amp valid-kr? :pitch valid-kr? :tab valid-kr? :detect* valid-kr?* :wrap* valid-kr?* :offset* valid-i?* :fftsize* valid-i?* :hop* valid-i?* :dbthresh* valid-kr?* ))
(stest/instrument `pvstanal)

(defn readf
  {:arglists '([Sfilname] [ifilname])}
  [filname]
  (let [out-types-quoted '[String ControlSignal]
        out-types [String ControlSignal]
        ast (ast-node out-types-quoted
                      "readf"
                      [filname]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef readf
  :args (s/alt
         :S (s/cat :filname valid-S? )
         ))
(stest/instrument `readf)

(defn randomh
  {:arglists '([kmin kmax xcps & imode* ifirstval*] [kmin kmax kcps & imode* ifirstval*])}
  [min max cps & [ mode* firstval* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "randomh"
                      [min max cps mode* firstval*]
                      *global*)]
    (new out-types ast)))

(s/fdef randomh
  :args (s/alt
         :kkxii (s/cat :min valid-kr? :max valid-kr? :cps valid-x? :mode* valid-i?* :firstval* valid-i?* )
         ))
(stest/instrument `randomh)

(defn randomh:a
  {:arglists '([kmin kmax xcps & imode* ifirstval*])}
  [min max cps & [ mode* firstval* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "randomh"
                      [min max cps mode* firstval*]
                      *global*)]
    (new out-types ast)))

(s/fdef randomh:a
  :args (s/cat :min valid-kr? :max valid-kr? :cps valid-x? :mode* valid-i?* :firstval* valid-i?* ))
(stest/instrument `randomh:a)

(defn randomh:k
  {:arglists '([kmin kmax kcps & imode* ifirstval*])}
  [min max cps & [ mode* firstval* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "randomh"
                      [min max cps mode* firstval*]
                      *global*)]
    (new out-types ast)))

(s/fdef randomh:k
  :args (s/cat :min valid-kr? :max valid-kr? :cps valid-kr? :mode* valid-i?* :firstval* valid-i?* ))
(stest/instrument `randomh:k)

(defn getcol
  {:arglists '([kinArr kcol])}
  [in col]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "getcol"
                      [in col]
                      *global*)]
    (new out-types ast)))

(s/fdef getcol
  :args (s/cat :in valid-kArr? :col valid-kr? ))
(stest/instrument `getcol)

(defn getcol:kArr
  {:arglists '([kinArr kcol])}
  [in col]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "getcol"
                      [in col]
                      *global*)]
    (new out-types ast)))

(s/fdef getcol:kArr
  :args (s/cat :in valid-kArr? :col valid-kr? ))
(stest/instrument `getcol:kArr)

(defn xtratim
  {:arglists '([iextradur])}
  [extradur]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "xtratim"
                      [extradur]
                      *global*)]
    (new out-types ast)))

(s/fdef xtratim
  :args (s/cat :extradur valid-i? ))
(stest/instrument `xtratim)

(defn outs1
  {:arglists '([asig])}
  [sig]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outs1"
                      [sig]
                      *global*)]
    (new out-types ast)))

(s/fdef outs1
  :args (s/cat :sig valid-ar? ))
(stest/instrument `outs1)

(defn tabsum
  {:arglists '([itable & kmin* kmax*])}
  [table & [ min* max* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "tabsum"
                      [table min* max*]
                      *global*)]
    (new out-types ast)))

(s/fdef tabsum
  :args (s/cat :table valid-i? :min* valid-kr?* :max* valid-kr?* ))
(stest/instrument `tabsum)

(defn tabsum:k
  {:arglists '([itable & kmin* kmax*])}
  [table & [ min* max* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "tabsum"
                      [table min* max*]
                      *global*)]
    (new out-types ast)))

(s/fdef tabsum:k
  :args (s/cat :table valid-i? :min* valid-kr?* :max* valid-kr?* ))
(stest/instrument `tabsum:k)

(defn vdivv
  {:arglists '([ifn1 ifn2 kelements & kdstoffset* ksrcoffset* kverbose*])}
  [fn1 fn2 elements & [ dstoffset* srcoffset* verbose* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vdivv"
                      [fn1 fn2 elements dstoffset* srcoffset* verbose*]
                      *global*)]
    (new out-types ast)))

(s/fdef vdivv
  :args (s/cat :fn1 valid-i? :fn2 valid-i? :elements valid-kr? :dstoffset* valid-kr?* :srcoffset* valid-kr?* :verbose* valid-kr?* ))
(stest/instrument `vdivv)

(defn fin
  {:arglists '([Sfilename iskipframes iformat arrArr] [Sfilename iskipframes iformat & arr1* arr2* arr3* arr4* arr5* arr6* arr7* arr8* arr9* arr10* arr11* arr12* arr13* arr14* arr15* arr16* arr17* arr18* arr19* arr20* arr21* arr22* arr23* arr24* arr25* arr26* arr27* arr28* arr29* arr30* arr31* arr32*] [ifilename iskipframes iformat & arr1* arr2* arr3* arr4* arr5* arr6* arr7* arr8* arr9* arr10* arr11* arr12* arr13* arr14* arr15* arr16* arr17* arr18* arr19* arr20* arr21* arr22* arr23* arr24* arr25* arr26* arr27* arr28* arr29* arr30* arr31* arr32*])}
  [filename skipframes format rr]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "fin"
                      [filename skipframes format rr]
                      *global*)]
    (new out-types ast)))

(s/fdef fin
  :args (s/alt
         :SiiaArr (s/cat :filename valid-S? :skipframes valid-i? :format valid-i? :rr valid-aArr? )
         ))
(stest/instrument `fin)

(defn peak
  {:arglists '([asig] [ksig])}
  [sig]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "peak"
                      [sig]
                      *global*)]
    (new out-types ast)))

(s/fdef peak
  :args (s/alt
         :a (s/cat :sig valid-ar? )
         ))
(stest/instrument `peak)

(defn peak:k
  {:arglists '([asig] [ksig])}
  [sig]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "peak"
                      [sig]
                      *global*)]
    (new out-types ast)))

(s/fdef peak:k
  :args (s/alt
         :a (s/cat :sig valid-ar? )
         ))
(stest/instrument `peak:k)

(defn pvscross
  {:arglists '([fsrc fdest kamp3 kamp4])}
  [src dest amp3 amp4]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvscross"
                      [src dest amp3 amp4]
                      *global*)]
    (new out-types ast)))

(s/fdef pvscross
  :args (s/cat :src valid-f? :dest valid-f? :amp3 valid-kr? :amp4 valid-kr? ))
(stest/instrument `pvscross)

(defn pvscross:f
  {:arglists '([fsrc fdest kamp3 kamp4])}
  [src dest amp3 amp4]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvscross"
                      [src dest amp3 amp4]
                      *global*)]
    (new out-types ast)))

(s/fdef pvscross:f
  :args (s/cat :src valid-f? :dest valid-f? :amp3 valid-kr? :amp4 valid-kr? ))
(stest/instrument `pvscross:f)

(defn convolve
  {:arglists '([ain Sfilcod & ichannel*] [ain ifilcod & ichannel*])}
  [in filcod & [ channel* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "convolve"
                      [in filcod channel*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef convolve
  :args (s/alt
         :aSi (s/cat :in valid-ar? :filcod valid-S? :channel* valid-i?* )
         ))
(stest/instrument `convolve)

(defn ftload
  {:arglists '([Sfilename iflag & ifn1* ifn2* ifn3* ifn4* ifn5* ifn6* ifn7* ifn8* ifn9* ifn10* ifn11* ifn12* ifn13* ifn14* ifn15* ifn16*] [ifilename iflag & ifn1* ifn2* ifn3* ifn4* ifn5* ifn6* ifn7* ifn8* ifn9* ifn10* ifn11* ifn12* ifn13* ifn14* ifn15* ifn16*])}
  [filename flag & [ fn1* fn2* fn3* fn4* fn5* fn6* fn7* fn8* fn9* fn10* fn11* fn12* fn13* fn14* fn15* fn16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "ftload"
                      [filename flag fn1* fn2* fn3* fn4* fn5* fn6* fn7* fn8* fn9* fn10* fn11* fn12* fn13* fn14* fn15* fn16*]
                      *global*)]
    (new out-types ast)))

(s/fdef ftload
  :args (s/alt
         :Siiiiiiiiiiiiiiiii (s/cat :filename valid-S? :flag valid-i? :fn1* valid-i?* :fn2* valid-i?* :fn3* valid-i?* :fn4* valid-i?* :fn5* valid-i?* :fn6* valid-i?* :fn7* valid-i?* :fn8* valid-i?* :fn9* valid-i?* :fn10* valid-i?* :fn11* valid-i?* :fn12* valid-i?* :fn13* valid-i?* :fn14* valid-i?* :fn15* valid-i?* :fn16* valid-i?* )
         ))
(stest/instrument `ftload)

(defn vmirror
  {:arglists '([itable kmin kmax ielements])}
  [table min max elements]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vmirror"
                      [table min max elements]
                      *global*)]
    (new out-types ast)))

(s/fdef vmirror
  :args (s/cat :table valid-i? :min valid-kr? :max valid-kr? :elements valid-i? ))
(stest/instrument `vmirror)

(defn setctrl
  {:arglists '([inum Sval itype] [inum ival itype])}
  [num val type]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "setctrl"
                      [num val type]
                      *global*)]
    (new out-types ast)))

(s/fdef setctrl
  :args (s/alt
         :iSi (s/cat :num valid-i? :val valid-S? :type valid-i? )
         ))
(stest/instrument `setctrl)

(defn trandom
  {:arglists '([ktrig kmin kmax])}
  [trig min max]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "trandom"
                      [trig min max]
                      *global*)]
    (new out-types ast)))

(s/fdef trandom
  :args (s/cat :trig valid-kr? :min valid-kr? :max valid-kr? ))
(stest/instrument `trandom)

(defn trandom:k
  {:arglists '([ktrig kmin kmax])}
  [trig min max]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "trandom"
                      [trig min max]
                      *global*)]
    (new out-types ast)))

(s/fdef trandom:k
  :args (s/cat :trig valid-kr? :min valid-kr? :max valid-kr? ))
(stest/instrument `trandom:k)

(defn aftouch
  {:arglists '([& imin* imax*])}
  [& [ min* max* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "aftouch"
                      [min* max*]
                      *global*)]
    (new out-types ast)))

(s/fdef aftouch
  :args (s/cat :min* valid-i?* :max* valid-i?* ))
(stest/instrument `aftouch)

(defn aftouch:k
  {:arglists '([& imin* imax*])}
  [& [ min* max* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "aftouch"
                      [min* max*]
                      *global*)]
    (new out-types ast)))

(s/fdef aftouch:k
  :args (s/cat :min* valid-i?* :max* valid-i?* ))
(stest/instrument `aftouch:k)

(defn massign
  {:arglists '([ichnl Sinsname & ireset*] [ichnl iinsname & ireset*])}
  [chnl insname & [ reset* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "massign"
                      [chnl insname reset*]
                      *global*)]
    (new out-types ast)))

(s/fdef massign
  :args (s/alt
         :iSi (s/cat :chnl valid-i? :insname valid-S? :reset* valid-i?* )
         ))
(stest/instrument `massign)

(defn tableiw
  {:arglists '([isig iindex itable & ixmode* ixoff* iwgmode*])}
  [sig index table & [ xmode* xoff* wgmode* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "tableiw"
                      [sig index table xmode* xoff* wgmode*]
                      *global*)]
    (new out-types ast)))

(s/fdef tableiw
  :args (s/cat :sig valid-i? :index valid-i? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wgmode* valid-i?* ))
(stest/instrument `tableiw)

(defn pinkish
  {:arglists '([xin & imethod* inumbands* iseed* iskip*])}
  [in & [ method* numbands* seed* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pinkish"
                      [in method* numbands* seed* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef pinkish
  :args (s/cat :in valid-x? :method* valid-i?* :numbands* valid-i?* :seed* valid-i?* :skip* valid-i?* ))
(stest/instrument `pinkish)

(defn pinkish:a
  {:arglists '([xin & imethod* inumbands* iseed* iskip*])}
  [in & [ method* numbands* seed* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pinkish"
                      [in method* numbands* seed* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef pinkish:a
  :args (s/cat :in valid-x? :method* valid-i?* :numbands* valid-i?* :seed* valid-i?* :skip* valid-i?* ))
(stest/instrument `pinkish:a)

(defn linseg
  {:arglists '([ia idur2 & ib1* idur2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*] [ia idur2 & ib1* idur2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a dur2 & [ b1* dur2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "linseg"
                      [a dur2 b1* dur2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef linseg
  :args (s/alt
         :iiiiiiiiiiiiiiiiii (s/cat :a valid-i? :dur2 valid-i? :b1* valid-i?* :dur2* valid-i?* :c3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* )
         ))
(stest/instrument `linseg)

(defn linseg:a
  {:arglists '([ia idur2 & ib1* idur2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a dur2 & [ b1* dur2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "linseg"
                      [a dur2 b1* dur2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef linseg:a
  :args (s/cat :a valid-i? :dur2 valid-i? :b1* valid-i?* :dur2* valid-i?* :c3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* ))
(stest/instrument `linseg:a)

(defn linseg:k
  {:arglists '([ia idur2 & ib1* idur2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a dur2 & [ b1* dur2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "linseg"
                      [a dur2 b1* dur2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef linseg:k
  :args (s/cat :a valid-i? :dur2 valid-i? :b1* valid-i?* :dur2* valid-i?* :c3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* ))
(stest/instrument `linseg:k)

(defn midinoteonkey
  {:arglists '([xkey xvelocity])}
  [key velocity]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "midinoteonkey"
                      [key velocity]
                      *global*)]
    (new out-types ast)))

(s/fdef midinoteonkey
  :args (s/cat :key valid-x? :velocity valid-x? ))
(stest/instrument `midinoteonkey)

(defn dumpk
  {:arglists '([ksig Sfilname iformat iprd] [ksig ifilname iformat iprd])}
  [sig filname format prd]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "dumpk"
                      [sig filname format prd]
                      *global*)]
    (new out-types ast)))

(s/fdef dumpk
  :args (s/alt
         :kSii (s/cat :sig valid-kr? :filname valid-S? :format valid-i? :prd valid-i? )
         ))
(stest/instrument `dumpk)

(defn mtof
  {:arglists '([imidi] [kmidi])}
  [midi]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "mtof"
                      [midi]
                      *global*)]
    (new out-types ast)))

(s/fdef mtof
  :args (s/alt
         :i (s/cat :midi valid-i? )
         ))
(stest/instrument `mtof)

(defn mtof:i
  {:arglists '([imidi])}
  [midi]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "mtof"
                      [midi]
                      *global*)]
    (new out-types ast)))

(s/fdef mtof:i
  :args (s/cat :midi valid-i? ))
(stest/instrument `mtof:i)

(defn mtof:k
  {:arglists '([kmidi])}
  [midi]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "mtof"
                      [midi]
                      *global*)]
    (new out-types ast)))

(s/fdef mtof:k
  :args (s/cat :midi valid-kr? ))
(stest/instrument `mtof:k)

(defn octmidi
  {:arglists '()}
  []
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "octmidi"
                      []
                      *global*)]
    (new out-types ast)))


(defn octmidi:i
  {:arglists '()}
  []
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "octmidi"
                      []
                      *global*)]
    (new out-types ast)))


(defn tempoval
  {:arglists '()}
  []
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "tempoval"
                      []
                      *global*)]
    (new out-types ast)))


(defn tempoval:k
  {:arglists '()}
  []
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "tempoval"
                      []
                      *global*)]
    (new out-types ast)))


(defn midremot
  {:arglists '([Sdestination Ssource & instrnum1* instrnum2* instrnum3* instrnum4* instrnum5* instrnum6* instrnum7* instrnum8* instrnum9* instrnum10* instrnum11* instrnum12* instrnum13* instrnum14* instrnum15* instrnum16*])}
  [destination source & [ nstrnum1* nstrnum2* nstrnum3* nstrnum4* nstrnum5* nstrnum6* nstrnum7* nstrnum8* nstrnum9* nstrnum10* nstrnum11* nstrnum12* nstrnum13* nstrnum14* nstrnum15* nstrnum16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "midremot"
                      [destination source nstrnum1* nstrnum2* nstrnum3* nstrnum4* nstrnum5* nstrnum6* nstrnum7* nstrnum8* nstrnum9* nstrnum10* nstrnum11* nstrnum12* nstrnum13* nstrnum14* nstrnum15* nstrnum16*]
                      *global*)]
    (new out-types ast)))

(s/fdef midremot
  :args (s/cat :destination valid-S? :source valid-S? :nstrnum1* valid-i?* :nstrnum2* valid-i?* :nstrnum3* valid-i?* :nstrnum4* valid-i?* :nstrnum5* valid-i?* :nstrnum6* valid-i?* :nstrnum7* valid-i?* :nstrnum8* valid-i?* :nstrnum9* valid-i?* :nstrnum10* valid-i?* :nstrnum11* valid-i?* :nstrnum12* valid-i?* :nstrnum13* valid-i?* :nstrnum14* valid-i?* :nstrnum15* valid-i?* :nstrnum16* valid-i?* ))
(stest/instrument `midremot)

(defn madsr
  {:arglists '([iatt idec islev irel & idel* ireltim*] [iatt idec islev irel & idel* ireltim*])}
  [att dec slev rel & [ del* reltim* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "madsr"
                      [att dec slev rel del* reltim*]
                      *global*)]
    (new out-types ast)))

(s/fdef madsr
  :args (s/alt
         :iiiiii (s/cat :att valid-i? :dec valid-i? :slev valid-i? :rel valid-i? :del* valid-i?* :reltim* valid-i?* )
         ))
(stest/instrument `madsr)

(defn madsr:k
  {:arglists '([iatt idec islev irel & idel* ireltim*] [iatt idec islev irel & idel* ireltim*])}
  [att dec slev rel & [ del* reltim* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "madsr"
                      [att dec slev rel del* reltim*]
                      *global*)]
    (new out-types ast)))

(s/fdef madsr:k
  :args (s/alt
         :iiiiii (s/cat :att valid-i? :dec valid-i? :slev valid-i? :rel valid-i? :del* valid-i?* :reltim* valid-i?* )
         ))
(stest/instrument `madsr:k)

(defn tempest
  {:arglists '([kin iprd imindur imemdur ihp ithresh ihtim ixfdbak istartempo itable & idisprd* itweek*])}
  [in prd mindur memdur hp thresh htim xfdbak startempo table & [ disprd* tweek* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "tempest"
                      [in prd mindur memdur hp thresh htim xfdbak startempo table disprd* tweek*]
                      *global*)]
    (new out-types ast)))

(s/fdef tempest
  :args (s/cat :in valid-kr? :prd valid-i? :mindur valid-i? :memdur valid-i? :hp valid-i? :thresh valid-i? :htim valid-i? :xfdbak valid-i? :startempo valid-i? :table valid-i? :disprd* valid-i?* :tweek* valid-i?* ))
(stest/instrument `tempest)

(defn tempest:k
  {:arglists '([kin iprd imindur imemdur ihp ithresh ihtim ixfdbak istartempo itable & idisprd* itweek*])}
  [in prd mindur memdur hp thresh htim xfdbak startempo table & [ disprd* tweek* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "tempest"
                      [in prd mindur memdur hp thresh htim xfdbak startempo table disprd* tweek*]
                      *global*)]
    (new out-types ast)))

(s/fdef tempest:k
  :args (s/cat :in valid-kr? :prd valid-i? :mindur valid-i? :memdur valid-i? :hp valid-i? :thresh valid-i? :htim valid-i? :xfdbak valid-i? :startempo valid-i? :table valid-i? :disprd* valid-i?* :tweek* valid-i?* ))
(stest/instrument `tempest:k)

(defn lpsholdp
  {:arglists '([kphase & kvalue1* ktime2* kvalue3* ktime4* kvalue5* ktime6* ktime7* ktime8* ktime9* ktime10* ktime11* ktime12* ktime13* ktime14* ktime15* ktime16*])}
  [phase & [ value1* time2* value3* time4* value5* time6* time7* time8* time9* time10* time11* time12* time13* time14* time15* time16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "lpsholdp"
                      [phase value1* time2* value3* time4* value5* time6* time7* time8* time9* time10* time11* time12* time13* time14* time15* time16*]
                      *global*)]
    (new out-types ast)))

(s/fdef lpsholdp
  :args (s/cat :phase valid-kr? :value1* valid-kr?* :time2* valid-kr?* :value3* valid-kr?* :time4* valid-kr?* :value5* valid-kr?* :time6* valid-kr?* :time7* valid-kr?* :time8* valid-kr?* :time9* valid-kr?* :time10* valid-kr?* :time11* valid-kr?* :time12* valid-kr?* :time13* valid-kr?* :time14* valid-kr?* :time15* valid-kr?* :time16* valid-kr?* ))
(stest/instrument `lpsholdp)

(defn lpsholdp:k
  {:arglists '([kphase & kvalue1* ktime2* kvalue3* ktime4* kvalue5* ktime6* ktime7* ktime8* ktime9* ktime10* ktime11* ktime12* ktime13* ktime14* ktime15* ktime16*])}
  [phase & [ value1* time2* value3* time4* value5* time6* time7* time8* time9* time10* time11* time12* time13* time14* time15* time16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "lpsholdp"
                      [phase value1* time2* value3* time4* value5* time6* time7* time8* time9* time10* time11* time12* time13* time14* time15* time16*]
                      *global*)]
    (new out-types ast)))

(s/fdef lpsholdp:k
  :args (s/cat :phase valid-kr? :value1* valid-kr?* :time2* valid-kr?* :value3* valid-kr?* :time4* valid-kr?* :value5* valid-kr?* :time6* valid-kr?* :time7* valid-kr?* :time8* valid-kr?* :time9* valid-kr?* :time10* valid-kr?* :time11* valid-kr?* :time12* valid-kr?* :time13* valid-kr?* :time14* valid-kr?* :time15* valid-kr?* :time16* valid-kr?* ))
(stest/instrument `lpsholdp:k)

(defn follow
  {:arglists '([asig idt])}
  [sig dt]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "follow"
                      [sig dt]
                      *global*)]
    (new out-types ast)))

(s/fdef follow
  :args (s/cat :sig valid-ar? :dt valid-i? ))
(stest/instrument `follow)

(defn follow:a
  {:arglists '([asig idt])}
  [sig dt]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "follow"
                      [sig dt]
                      *global*)]
    (new out-types ast)))

(s/fdef follow:a
  :args (s/cat :sig valid-ar? :dt valid-i? ))
(stest/instrument `follow:a)

(defn multitap
  {:arglists '([asig & itime1* igain2* itime3* igain4* igain5* igain6* igain7* igain8* igain9* igain10* igain11* igain12* igain13* igain14* igain15* igain16*])}
  [sig & [ time1* gain2* time3* gain4* gain5* gain6* gain7* gain8* gain9* gain10* gain11* gain12* gain13* gain14* gain15* gain16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "multitap"
                      [sig time1* gain2* time3* gain4* gain5* gain6* gain7* gain8* gain9* gain10* gain11* gain12* gain13* gain14* gain15* gain16*]
                      *global*)]
    (new out-types ast)))

(s/fdef multitap
  :args (s/cat :sig valid-ar? :time1* valid-i?* :gain2* valid-i?* :time3* valid-i?* :gain4* valid-i?* :gain5* valid-i?* :gain6* valid-i?* :gain7* valid-i?* :gain8* valid-i?* :gain9* valid-i?* :gain10* valid-i?* :gain11* valid-i?* :gain12* valid-i?* :gain13* valid-i?* :gain14* valid-i?* :gain15* valid-i?* :gain16* valid-i?* ))
(stest/instrument `multitap)

(defn multitap:a
  {:arglists '([asig & itime1* igain2* itime3* igain4* igain5* igain6* igain7* igain8* igain9* igain10* igain11* igain12* igain13* igain14* igain15* igain16*])}
  [sig & [ time1* gain2* time3* gain4* gain5* gain6* gain7* gain8* gain9* gain10* gain11* gain12* gain13* gain14* gain15* gain16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "multitap"
                      [sig time1* gain2* time3* gain4* gain5* gain6* gain7* gain8* gain9* gain10* gain11* gain12* gain13* gain14* gain15* gain16*]
                      *global*)]
    (new out-types ast)))

(s/fdef multitap:a
  :args (s/cat :sig valid-ar? :time1* valid-i?* :gain2* valid-i?* :time3* valid-i?* :gain4* valid-i?* :gain5* valid-i?* :gain6* valid-i?* :gain7* valid-i?* :gain8* valid-i?* :gain9* valid-i?* :gain10* valid-i?* :gain11* valid-i?* :gain12* valid-i?* :gain13* valid-i?* :gain14* valid-i?* :gain15* valid-i?* :gain16* valid-i?* ))
(stest/instrument `multitap:a)

(defn pvsmaska
  {:arglists '([fsrc itable kdepth])}
  [src table depth]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsmaska"
                      [src table depth]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsmaska
  :args (s/cat :src valid-f? :table valid-i? :depth valid-kr? ))
(stest/instrument `pvsmaska)

(defn pvsmaska:f
  {:arglists '([fsrc itable kdepth])}
  [src table depth]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsmaska"
                      [src table depth]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsmaska:f
  :args (s/cat :src valid-f? :table valid-i? :depth valid-kr? ))
(stest/instrument `pvsmaska:f)

(defn trcross
  {:arglists '([fin1 fin2 ksearch & kdepth1* kmode2* kmode3* kmode4* kmode5* kmode6* kmode7* kmode8* kmode9* kmode10* kmode11* kmode12* kmode13* kmode14* kmode15* kmode16*])}
  [in1 in2 search & [ depth1* mode2* mode3* mode4* mode5* mode6* mode7* mode8* mode9* mode10* mode11* mode12* mode13* mode14* mode15* mode16* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "trcross"
                      [in1 in2 search depth1* mode2* mode3* mode4* mode5* mode6* mode7* mode8* mode9* mode10* mode11* mode12* mode13* mode14* mode15* mode16*]
                      *global*)]
    (new out-types ast)))

(s/fdef trcross
  :args (s/cat :in1 valid-f? :in2 valid-f? :search valid-kr? :depth1* valid-kr?* :mode2* valid-kr?* :mode3* valid-kr?* :mode4* valid-kr?* :mode5* valid-kr?* :mode6* valid-kr?* :mode7* valid-kr?* :mode8* valid-kr?* :mode9* valid-kr?* :mode10* valid-kr?* :mode11* valid-kr?* :mode12* valid-kr?* :mode13* valid-kr?* :mode14* valid-kr?* :mode15* valid-kr?* :mode16* valid-kr?* ))
(stest/instrument `trcross)

(defn trcross:f
  {:arglists '([fin1 fin2 ksearch & kdepth1* kmode2* kmode3* kmode4* kmode5* kmode6* kmode7* kmode8* kmode9* kmode10* kmode11* kmode12* kmode13* kmode14* kmode15* kmode16*])}
  [in1 in2 search & [ depth1* mode2* mode3* mode4* mode5* mode6* mode7* mode8* mode9* mode10* mode11* mode12* mode13* mode14* mode15* mode16* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "trcross"
                      [in1 in2 search depth1* mode2* mode3* mode4* mode5* mode6* mode7* mode8* mode9* mode10* mode11* mode12* mode13* mode14* mode15* mode16*]
                      *global*)]
    (new out-types ast)))

(s/fdef trcross:f
  :args (s/cat :in1 valid-f? :in2 valid-f? :search valid-kr? :depth1* valid-kr?* :mode2* valid-kr?* :mode3* valid-kr?* :mode4* valid-kr?* :mode5* valid-kr?* :mode6* valid-kr?* :mode7* valid-kr?* :mode8* valid-kr?* :mode9* valid-kr?* :mode10* valid-kr?* :mode11* valid-kr?* :mode12* valid-kr?* :mode13* valid-kr?* :mode14* valid-kr?* :mode15* valid-kr?* :mode16* valid-kr?* ))
(stest/instrument `trcross:f)

(defn mvchpf
  {:arglists '([ain acenter-frequency & istor*] [ain kcenter-frequency & istor*])}
  [in center-frequency & [ stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "mvchpf"
                      [in center-frequency stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef mvchpf
  :args (s/alt
         :aai (s/cat :in valid-ar? :center-frequency valid-ar? :stor* valid-i?* )
         ))
(stest/instrument `mvchpf)

(defn mvchpf:a
  {:arglists '([ain acenter-frequency & istor*] [ain kcenter-frequency & istor*])}
  [in center-frequency & [ stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "mvchpf"
                      [in center-frequency stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef mvchpf:a
  :args (s/alt
         :aai (s/cat :in valid-ar? :center-frequency valid-ar? :stor* valid-i?* )
         ))
(stest/instrument `mvchpf:a)

(defn butbp
  {:arglists '([asig xfreq xband & iskip*])}
  [sig freq band & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "butbp"
                      [sig freq band skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef butbp
  :args (s/cat :sig valid-ar? :freq valid-x? :band valid-x? :skip* valid-i?* ))
(stest/instrument `butbp)

(defn butbp:a
  {:arglists '([asig xfreq xband & iskip*])}
  [sig freq band & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "butbp"
                      [sig freq band skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef butbp:a
  :args (s/cat :sig valid-ar? :freq valid-x? :band valid-x? :skip* valid-i?* ))
(stest/instrument `butbp:a)

(defn strsub
  {:arglists '([Ssrc & istart* iend*])}
  [src & [ start* end* ]]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "strsub"
                      [src start* end*]
                      *global*)]
    (new out-types ast)))

(s/fdef strsub
  :args (s/cat :src valid-S? :start* valid-i?* :end* valid-i?* ))
(stest/instrument `strsub)

(defn strsub:S
  {:arglists '([Ssrc & istart* iend*])}
  [src & [ start* end* ]]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "strsub"
                      [src start* end*]
                      *global*)]
    (new out-types ast)))

(s/fdef strsub:S
  :args (s/cat :src valid-S? :start* valid-i?* :end* valid-i?* ))
(stest/instrument `strsub:S)

(defn poscil
  {:arglists '([aamp acps & itable* iphase*] [aamp kcps & itable* iphase*] [kamp acps & itable* iphase*] [kamp kcps & itable* iphase*] [kamp kcps & itable* iphase*])}
  [amp cps & [ table* phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "poscil"
                      [amp cps table* phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef poscil
  :args (s/alt
         :aaii (s/cat :amp valid-ar? :cps valid-ar? :table* valid-i?* :phase* valid-i?* )
         ))
(stest/instrument `poscil)

(defn poscil:a
  {:arglists '([aamp acps & itable* iphase*] [aamp kcps & itable* iphase*] [kamp acps & itable* iphase*] [kamp kcps & itable* iphase*])}
  [amp cps & [ table* phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "poscil"
                      [amp cps table* phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef poscil:a
  :args (s/alt
         :aaii (s/cat :amp valid-ar? :cps valid-ar? :table* valid-i?* :phase* valid-i?* )
         ))
(stest/instrument `poscil:a)

(defn poscil:k
  {:arglists '([kamp kcps & itable* iphase*])}
  [amp cps & [ table* phase* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "poscil"
                      [amp cps table* phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef poscil:k
  :args (s/cat :amp valid-kr? :cps valid-kr? :table* valid-i?* :phase* valid-i?* ))
(stest/instrument `poscil:k)

(defn tablewa
  {:arglists '([ktable asig koff & ioff*])}
  [table sig off & [ off* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "tablewa"
                      [table sig off off*]
                      *global*)]
    (new out-types ast)))

(s/fdef tablewa
  :args (s/cat :table valid-kr? :sig valid-ar? :off valid-kr? :off* valid-i?* ))
(stest/instrument `tablewa)

(defn tablewa:k
  {:arglists '([ktable asig koff & ioff*])}
  [table sig off & [ off* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "tablewa"
                      [table sig off off*]
                      *global*)]
    (new out-types ast)))

(s/fdef tablewa:k
  :args (s/cat :table valid-kr? :sig valid-ar? :off valid-kr? :off* valid-i?* ))
(stest/instrument `tablewa:k)

(defn fmbell
  {:arglists '([kamp kfreq kc3 kc4 kvdepth kvrate & ifn1* ifn1* ifn1* ifn1* ivfn* isus*])}
  [amp freq c3 c4 vdepth vrate & [ fn1* fn1* fn1* fn1* vfn* sus* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fmbell"
                      [amp freq c3 c4 vdepth vrate fn1* fn1* fn1* fn1* vfn* sus*]
                      *global*)]
    (new out-types ast)))

(s/fdef fmbell
  :args (s/cat :amp valid-kr? :freq valid-kr? :c3 valid-kr? :c4 valid-kr? :vdepth valid-kr? :vrate valid-kr? :fn1* valid-i?* :fn1* valid-i?* :fn1* valid-i?* :fn1* valid-i?* :vfn* valid-i?* :sus* valid-i?* ))
(stest/instrument `fmbell)

(defn fmbell:a
  {:arglists '([kamp kfreq kc3 kc4 kvdepth kvrate & ifn1* ifn1* ifn1* ifn1* ivfn* isus*])}
  [amp freq c3 c4 vdepth vrate & [ fn1* fn1* fn1* fn1* vfn* sus* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fmbell"
                      [amp freq c3 c4 vdepth vrate fn1* fn1* fn1* fn1* vfn* sus*]
                      *global*)]
    (new out-types ast)))

(s/fdef fmbell:a
  :args (s/cat :amp valid-kr? :freq valid-kr? :c3 valid-kr? :c4 valid-kr? :vdepth valid-kr? :vrate valid-kr? :fn1* valid-i?* :fn1* valid-i?* :fn1* valid-i?* :fn1* valid-i?* :vfn* valid-i?* :sus* valid-i?* ))
(stest/instrument `fmbell:a)

(defn buthp
  {:arglists '([asig afreq & iskip*] [asig kfreq & iskip*])}
  [sig freq & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "buthp"
                      [sig freq skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef buthp
  :args (s/alt
         :aai (s/cat :sig valid-ar? :freq valid-ar? :skip* valid-i?* )
         ))
(stest/instrument `buthp)

(defn buthp:a
  {:arglists '([asig afreq & iskip*] [asig kfreq & iskip*])}
  [sig freq & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "buthp"
                      [sig freq skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef buthp:a
  :args (s/alt
         :aai (s/cat :sig valid-ar? :freq valid-ar? :skip* valid-i?* )
         ))
(stest/instrument `buthp:a)

(defn nlfilt2
  {:arglists '([ain ka kb kd kC kL])}
  [in a b d C L]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "nlfilt2"
                      [in a b d C L]
                      *global*)]
    (new out-types ast)))

(s/fdef nlfilt2
  :args (s/cat :in valid-ar? :a valid-kr? :b valid-kr? :d valid-kr? :C valid-kr? :L valid-kr? ))
(stest/instrument `nlfilt2)

(defn nlfilt2:a
  {:arglists '([ain ka kb kd kC kL])}
  [in a b d C L]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "nlfilt2"
                      [in a b d C L]
                      *global*)]
    (new out-types ast)))

(s/fdef nlfilt2:a
  :args (s/cat :in valid-ar? :a valid-kr? :b valid-kr? :d valid-kr? :C valid-kr? :L valid-kr? ))
(stest/instrument `nlfilt2:a)

(defn dssiinit
  {:arglists '([ilibraryname iplugindex & iverbose*] [Slibraryname iplugindex & iverbose*])}
  [libraryname plugindex & [ verbose* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "dssiinit"
                      [libraryname plugindex verbose*]
                      *global*)]
    (new out-types ast)))

(s/fdef dssiinit
  :args (s/alt
         :iii (s/cat :libraryname valid-i? :plugindex valid-i? :verbose* valid-i?* )
         ))
(stest/instrument `dssiinit)

(defn dssiinit:i
  {:arglists '([ilibraryname iplugindex & iverbose*] [Slibraryname iplugindex & iverbose*])}
  [libraryname plugindex & [ verbose* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "dssiinit"
                      [libraryname plugindex verbose*]
                      *global*)]
    (new out-types ast)))

(s/fdef dssiinit:i
  :args (s/alt
         :iii (s/cat :libraryname valid-i? :plugindex valid-i? :verbose* valid-i?* )
         ))
(stest/instrument `dssiinit:i)

(defn envlpxr
  {:arglists '([aamp irise idec itable iatss iatdec & ixmod* irind*] [kamp irise idec itable iatss iatdec & ixmod* irind*] [kamp irise idec itable iatss iatdec & ixmod* irind*])}
  [amp rise dec table atss atdec & [ xmod* rind* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "envlpxr"
                      [amp rise dec table atss atdec xmod* rind*]
                      *global*)]
    (new out-types ast)))

(s/fdef envlpxr
  :args (s/alt
         :aiiiiiii (s/cat :amp valid-ar? :rise valid-i? :dec valid-i? :table valid-i? :atss valid-i? :atdec valid-i? :xmod* valid-i?* :rind* valid-i?* )
         ))
(stest/instrument `envlpxr)

(defn envlpxr:a
  {:arglists '([aamp irise idec itable iatss iatdec & ixmod* irind*] [kamp irise idec itable iatss iatdec & ixmod* irind*])}
  [amp rise dec table atss atdec & [ xmod* rind* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "envlpxr"
                      [amp rise dec table atss atdec xmod* rind*]
                      *global*)]
    (new out-types ast)))

(s/fdef envlpxr:a
  :args (s/alt
         :aiiiiiii (s/cat :amp valid-ar? :rise valid-i? :dec valid-i? :table valid-i? :atss valid-i? :atdec valid-i? :xmod* valid-i?* :rind* valid-i?* )
         ))
(stest/instrument `envlpxr:a)

(defn envlpxr:k
  {:arglists '([kamp irise idec itable iatss iatdec & ixmod* irind*])}
  [amp rise dec table atss atdec & [ xmod* rind* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "envlpxr"
                      [amp rise dec table atss atdec xmod* rind*]
                      *global*)]
    (new out-types ast)))

(s/fdef envlpxr:k
  :args (s/cat :amp valid-kr? :rise valid-i? :dec valid-i? :table valid-i? :atss valid-i? :atdec valid-i? :xmod* valid-i?* :rind* valid-i?* ))
(stest/instrument `envlpxr:k)

(defn moog
  {:arglists '([kamp kfreq kfiltq kfiltrate kvibf kvamp iafn iwfn ivfn])}
  [amp freq filtq filtrate vibf vamp afn wfn vfn]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "moog"
                      [amp freq filtq filtrate vibf vamp afn wfn vfn]
                      *global*)]
    (new out-types ast)))

(s/fdef moog
  :args (s/cat :amp valid-kr? :freq valid-kr? :filtq valid-kr? :filtrate valid-kr? :vibf valid-kr? :vamp valid-kr? :afn valid-i? :wfn valid-i? :vfn valid-i? ))
(stest/instrument `moog)

(defn moog:a
  {:arglists '([kamp kfreq kfiltq kfiltrate kvibf kvamp iafn iwfn ivfn])}
  [amp freq filtq filtrate vibf vamp afn wfn vfn]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "moog"
                      [amp freq filtq filtrate vibf vamp afn wfn vfn]
                      *global*)]
    (new out-types ast)))

(s/fdef moog:a
  :args (s/cat :amp valid-kr? :freq valid-kr? :filtq valid-kr? :filtrate valid-kr? :vibf valid-kr? :vamp valid-kr? :afn valid-i? :wfn valid-i? :vfn valid-i? ))
(stest/instrument `moog:a)

(defn vrandh
  {:arglists '([itable krange kcps ielements & idstoffset* iseed* isize* ioffset*])}
  [table range cps elements & [ dstoffset* seed* size* offset* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vrandh"
                      [table range cps elements dstoffset* seed* size* offset*]
                      *global*)]
    (new out-types ast)))

(s/fdef vrandh
  :args (s/cat :table valid-i? :range valid-kr? :cps valid-kr? :elements valid-i? :dstoffset* valid-i?* :seed* valid-i?* :size* valid-i?* :offset* valid-i?* ))
(stest/instrument `vrandh)

(defn vdelayk
  {:arglists '([ksig kdel imaxdel & iskip* imode*])}
  [sig del maxdel & [ skip* mode* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "vdelayk"
                      [sig del maxdel skip* mode*]
                      *global*)]
    (new out-types ast)))

(s/fdef vdelayk
  :args (s/cat :sig valid-kr? :del valid-kr? :maxdel valid-i? :skip* valid-i?* :mode* valid-i?* ))
(stest/instrument `vdelayk)

(defn vdelayk:k
  {:arglists '([ksig kdel imaxdel & iskip* imode*])}
  [sig del maxdel & [ skip* mode* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "vdelayk"
                      [sig del maxdel skip* mode*]
                      *global*)]
    (new out-types ast)))

(s/fdef vdelayk:k
  :args (s/cat :sig valid-kr? :del valid-kr? :maxdel valid-i? :skip* valid-i?* :mode* valid-i?* ))
(stest/instrument `vdelayk:k)

(defn outs
  {:arglists '([& asig1* asig2* asig3* asig4* asig5* asig6* asig7* asig8* asig9* asig10* asig11* asig12* asig13* asig14* asig15* asig16* asig17* asig18* asig19* asig20* asig21* asig22* asig23* asig24* asig25* asig26* asig27* asig28* asig29* asig30* asig31* asig32*])}
  [& [ sig1* sig2* sig3* sig4* sig5* sig6* sig7* sig8* sig9* sig10* sig11* sig12* sig13* sig14* sig15* sig16* sig17* sig18* sig19* sig20* sig21* sig22* sig23* sig24* sig25* sig26* sig27* sig28* sig29* sig30* sig31* sig32* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outs"
                      [sig1* sig2* sig3* sig4* sig5* sig6* sig7* sig8* sig9* sig10* sig11* sig12* sig13* sig14* sig15* sig16* sig17* sig18* sig19* sig20* sig21* sig22* sig23* sig24* sig25* sig26* sig27* sig28* sig29* sig30* sig31* sig32*]
                      *global*)]
    (new out-types ast)))

(s/fdef outs
  :args (s/cat :sig1* valid-ar?* :sig2* valid-ar?* :sig3* valid-ar?* :sig4* valid-ar?* :sig5* valid-ar?* :sig6* valid-ar?* :sig7* valid-ar?* :sig8* valid-ar?* :sig9* valid-ar?* :sig10* valid-ar?* :sig11* valid-ar?* :sig12* valid-ar?* :sig13* valid-ar?* :sig14* valid-ar?* :sig15* valid-ar?* :sig16* valid-ar?* :sig17* valid-ar?* :sig18* valid-ar?* :sig19* valid-ar?* :sig20* valid-ar?* :sig21* valid-ar?* :sig22* valid-ar?* :sig23* valid-ar?* :sig24* valid-ar?* :sig25* valid-ar?* :sig26* valid-ar?* :sig27* valid-ar?* :sig28* valid-ar?* :sig29* valid-ar?* :sig30* valid-ar?* :sig31* valid-ar?* :sig32* valid-ar?* ))
(stest/instrument `outs)

(defn midinoteoff
  {:arglists '([xkey xvelocity])}
  [key velocity]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "midinoteoff"
                      [key velocity]
                      *global*)]
    (new out-types ast)))

(s/fdef midinoteoff
  :args (s/cat :key valid-x? :velocity valid-x? ))
(stest/instrument `midinoteoff)

(defn crossfm
  {:arglists '([xmi xfrq2 xfrq3 xndx4 kndx5 icps ifn7 & ifn1* iphs1*])}
  [mi frq2 frq3 ndx4 ndx5 cps fn7 & [ fn1* phs1* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "crossfm"
                      [mi frq2 frq3 ndx4 ndx5 cps fn7 fn1* phs1*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef crossfm
  :args (s/cat :mi valid-x? :frq2 valid-x? :frq3 valid-x? :ndx4 valid-x? :ndx5 valid-kr? :cps valid-i? :fn7 valid-i? :fn1* valid-i?* :phs1* valid-i?* ))
(stest/instrument `crossfm)

(defn strlower
  {:arglists '([Ssrc])}
  [src]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "strlower"
                      [src]
                      *global*)]
    (new out-types ast)))

(s/fdef strlower
  :args (s/cat :src valid-S? ))
(stest/instrument `strlower)

(defn strlower:S
  {:arglists '([Ssrc])}
  [src]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "strlower"
                      [src]
                      *global*)]
    (new out-types ast)))

(s/fdef strlower:S
  :args (s/cat :src valid-S? ))
(stest/instrument `strlower:S)

(defn rspline
  {:arglists '([xrangeMin xrangeMax kcpsMin kcpsMax] [xrangeMin xrangeMax kcpsMin kcpsMax])}
  [rangeMin rangeMax cpsMin cpsMax]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "rspline"
                      [rangeMin rangeMax cpsMin cpsMax]
                      *global*)]
    (new out-types ast)))

(s/fdef rspline
  :args (s/alt
         :xxkk (s/cat :rangeMin valid-x? :rangeMax valid-x? :cpsMin valid-kr? :cpsMax valid-kr? )
         ))
(stest/instrument `rspline)

(defn rspline:a
  {:arglists '([xrangeMin xrangeMax kcpsMin kcpsMax])}
  [rangeMin rangeMax cpsMin cpsMax]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "rspline"
                      [rangeMin rangeMax cpsMin cpsMax]
                      *global*)]
    (new out-types ast)))

(s/fdef rspline:a
  :args (s/cat :rangeMin valid-x? :rangeMax valid-x? :cpsMin valid-kr? :cpsMax valid-kr? ))
(stest/instrument `rspline:a)

(defn rspline:k
  {:arglists '([xrangeMin xrangeMax kcpsMin kcpsMax])}
  [rangeMin rangeMax cpsMin cpsMax]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "rspline"
                      [rangeMin rangeMax cpsMin cpsMax]
                      *global*)]
    (new out-types ast)))

(s/fdef rspline:k
  :args (s/cat :rangeMin valid-x? :rangeMax valid-x? :cpsMin valid-kr? :cpsMax valid-kr? ))
(stest/instrument `rspline:k)

(defn vtablek
  {:arglists '([kindex ktable kinterp ixmode & kout1* kout2* kout3* koutN4* koutN5* koutN6* koutN7* koutN8* koutN9* koutN10* koutN11* koutN12* koutN13* koutN14* koutN15* koutN16*])}
  [index table interp xmode & [ out1* out2* out3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vtablek"
                      [index table interp xmode out1* out2* out3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef vtablek
  :args (s/cat :index valid-kr? :table valid-kr? :interp valid-kr? :xmode valid-i? :out1* valid-kr?* :out2* valid-kr?* :out3* valid-kr?* :outN4* valid-kr?* :outN5* valid-kr?* :outN6* valid-kr?* :outN7* valid-kr?* :outN8* valid-kr?* :outN9* valid-kr?* :outN10* valid-kr?* :outN11* valid-kr?* :outN12* valid-kr?* :outN13* valid-kr?* :outN14* valid-kr?* :outN15* valid-kr?* :outN16* valid-kr?* ))
(stest/instrument `vtablek)

(defn midiprogramchange
  {:arglists '([xprogram])}
  [program]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "midiprogramchange"
                      [program]
                      *global*)]
    (new out-types ast)))

(s/fdef midiprogramchange
  :args (s/cat :program valid-x? ))
(stest/instrument `midiprogramchange)

(defn partikkelsync
  {:arglists '([iopcode_id])}
  [opcode_id]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "partikkelsync"
                      [opcode_id]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef partikkelsync
  :args (s/cat :opcode_id valid-i? ))
(stest/instrument `partikkelsync)

(defn foscil
  {:arglists '([xamp kcps xcar xmod kindex & itable* iphase*])}
  [amp cps car mod index & [ table* phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "foscil"
                      [amp cps car mod index table* phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef foscil
  :args (s/cat :amp valid-x? :cps valid-kr? :car valid-x? :mod valid-x? :index valid-kr? :table* valid-i?* :phase* valid-i?* ))
(stest/instrument `foscil)

(defn foscil:a
  {:arglists '([xamp kcps xcar xmod kindex & itable* iphase*])}
  [amp cps car mod index & [ table* phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "foscil"
                      [amp cps car mod index table* phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef foscil:a
  :args (s/cat :amp valid-x? :cps valid-kr? :car valid-x? :mod valid-x? :index valid-kr? :table* valid-i?* :phase* valid-i?* ))
(stest/instrument `foscil:a)

(defn transeg
  {:arglists '([ia idur itype & ib1* idur2* itype3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*] [ia idur itype & ib1* idur2* itype3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a dur type & [ b1* dur2* type3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "transeg"
                      [a dur type b1* dur2* type3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef transeg
  :args (s/alt
         :iiiiiiiiiiiiiiiiiii (s/cat :a valid-i? :dur valid-i? :type valid-i? :b1* valid-i?* :dur2* valid-i?* :type3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* )
         ))
(stest/instrument `transeg)

(defn transeg:a
  {:arglists '([ia idur itype & ib1* idur2* itype3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a dur type & [ b1* dur2* type3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "transeg"
                      [a dur type b1* dur2* type3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef transeg:a
  :args (s/cat :a valid-i? :dur valid-i? :type valid-i? :b1* valid-i?* :dur2* valid-i?* :type3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* ))
(stest/instrument `transeg:a)

(defn transeg:k
  {:arglists '([ia idur itype & ib1* idur2* itype3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a dur type & [ b1* dur2* type3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "transeg"
                      [a dur type b1* dur2* type3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef transeg:k
  :args (s/cat :a valid-i? :dur valid-i? :type valid-i? :b1* valid-i?* :dur2* valid-i?* :type3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* ))
(stest/instrument `transeg:k)

(defn clear
  {:arglists '([& avar1* avar2* avar3* avar4* avar5* avar6* avar7* avar8* avar9* avar10* avar11* avar12* avar13* avar14* avar15* avar16* avar17* avar18* avar19* avar20* avar21* avar22* avar23* avar24* avar25* avar26* avar27* avar28* avar29* avar30* avar31* avar32*])}
  [& [ var1* var2* var3* var4* var5* var6* var7* var8* var9* var10* var11* var12* var13* var14* var15* var16* var17* var18* var19* var20* var21* var22* var23* var24* var25* var26* var27* var28* var29* var30* var31* var32* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "clear"
                      [var1* var2* var3* var4* var5* var6* var7* var8* var9* var10* var11* var12* var13* var14* var15* var16* var17* var18* var19* var20* var21* var22* var23* var24* var25* var26* var27* var28* var29* var30* var31* var32*]
                      *global*)]
    (new out-types ast)))

(s/fdef clear
  :args (s/cat :var1* valid-ar?* :var2* valid-ar?* :var3* valid-ar?* :var4* valid-ar?* :var5* valid-ar?* :var6* valid-ar?* :var7* valid-ar?* :var8* valid-ar?* :var9* valid-ar?* :var10* valid-ar?* :var11* valid-ar?* :var12* valid-ar?* :var13* valid-ar?* :var14* valid-ar?* :var15* valid-ar?* :var16* valid-ar?* :var17* valid-ar?* :var18* valid-ar?* :var19* valid-ar?* :var20* valid-ar?* :var21* valid-ar?* :var22* valid-ar?* :var23* valid-ar?* :var24* valid-ar?* :var25* valid-ar?* :var26* valid-ar?* :var27* valid-ar?* :var28* valid-ar?* :var29* valid-ar?* :var30* valid-ar?* :var31* valid-ar?* :var32* valid-ar?* ))
(stest/instrument `clear)

(defn locsend
  {:arglists '()}
  []
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "locsend"
                      []
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))


(defn pvsanal
  {:arglists '([ain ifftsize ioverlap iwinsize iwintype & iformat* iinit*])}
  [in fftsize overlap winsize wintype & [ format* init* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsanal"
                      [in fftsize overlap winsize wintype format* init*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsanal
  :args (s/cat :in valid-ar? :fftsize valid-i? :overlap valid-i? :winsize valid-i? :wintype valid-i? :format* valid-i?* :init* valid-i?* ))
(stest/instrument `pvsanal)

(defn pvsanal:f
  {:arglists '([ain ifftsize ioverlap iwinsize iwintype & iformat* iinit*])}
  [in fftsize overlap winsize wintype & [ format* init* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsanal"
                      [in fftsize overlap winsize wintype format* init*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsanal:f
  :args (s/cat :in valid-ar? :fftsize valid-i? :overlap valid-i? :winsize valid-i? :wintype valid-i? :format* valid-i?* :init* valid-i?* ))
(stest/instrument `pvsanal:f)

(defn active
  {:arglists '([Sinsnum & iopt* inorel*] [iinsnum & iopt* inorel*] [Sinsnum & iopt* inorel*] [kinsnum & iopt* inorel*])}
  [insnum & [ opt* norel* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "active"
                      [insnum opt* norel*]
                      *global*)]
    (new out-types ast)))

(s/fdef active
  :args (s/alt
         :Sii (s/cat :insnum valid-S? :opt* valid-i?* :norel* valid-i?* )
         ))
(stest/instrument `active)

(defn active:i
  {:arglists '([Sinsnum & iopt* inorel*] [iinsnum & iopt* inorel*])}
  [insnum & [ opt* norel* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "active"
                      [insnum opt* norel*]
                      *global*)]
    (new out-types ast)))

(s/fdef active:i
  :args (s/alt
         :Sii (s/cat :insnum valid-S? :opt* valid-i?* :norel* valid-i?* )
         ))
(stest/instrument `active:i)

(defn active:k
  {:arglists '([Sinsnum & iopt* inorel*] [kinsnum & iopt* inorel*])}
  [insnum & [ opt* norel* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "active"
                      [insnum opt* norel*]
                      *global*)]
    (new out-types ast)))

(s/fdef active:k
  :args (s/alt
         :Sii (s/cat :insnum valid-S? :opt* valid-i?* :norel* valid-i?* )
         ))
(stest/instrument `active:k)

(defn scanhammer
  {:arglists '([isrc idst ipos imult])}
  [src dst pos mult]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "scanhammer"
                      [src dst pos mult]
                      *global*)]
    (new out-types ast)))

(s/fdef scanhammer
  :args (s/cat :src valid-i? :dst valid-i? :pos valid-i? :mult valid-i? ))
(stest/instrument `scanhammer)

(defn vexp_i
  {:arglists '([itable ival ielements & idstoffset*])}
  [table val elements & [ dstoffset* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vexp_i"
                      [table val elements dstoffset*]
                      *global*)]
    (new out-types ast)))

(s/fdef vexp_i
  :args (s/cat :table valid-i? :val valid-i? :elements valid-i? :dstoffset* valid-i?* ))
(stest/instrument `vexp_i)

(defn urandom
  {:arglists '([& imin* imax*] [& imin* imax*] [& imin* imax*])}
  [& [ min* max* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "urandom"
                      [min* max*]
                      *global*)]
    (new out-types ast)))

(s/fdef urandom
  :args (s/alt
         :ii (s/cat :min* valid-i?* :max* valid-i?* )
         ))
(stest/instrument `urandom)

(defn urandom:a
  {:arglists '([& imin* imax*])}
  [& [ min* max* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "urandom"
                      [min* max*]
                      *global*)]
    (new out-types ast)))

(s/fdef urandom:a
  :args (s/cat :min* valid-i?* :max* valid-i?* ))
(stest/instrument `urandom:a)

(defn urandom:i
  {:arglists '([& imin* imax*])}
  [& [ min* max* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "urandom"
                      [min* max*]
                      *global*)]
    (new out-types ast)))

(s/fdef urandom:i
  :args (s/cat :min* valid-i?* :max* valid-i?* ))
(stest/instrument `urandom:i)

(defn urandom:k
  {:arglists '([& imin* imax*])}
  [& [ min* max* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "urandom"
                      [min* max*]
                      *global*)]
    (new out-types ast)))

(s/fdef urandom:k
  :args (s/cat :min* valid-i?* :max* valid-i?* ))
(stest/instrument `urandom:k)

(defn vlinseg
  {:arglists '([ifnout ielements & ifn1* idur2* ifn3* idur4* ifn5* ifn6* ifn7* ifn8* ifn9* ifn10* ifn11* ifn12* ifn13* ifn14* ifn15* ifn16*])}
  [fnout elements & [ fn1* dur2* fn3* dur4* fn5* fn6* fn7* fn8* fn9* fn10* fn11* fn12* fn13* fn14* fn15* fn16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vlinseg"
                      [fnout elements fn1* dur2* fn3* dur4* fn5* fn6* fn7* fn8* fn9* fn10* fn11* fn12* fn13* fn14* fn15* fn16*]
                      *global*)]
    (new out-types ast)))

(s/fdef vlinseg
  :args (s/cat :fnout valid-i? :elements valid-i? :fn1* valid-i?* :dur2* valid-i?* :fn3* valid-i?* :dur4* valid-i?* :fn5* valid-i?* :fn6* valid-i?* :fn7* valid-i?* :fn8* valid-i?* :fn9* valid-i?* :fn10* valid-i?* :fn11* valid-i?* :fn12* valid-i?* :fn13* valid-i?* :fn14* valid-i?* :fn15* valid-i?* :fn16* valid-i?* ))
(stest/instrument `vlinseg)

(defn pvsinfo
  {:arglists '([fsrc])}
  [src]
  (let [out-types-quoted '[Variable Variable Variable Variable]
        out-types [Variable Variable Variable Variable]
        ast (ast-node out-types-quoted
                      "pvsinfo"
                      [src]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef pvsinfo
  :args (s/cat :src valid-f? ))
(stest/instrument `pvsinfo)

(defn partikkel
  {:arglists '([xgrainfreq kdistribution idisttab async kenv2amt ienv2tab ienv_attack ienv_decay ksustain_amount ka_d_ratio kduration kamp igainmasks kwavfreq ksweepshape iwavfreqstarttab iwavfreqendtab awavfm ifmamptab kfmenv icosine ktraincps knumpartials kchroma ichannelmasks krandommask kwaveform27 kwaveform28 kwaveform29 kwaveform30 iwaveamptab asamplepos32 asamplepos33 asamplepos34 asamplepos35 kwavekey36 kwavekey37 kwavekey38 kwavekey39 imax_grains & iopcode_id* ipanlaws*])}
  [grainfreq distribution disttab sync env2amt env2tab env_attack env_decay sustain_amount a_d_ratio duration amp gainmasks wavfreq sweepshape wavfreqstarttab wavfreqendtab wavfm fmamptab fmenv cosine traincps numpartials chroma channelmasks randommask waveform27 waveform28 waveform29 waveform30 waveamptab samplepos32 samplepos33 samplepos34 samplepos35 wavekey36 wavekey37 wavekey38 wavekey39 max_grains & [ opcode_id* panlaws* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "partikkel"
                      [grainfreq distribution disttab sync env2amt env2tab env_attack env_decay sustain_amount a_d_ratio duration amp gainmasks wavfreq sweepshape wavfreqstarttab wavfreqendtab wavfm fmamptab fmenv cosine traincps numpartials chroma channelmasks randommask waveform27 waveform28 waveform29 waveform30 waveamptab samplepos32 samplepos33 samplepos34 samplepos35 wavekey36 wavekey37 wavekey38 wavekey39 max_grains opcode_id* panlaws*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef partikkel
  :args (s/cat :grainfreq valid-x? :distribution valid-kr? :disttab valid-i? :sync valid-ar? :env2amt valid-kr? :env2tab valid-i? :env_attack valid-i? :env_decay valid-i? :sustain_amount valid-kr? :a_d_ratio valid-kr? :duration valid-kr? :amp valid-kr? :gainmasks valid-i? :wavfreq valid-kr? :sweepshape valid-kr? :wavfreqstarttab valid-i? :wavfreqendtab valid-i? :wavfm valid-ar? :fmamptab valid-i? :fmenv valid-kr? :cosine valid-i? :traincps valid-kr? :numpartials valid-kr? :chroma valid-kr? :channelmasks valid-i? :randommask valid-kr? :waveform27 valid-kr? :waveform28 valid-kr? :waveform29 valid-kr? :waveform30 valid-kr? :waveamptab valid-i? :samplepos32 valid-ar? :samplepos33 valid-ar? :samplepos34 valid-ar? :samplepos35 valid-ar? :wavekey36 valid-kr? :wavekey37 valid-kr? :wavekey38 valid-kr? :wavekey39 valid-kr? :max_grains valid-i? :opcode_id* valid-i?* :panlaws* valid-i?* ))
(stest/instrument `partikkel)

(defn delayr
  {:arglists '([idlt & iskip*] [kdlt iskip & iskip*])}
  [dlt & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "delayr"
                      [dlt skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef delayr
  :args (s/alt
         :ii (s/cat :dlt valid-i? :skip* valid-i?* )
         ))
(stest/instrument `delayr)

(defn delayr:a
  {:arglists '([idlt & iskip*])}
  [dlt & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "delayr"
                      [dlt skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef delayr:a
  :args (s/cat :dlt valid-i? :skip* valid-i?* ))
(stest/instrument `delayr:a)

(defn delayr:k
  {:arglists '([kdlt iskip & iskip*])}
  [dlt skip & [ skip* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "delayr"
                      [dlt skip skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef delayr:k
  :args (s/cat :dlt valid-kr? :skip valid-i? :skip* valid-i?* ))
(stest/instrument `delayr:k)

(defn ctrl14
  {:arglists '([ichan ictlno2 ictlno3 imin imax & itable*] [ichan ictlno2 ictlno3 kmin kmax & itable*])}
  [chan ctlno2 ctlno3 min max & [ table* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ctrl14"
                      [chan ctlno2 ctlno3 min max table*]
                      *global*)]
    (new out-types ast)))

(s/fdef ctrl14
  :args (s/alt
         :iiiiii (s/cat :chan valid-i? :ctlno2 valid-i? :ctlno3 valid-i? :min valid-i? :max valid-i? :table* valid-i?* )
         ))
(stest/instrument `ctrl14)

(defn ctrl14:i
  {:arglists '([ichan ictlno2 ictlno3 imin imax & itable*])}
  [chan ctlno2 ctlno3 min max & [ table* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ctrl14"
                      [chan ctlno2 ctlno3 min max table*]
                      *global*)]
    (new out-types ast)))

(s/fdef ctrl14:i
  :args (s/cat :chan valid-i? :ctlno2 valid-i? :ctlno3 valid-i? :min valid-i? :max valid-i? :table* valid-i?* ))
(stest/instrument `ctrl14:i)

(defn ctrl14:k
  {:arglists '([ichan ictlno2 ictlno3 kmin kmax & itable*])}
  [chan ctlno2 ctlno3 min max & [ table* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "ctrl14"
                      [chan ctlno2 ctlno3 min max table*]
                      *global*)]
    (new out-types ast)))

(s/fdef ctrl14:k
  :args (s/cat :chan valid-i? :ctlno2 valid-i? :ctlno3 valid-i? :min valid-kr? :max valid-kr? :table* valid-i?* ))
(stest/instrument `ctrl14:k)

(defn pvsfreeze
  {:arglists '([fsigin kfreeza kfreezf])}
  [sigin freeza freezf]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsfreeze"
                      [sigin freeza freezf]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsfreeze
  :args (s/cat :sigin valid-f? :freeza valid-kr? :freezf valid-kr? ))
(stest/instrument `pvsfreeze)

(defn pvsfreeze:f
  {:arglists '([fsigin kfreeza kfreezf])}
  [sigin freeza freezf]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvsfreeze"
                      [sigin freeza freezf]
                      *global*)]
    (new out-types ast)))

(s/fdef pvsfreeze:f
  :args (s/cat :sigin valid-f? :freeza valid-kr? :freezf valid-kr? ))
(stest/instrument `pvsfreeze:f)

(defn sfilist
  {:arglists '([ifilhandle])}
  [filhandle]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "sfilist"
                      [filhandle]
                      *global*)]
    (new out-types ast)))

(s/fdef sfilist
  :args (s/cat :filhandle valid-i? ))
(stest/instrument `sfilist)

(defn metro
  {:arglists '([kfreq & initphase*])}
  [freq & [ nitphase* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "metro"
                      [freq nitphase*]
                      *global*)]
    (new out-types ast)))

(s/fdef metro
  :args (s/cat :freq valid-kr? :nitphase* valid-i?* ))
(stest/instrument `metro)

(defn metro:k
  {:arglists '([kfreq & initphase*])}
  [freq & [ nitphase* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "metro"
                      [freq nitphase*]
                      *global*)]
    (new out-types ast)))

(s/fdef metro:k
  :args (s/cat :freq valid-kr? :nitphase* valid-i?* ))
(stest/instrument `metro:k)

(defn initc7
  {:arglists '([ichan ictlno ivalue])}
  [chan ctlno value]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "initc7"
                      [chan ctlno value]
                      *global*)]
    (new out-types ast)))

(s/fdef initc7
  :args (s/cat :chan valid-i? :ctlno valid-i? :value valid-i? ))
(stest/instrument `initc7)

(defn timek
  {:arglists '( )}
  []
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "timek"
                      []
                      *global*)]
    (new out-types ast)))


(defn timek:i
  {:arglists '()}
  []
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "timek"
                      []
                      *global*)]
    (new out-types ast)))


(defn timek:k
  {:arglists '()}
  []
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "timek"
                      []
                      *global*)]
    (new out-types ast)))


(defn vdelayx
  {:arglists '([ain adl imd iws & ist*])}
  [in dl md ws & [ st* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "vdelayx"
                      [in dl md ws st*]
                      *global*)]
    (new out-types ast)))

(s/fdef vdelayx
  :args (s/cat :in valid-ar? :dl valid-ar? :md valid-i? :ws valid-i? :st* valid-i?* ))
(stest/instrument `vdelayx)

(defn vdelayx:a
  {:arglists '([ain adl imd iws & ist*])}
  [in dl md ws & [ st* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "vdelayx"
                      [in dl md ws st*]
                      *global*)]
    (new out-types ast)))

(s/fdef vdelayx:a
  :args (s/cat :in valid-ar? :dl valid-ar? :md valid-i? :ws valid-i? :st* valid-i?* ))
(stest/instrument `vdelayx:a)

(defn initc21
  {:arglists '([ichan ictlno2 ictlno3 ictlno4 ivalue])}
  [chan ctlno2 ctlno3 ctlno4 value]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "initc21"
                      [chan ctlno2 ctlno3 ctlno4 value]
                      *global*)]
    (new out-types ast)))

(s/fdef initc21
  :args (s/cat :chan valid-i? :ctlno2 valid-i? :ctlno3 valid-i? :ctlno4 valid-i? :value valid-i? ))
(stest/instrument `initc21)

(defn sinh
  {:arglists '([aarg1] [iarg1] [iarg1Arr] [karg1] [karg1Arr])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sinh"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sinh
  :args (s/alt
         :a (s/cat :arg1 valid-ar? )
         ))
(stest/instrument `sinh)

(defn sinh:a
  {:arglists '([aarg1])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sinh"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sinh:a
  :args (s/cat :arg1 valid-ar? ))
(stest/instrument `sinh:a)

(defn sinh:i
  {:arglists '([iarg1])}
  [arg1]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "sinh"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sinh:i
  :args (s/cat :arg1 valid-i? ))
(stest/instrument `sinh:i)

(defn sinh:iArr
  {:arglists '([iarg1Arr])}
  [arg1]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "sinh"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sinh:iArr
  :args (s/cat :arg1 valid-iArr? ))
(stest/instrument `sinh:iArr)

(defn sinh:k
  {:arglists '([karg1])}
  [arg1]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "sinh"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sinh:k
  :args (s/cat :arg1 valid-kr? ))
(stest/instrument `sinh:k)

(defn sinh:kArr
  {:arglists '([karg1Arr])}
  [arg1]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "sinh"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef sinh:kArr
  :args (s/cat :arg1 valid-kArr? ))
(stest/instrument `sinh:kArr)

(defn vdelay
  {:arglists '([asig xdel imaxdel & iskip*])}
  [sig del maxdel & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "vdelay"
                      [sig del maxdel skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef vdelay
  :args (s/cat :sig valid-ar? :del valid-x? :maxdel valid-i? :skip* valid-i?* ))
(stest/instrument `vdelay)

(defn vdelay:a
  {:arglists '([asig xdel imaxdel & iskip*])}
  [sig del maxdel & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "vdelay"
                      [sig del maxdel skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef vdelay:a
  :args (s/cat :sig valid-ar? :del valid-x? :maxdel valid-i? :skip* valid-i?* ))
(stest/instrument `vdelay:a)

(defn fmb3
  {:arglists '([kamp kfreq kc3 kc4 kvdepth kvrate & ifn1* ifn1* ifn1* ifn1* ivfn*])}
  [amp freq c3 c4 vdepth vrate & [ fn1* fn1* fn1* fn1* vfn* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fmb3"
                      [amp freq c3 c4 vdepth vrate fn1* fn1* fn1* fn1* vfn*]
                      *global*)]
    (new out-types ast)))

(s/fdef fmb3
  :args (s/cat :amp valid-kr? :freq valid-kr? :c3 valid-kr? :c4 valid-kr? :vdepth valid-kr? :vrate valid-kr? :fn1* valid-i?* :fn1* valid-i?* :fn1* valid-i?* :fn1* valid-i?* :vfn* valid-i?* ))
(stest/instrument `fmb3)

(defn fmb3:a
  {:arglists '([kamp kfreq kc3 kc4 kvdepth kvrate & ifn1* ifn1* ifn1* ifn1* ivfn*])}
  [amp freq c3 c4 vdepth vrate & [ fn1* fn1* fn1* fn1* vfn* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fmb3"
                      [amp freq c3 c4 vdepth vrate fn1* fn1* fn1* fn1* vfn*]
                      *global*)]
    (new out-types ast)))

(s/fdef fmb3:a
  :args (s/cat :amp valid-kr? :freq valid-kr? :c3 valid-kr? :c4 valid-kr? :vdepth valid-kr? :vrate valid-kr? :fn1* valid-i?* :fn1* valid-i?* :fn1* valid-i?* :fn1* valid-i?* :vfn* valid-i?* ))
(stest/instrument `fmb3:a)

(defn lfo
  {:arglists '([kamp kcps & itype*] [kamp kcps & itype*])}
  [amp cps & [ type* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "lfo"
                      [amp cps type*]
                      *global*)]
    (new out-types ast)))

(s/fdef lfo
  :args (s/alt
         :kki (s/cat :amp valid-kr? :cps valid-kr? :type* valid-i?* )
         ))
(stest/instrument `lfo)

(defn lfo:a
  {:arglists '([kamp kcps & itype*])}
  [amp cps & [ type* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "lfo"
                      [amp cps type*]
                      *global*)]
    (new out-types ast)))

(s/fdef lfo:a
  :args (s/cat :amp valid-kr? :cps valid-kr? :type* valid-i?* ))
(stest/instrument `lfo:a)

(defn lfo:k
  {:arglists '([kamp kcps & itype*])}
  [amp cps & [ type* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "lfo"
                      [amp cps type*]
                      *global*)]
    (new out-types ast)))

(s/fdef lfo:k
  :args (s/cat :amp valid-kr? :cps valid-kr? :type* valid-i?* ))
(stest/instrument `lfo:k)

(defn pgmassign
  {:arglists '([ipgm Sinsname & ichn*] [ipgm iinsname & ichn*])}
  [pgm insname & [ chn* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "pgmassign"
                      [pgm insname chn*]
                      *global*)]
    (new out-types ast)))

(s/fdef pgmassign
  :args (s/alt
         :iSi (s/cat :pgm valid-i? :insname valid-S? :chn* valid-i?* )
         ))
(stest/instrument `pgmassign)

(defn pindex
  {:arglists '([ipfieldIndex])}
  [pfieldIndex]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "pindex"
                      [pfieldIndex]
                      *global*)]
    (new out-types ast)))

(s/fdef pindex
  :args (s/cat :pfieldIndex valid-i? ))
(stest/instrument `pindex)

(defn pindex:i
  {:arglists '([ipfieldIndex])}
  [pfieldIndex]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "pindex"
                      [pfieldIndex]
                      *global*)]
    (new out-types ast)))

(s/fdef pindex:i
  :args (s/cat :pfieldIndex valid-i? ))
(stest/instrument `pindex:i)

(defn deltapx
  {:arglists '([adel iwsize & iwsize*])}
  [del wsize & [ wsize* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "deltapx"
                      [del wsize wsize*]
                      *global*)]
    (new out-types ast)))

(s/fdef deltapx
  :args (s/cat :del valid-ar? :wsize valid-i? :wsize* valid-i?* ))
(stest/instrument `deltapx)

(defn deltapx:a
  {:arglists '([adel iwsize & iwsize*])}
  [del wsize & [ wsize* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "deltapx"
                      [del wsize wsize*]
                      *global*)]
    (new out-types ast)))

(s/fdef deltapx:a
  :args (s/cat :del valid-ar? :wsize valid-i? :wsize* valid-i?* ))
(stest/instrument `deltapx:a)

(defn trhighest
  {:arglists '([fin1 kscal])}
  [in1 scal]
  (let [out-types-quoted '[FrequencySignal ControlSignal ControlSignal]
        out-types [FrequencySignal ControlSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "trhighest"
                      [in1 scal]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef trhighest
  :args (s/cat :in1 valid-f? :scal valid-kr? ))
(stest/instrument `trhighest)

(defn sndwarp
  {:arglists '([xamp xtimewarp xresample ifn4 ibeg iwsize irandw ioverlap ifn9 itimemode])}
  [amp timewarp resample fn4 beg wsize randw overlap fn9 timemode]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "sndwarp"
                      [amp timewarp resample fn4 beg wsize randw overlap fn9 timemode]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef sndwarp
  :args (s/cat :amp valid-x? :timewarp valid-x? :resample valid-x? :fn4 valid-i? :beg valid-i? :wsize valid-i? :randw valid-i? :overlap valid-i? :fn9 valid-i? :timemode valid-i? ))
(stest/instrument `sndwarp)

(defn vco2ft
  {:arglists '([kcps & iwave* inyx*])}
  [cps & [ wave* nyx* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "vco2ft"
                      [cps wave* nyx*]
                      *global*)]
    (new out-types ast)))

(s/fdef vco2ft
  :args (s/cat :cps valid-kr? :wave* valid-i?* :nyx* valid-i?* ))
(stest/instrument `vco2ft)

(defn vco2ft:k
  {:arglists '([kcps & iwave* inyx*])}
  [cps & [ wave* nyx* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "vco2ft"
                      [cps wave* nyx*]
                      *global*)]
    (new out-types ast)))

(s/fdef vco2ft:k
  :args (s/cat :cps valid-kr? :wave* valid-i?* :nyx* valid-i?* ))
(stest/instrument `vco2ft:k)

(defn mandol
  {:arglists '([kamp kfreq kpluck kdetune kgain ksize itable & iminfreq*])}
  [amp freq pluck detune gain size table & [ minfreq* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "mandol"
                      [amp freq pluck detune gain size table minfreq*]
                      *global*)]
    (new out-types ast)))

(s/fdef mandol
  :args (s/cat :amp valid-kr? :freq valid-kr? :pluck valid-kr? :detune valid-kr? :gain valid-kr? :size valid-kr? :table valid-i? :minfreq* valid-i?* ))
(stest/instrument `mandol)

(defn mandol:a
  {:arglists '([kamp kfreq kpluck kdetune kgain ksize itable & iminfreq*])}
  [amp freq pluck detune gain size table & [ minfreq* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "mandol"
                      [amp freq pluck detune gain size table minfreq*]
                      *global*)]
    (new out-types ast)))

(s/fdef mandol:a
  :args (s/cat :amp valid-kr? :freq valid-kr? :pluck valid-kr? :detune valid-kr? :gain valid-kr? :size valid-kr? :table valid-i? :minfreq* valid-i?* ))
(stest/instrument `mandol:a)

(defn centroid
  {:arglists '([isigArr] [asig ktrig ifftsize] [ksigArr])}
  [sig]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "centroid"
                      [sig]
                      *global*)]
    (new out-types ast)))

(s/fdef centroid
  :args (s/alt
         :iArr (s/cat :sig valid-iArr? )
         ))
(stest/instrument `centroid)

(defn centroid:i
  {:arglists '([isigArr])}
  [sig]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "centroid"
                      [sig]
                      *global*)]
    (new out-types ast)))

(s/fdef centroid:i
  :args (s/cat :sig valid-iArr? ))
(stest/instrument `centroid:i)

(defn centroid:k
  {:arglists '([asig ktrig ifftsize] [ksigArr])}
  [sig trig fftsize]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "centroid"
                      [sig trig fftsize]
                      *global*)]
    (new out-types ast)))

(s/fdef centroid:k
  :args (s/alt
         :aki (s/cat :sig valid-ar? :trig valid-kr? :fftsize valid-i? )
         ))
(stest/instrument `centroid:k)

(defn rfft
  {:arglists '([iinArr] [kinArr])}
  [in]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "rfft"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef rfft
  :args (s/alt
         :iArr (s/cat :in valid-iArr? )
         ))
(stest/instrument `rfft)

(defn rfft:iArr
  {:arglists '([iinArr])}
  [in]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "rfft"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef rfft:iArr
  :args (s/cat :in valid-iArr? ))
(stest/instrument `rfft:iArr)

(defn rfft:kArr
  {:arglists '([kinArr])}
  [in]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "rfft"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef rfft:kArr
  :args (s/cat :in valid-kArr? ))
(stest/instrument `rfft:kArr)

(defn tabmorphak
  {:arglists '([aindex kweightpoint ktabnum3 ktabnum4 & ifn1* ifn2* ifn3* ifn4* ifnN5* ifnN6* ifnN7* ifnN8* ifnN9* ifnN10* ifnN11* ifnN12* ifnN13* ifnN14* ifnN15* ifnN16*])}
  [index weightpoint tabnum3 tabnum4 & [ fn1* fn2* fn3* fn4* fnN5* fnN6* fnN7* fnN8* fnN9* fnN10* fnN11* fnN12* fnN13* fnN14* fnN15* fnN16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tabmorphak"
                      [index weightpoint tabnum3 tabnum4 fn1* fn2* fn3* fn4* fnN5* fnN6* fnN7* fnN8* fnN9* fnN10* fnN11* fnN12* fnN13* fnN14* fnN15* fnN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef tabmorphak
  :args (s/cat :index valid-ar? :weightpoint valid-kr? :tabnum3 valid-kr? :tabnum4 valid-kr? :fn1* valid-i?* :fn2* valid-i?* :fn3* valid-i?* :fn4* valid-i?* :fnN5* valid-i?* :fnN6* valid-i?* :fnN7* valid-i?* :fnN8* valid-i?* :fnN9* valid-i?* :fnN10* valid-i?* :fnN11* valid-i?* :fnN12* valid-i?* :fnN13* valid-i?* :fnN14* valid-i?* :fnN15* valid-i?* :fnN16* valid-i?* ))
(stest/instrument `tabmorphak)

(defn tabmorphak:a
  {:arglists '([aindex kweightpoint ktabnum3 ktabnum4 & ifn1* ifn2* ifn3* ifn4* ifnN5* ifnN6* ifnN7* ifnN8* ifnN9* ifnN10* ifnN11* ifnN12* ifnN13* ifnN14* ifnN15* ifnN16*])}
  [index weightpoint tabnum3 tabnum4 & [ fn1* fn2* fn3* fn4* fnN5* fnN6* fnN7* fnN8* fnN9* fnN10* fnN11* fnN12* fnN13* fnN14* fnN15* fnN16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tabmorphak"
                      [index weightpoint tabnum3 tabnum4 fn1* fn2* fn3* fn4* fnN5* fnN6* fnN7* fnN8* fnN9* fnN10* fnN11* fnN12* fnN13* fnN14* fnN15* fnN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef tabmorphak:a
  :args (s/cat :index valid-ar? :weightpoint valid-kr? :tabnum3 valid-kr? :tabnum4 valid-kr? :fn1* valid-i?* :fn2* valid-i?* :fn3* valid-i?* :fn4* valid-i?* :fnN5* valid-i?* :fnN6* valid-i?* :fnN7* valid-i?* :fnN8* valid-i?* :fnN9* valid-i?* :fnN10* valid-i?* :fnN11* valid-i?* :fnN12* valid-i?* :fnN13* valid-i?* :fnN14* valid-i?* :fnN15* valid-i?* :fnN16* valid-i?* ))
(stest/instrument `tabmorphak:a)

(defn noteondur
  {:arglists '([ichn inum ivel idur])}
  [chn num vel dur]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "noteondur"
                      [chn num vel dur]
                      *global*)]
    (new out-types ast)))

(s/fdef noteondur
  :args (s/cat :chn valid-i? :num valid-i? :vel valid-i? :dur valid-i? ))
(stest/instrument `noteondur)

(defn MixerReceive
  {:arglists '([ibuss ichannel])}
  [buss channel]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "MixerReceive"
                      [buss channel]
                      *global*)]
    (new out-types ast)))

(s/fdef MixerReceive
  :args (s/cat :buss valid-i? :channel valid-i? ))
(stest/instrument `MixerReceive)

(defn MixerReceive:a
  {:arglists '([ibuss ichannel])}
  [buss channel]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "MixerReceive"
                      [buss channel]
                      *global*)]
    (new out-types ast)))

(s/fdef MixerReceive:a
  :args (s/cat :buss valid-i? :channel valid-i? ))
(stest/instrument `MixerReceive:a)

(defn gendyx
  {:arglists '([kamp kampdist kdurdist kadpar kddpar kminfreq kmaxfreq kampscl kdurscl kcurveup kcurvedown & initcps* knum*] [kamp kampdist kdurdist kadpar kddpar kminfreq kmaxfreq kampscl kdurscl kcurveup kcurvedown & initcps* knum*])}
  [amp ampdist durdist adpar ddpar minfreq maxfreq ampscl durscl curveup curvedown & [ nitcps* num* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "gendyx"
                      [amp ampdist durdist adpar ddpar minfreq maxfreq ampscl durscl curveup curvedown nitcps* num*]
                      *global*)]
    (new out-types ast)))

(s/fdef gendyx
  :args (s/alt
         :kkkkkkkkkkkik (s/cat :amp valid-kr? :ampdist valid-kr? :durdist valid-kr? :adpar valid-kr? :ddpar valid-kr? :minfreq valid-kr? :maxfreq valid-kr? :ampscl valid-kr? :durscl valid-kr? :curveup valid-kr? :curvedown valid-kr? :nitcps* valid-i?* :num* valid-kr?* )
         ))
(stest/instrument `gendyx)

(defn gendyx:a
  {:arglists '([kamp kampdist kdurdist kadpar kddpar kminfreq kmaxfreq kampscl kdurscl kcurveup kcurvedown & initcps* knum*])}
  [amp ampdist durdist adpar ddpar minfreq maxfreq ampscl durscl curveup curvedown & [ nitcps* num* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "gendyx"
                      [amp ampdist durdist adpar ddpar minfreq maxfreq ampscl durscl curveup curvedown nitcps* num*]
                      *global*)]
    (new out-types ast)))

(s/fdef gendyx:a
  :args (s/cat :amp valid-kr? :ampdist valid-kr? :durdist valid-kr? :adpar valid-kr? :ddpar valid-kr? :minfreq valid-kr? :maxfreq valid-kr? :ampscl valid-kr? :durscl valid-kr? :curveup valid-kr? :curvedown valid-kr? :nitcps* valid-i?* :num* valid-kr?* ))
(stest/instrument `gendyx:a)

(defn gendyx:k
  {:arglists '([kamp kampdist kdurdist kadpar kddpar kminfreq kmaxfreq kampscl kdurscl kcurveup kcurvedown & initcps* knum*])}
  [amp ampdist durdist adpar ddpar minfreq maxfreq ampscl durscl curveup curvedown & [ nitcps* num* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "gendyx"
                      [amp ampdist durdist adpar ddpar minfreq maxfreq ampscl durscl curveup curvedown nitcps* num*]
                      *global*)]
    (new out-types ast)))

(s/fdef gendyx:k
  :args (s/cat :amp valid-kr? :ampdist valid-kr? :durdist valid-kr? :adpar valid-kr? :ddpar valid-kr? :minfreq valid-kr? :maxfreq valid-kr? :ampscl valid-kr? :durscl valid-kr? :curveup valid-kr? :curvedown valid-kr? :nitcps* valid-i?* :num* valid-kr?* ))
(stest/instrument `gendyx:k)

(defn weibull
  {:arglists '([ksigma ktau] [ksigma ktau] [ksigma ktau])}
  [sigma tau]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "weibull"
                      [sigma tau]
                      *global*)]
    (new out-types ast)))

(s/fdef weibull
  :args (s/alt
         :kk (s/cat :sigma valid-kr? :tau valid-kr? )
         ))
(stest/instrument `weibull)

(defn weibull:a
  {:arglists '([ksigma ktau])}
  [sigma tau]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "weibull"
                      [sigma tau]
                      *global*)]
    (new out-types ast)))

(s/fdef weibull:a
  :args (s/cat :sigma valid-kr? :tau valid-kr? ))
(stest/instrument `weibull:a)

(defn weibull:i
  {:arglists '([ksigma ktau])}
  [sigma tau]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "weibull"
                      [sigma tau]
                      *global*)]
    (new out-types ast)))

(s/fdef weibull:i
  :args (s/cat :sigma valid-kr? :tau valid-kr? ))
(stest/instrument `weibull:i)

(defn weibull:k
  {:arglists '([ksigma ktau])}
  [sigma tau]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "weibull"
                      [sigma tau]
                      *global*)]
    (new out-types ast)))

(s/fdef weibull:k
  :args (s/cat :sigma valid-kr? :tau valid-kr? ))
(stest/instrument `weibull:k)

(defn aresonk
  {:arglists '([ksig kcenter-frequency kbandwidth & iscale* iskip*])}
  [sig center-frequency bandwidth & [ scale* skip* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "aresonk"
                      [sig center-frequency bandwidth scale* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef aresonk
  :args (s/cat :sig valid-kr? :center-frequency valid-kr? :bandwidth valid-kr? :scale* valid-i?* :skip* valid-i?* ))
(stest/instrument `aresonk)

(defn aresonk:k
  {:arglists '([ksig kcenter-frequency kbandwidth & iscale* iskip*])}
  [sig center-frequency bandwidth & [ scale* skip* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "aresonk"
                      [sig center-frequency bandwidth scale* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef aresonk:k
  :args (s/cat :sig valid-kr? :center-frequency valid-kr? :bandwidth valid-kr? :scale* valid-i?* :skip* valid-i?* ))
(stest/instrument `aresonk:k)

(defn buzz
  {:arglists '([xamp xcps knh itable & iphase*])}
  [amp cps nh table & [ phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "buzz"
                      [amp cps nh table phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef buzz
  :args (s/cat :amp valid-x? :cps valid-x? :nh valid-kr? :table valid-i? :phase* valid-i?* ))
(stest/instrument `buzz)

(defn buzz:a
  {:arglists '([xamp xcps knh itable & iphase*])}
  [amp cps nh table & [ phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "buzz"
                      [amp cps nh table phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef buzz:a
  :args (s/cat :amp valid-x? :cps valid-x? :nh valid-kr? :table valid-i? :phase* valid-i?* ))
(stest/instrument `buzz:a)

(defn rtclock
  {:arglists '( )}
  []
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "rtclock"
                      []
                      *global*)]
    (new out-types ast)))


(defn rtclock:i
  {:arglists '()}
  []
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "rtclock"
                      []
                      *global*)]
    (new out-types ast)))


(defn rtclock:k
  {:arglists '()}
  []
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "rtclock"
                      []
                      *global*)]
    (new out-types ast)))


(defn rireturn
  {:arglists '()}
  []
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "rireturn"
                      []
                      *global*)]
    (new out-types ast)))


(defn grain3
  {:arglists '([kcps kphase kfmd kpmd kgdur kdens imaxovr ktable iwfn kfrpow kprpow & iseed* imode*])}
  [cps phase fmd pmd gdur dens maxovr table wfn frpow prpow & [ seed* mode* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "grain3"
                      [cps phase fmd pmd gdur dens maxovr table wfn frpow prpow seed* mode*]
                      *global*)]
    (new out-types ast)))

(s/fdef grain3
  :args (s/cat :cps valid-kr? :phase valid-kr? :fmd valid-kr? :pmd valid-kr? :gdur valid-kr? :dens valid-kr? :maxovr valid-i? :table valid-kr? :wfn valid-i? :frpow valid-kr? :prpow valid-kr? :seed* valid-i?* :mode* valid-i?* ))
(stest/instrument `grain3)

(defn grain3:a
  {:arglists '([kcps kphase kfmd kpmd kgdur kdens imaxovr ktable iwfn kfrpow kprpow & iseed* imode*])}
  [cps phase fmd pmd gdur dens maxovr table wfn frpow prpow & [ seed* mode* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "grain3"
                      [cps phase fmd pmd gdur dens maxovr table wfn frpow prpow seed* mode*]
                      *global*)]
    (new out-types ast)))

(s/fdef grain3:a
  :args (s/cat :cps valid-kr? :phase valid-kr? :fmd valid-kr? :pmd valid-kr? :gdur valid-kr? :dens valid-kr? :maxovr valid-i? :table valid-kr? :wfn valid-i? :frpow valid-kr? :prpow valid-kr? :seed* valid-i?* :mode* valid-i?* ))
(stest/instrument `grain3:a)

(defn doppler
  {:arglists '([asource ksourceposition kmicposition & isoundspeed* ifiltercutoff*])}
  [source sourceposition micposition & [ soundspeed* filtercutoff* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "doppler"
                      [source sourceposition micposition soundspeed* filtercutoff*]
                      *global*)]
    (new out-types ast)))

(s/fdef doppler
  :args (s/cat :source valid-ar? :sourceposition valid-kr? :micposition valid-kr? :soundspeed* valid-i?* :filtercutoff* valid-i?* ))
(stest/instrument `doppler)

(defn doppler:a
  {:arglists '([asource ksourceposition kmicposition & isoundspeed* ifiltercutoff*])}
  [source sourceposition micposition & [ soundspeed* filtercutoff* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "doppler"
                      [source sourceposition micposition soundspeed* filtercutoff*]
                      *global*)]
    (new out-types ast)))

(s/fdef doppler:a
  :args (s/cat :source valid-ar? :sourceposition valid-kr? :micposition valid-kr? :soundspeed* valid-i?* :filtercutoff* valid-i?* ))
(stest/instrument `doppler:a)

(defn trigger
  {:arglists '([ksig kthreshold kmode])}
  [sig threshold mode]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "trigger"
                      [sig threshold mode]
                      *global*)]
    (new out-types ast)))

(s/fdef trigger
  :args (s/cat :sig valid-kr? :threshold valid-kr? :mode valid-kr? ))
(stest/instrument `trigger)

(defn trigger:k
  {:arglists '([ksig kthreshold kmode])}
  [sig threshold mode]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "trigger"
                      [sig threshold mode]
                      *global*)]
    (new out-types ast)))

(s/fdef trigger:k
  :args (s/cat :sig valid-kr? :threshold valid-kr? :mode valid-kr? ))
(stest/instrument `trigger:k)

(defn bbcutm
  {:arglists '([asource ibps isubdiv ibarlength iphrasebars inumrepeats & istutterspeed* istutterchance* ienvchoice*])}
  [source bps subdiv barlength phrasebars numrepeats & [ stutterspeed* stutterchance* envchoice* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "bbcutm"
                      [source bps subdiv barlength phrasebars numrepeats stutterspeed* stutterchance* envchoice*]
                      *global*)]
    (new out-types ast)))

(s/fdef bbcutm
  :args (s/cat :source valid-ar? :bps valid-i? :subdiv valid-i? :barlength valid-i? :phrasebars valid-i? :numrepeats valid-i? :stutterspeed* valid-i?* :stutterchance* valid-i?* :envchoice* valid-i?* ))
(stest/instrument `bbcutm)

(defn bbcutm:a
  {:arglists '([asource ibps isubdiv ibarlength iphrasebars inumrepeats & istutterspeed* istutterchance* ienvchoice*])}
  [source bps subdiv barlength phrasebars numrepeats & [ stutterspeed* stutterchance* envchoice* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "bbcutm"
                      [source bps subdiv barlength phrasebars numrepeats stutterspeed* stutterchance* envchoice*]
                      *global*)]
    (new out-types ast)))

(s/fdef bbcutm:a
  :args (s/cat :source valid-ar? :bps valid-i? :subdiv valid-i? :barlength valid-i? :phrasebars valid-i? :numrepeats valid-i? :stutterspeed* valid-i?* :stutterchance* valid-i?* :envchoice* valid-i?* ))
(stest/instrument `bbcutm:a)

(defn compileorc
  {:arglists '([Sfilename])}
  [filename]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "compileorc"
                      [filename]
                      *global*)]
    (new out-types ast)))

(s/fdef compileorc
  :args (s/cat :filename valid-S? ))
(stest/instrument `compileorc)

(defn compileorc:i
  {:arglists '([Sfilename])}
  [filename]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "compileorc"
                      [filename]
                      *global*)]
    (new out-types ast)))

(s/fdef compileorc:i
  :args (s/cat :filename valid-S? ))
(stest/instrument `compileorc:i)

(defn zkmod
  {:arglists '([ksig kzkmod])}
  [sig zkmod]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "zkmod"
                      [sig zkmod]
                      *global*)]
    (new out-types ast)))

(s/fdef zkmod
  :args (s/cat :sig valid-kr? :zkmod valid-kr? ))
(stest/instrument `zkmod)

(defn zkmod:k
  {:arglists '([ksig kzkmod])}
  [sig zkmod]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "zkmod"
                      [sig zkmod]
                      *global*)]
    (new out-types ast)))

(s/fdef zkmod:k
  :args (s/cat :sig valid-kr? :zkmod valid-kr? ))
(stest/instrument `zkmod:k)

(defn vport
  {:arglists '([itable khtime ielements & ifnInit*])}
  [table htime elements & [ fnInit* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vport"
                      [table htime elements fnInit*]
                      *global*)]
    (new out-types ast)))

(s/fdef vport
  :args (s/cat :table valid-i? :htime valid-kr? :elements valid-i? :fnInit* valid-i?* ))
(stest/instrument `vport)

(defn fof
  {:arglists '([xamp xfund xform koct kband kris kdur kdec iolaps ifna ifnb itotdur & iphase* ifmode* iskip*])}
  [amp fund form oct band ris dur dec olaps fna fnb totdur & [ phase* fmode* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fof"
                      [amp fund form oct band ris dur dec olaps fna fnb totdur phase* fmode* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef fof
  :args (s/cat :amp valid-x? :fund valid-x? :form valid-x? :oct valid-kr? :band valid-kr? :ris valid-kr? :dur valid-kr? :dec valid-kr? :olaps valid-i? :fna valid-i? :fnb valid-i? :totdur valid-i? :phase* valid-i?* :fmode* valid-i?* :skip* valid-i?* ))
(stest/instrument `fof)

(defn fof:a
  {:arglists '([xamp xfund xform koct kband kris kdur kdec iolaps ifna ifnb itotdur & iphase* ifmode* iskip*])}
  [amp fund form oct band ris dur dec olaps fna fnb totdur & [ phase* fmode* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fof"
                      [amp fund form oct band ris dur dec olaps fna fnb totdur phase* fmode* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef fof:a
  :args (s/cat :amp valid-x? :fund valid-x? :form valid-x? :oct valid-kr? :band valid-kr? :ris valid-kr? :dur valid-kr? :dec valid-kr? :olaps valid-i? :fna valid-i? :fnb valid-i? :totdur valid-i? :phase* valid-i?* :fmode* valid-i?* :skip* valid-i?* ))
(stest/instrument `fof:a)

(defn vbapg
  {:arglists '([kazim & kelev* kspread* ilayout*] [kazim & kelev* kspread* ilayout*])}
  [azim & [ elev* spread* layout* ]]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "vbapg"
                      [azim elev* spread* layout*]
                      *global*)]
    (new out-types ast)))

(s/fdef vbapg
  :args (s/alt
         :kkki (s/cat :azim valid-kr? :elev* valid-kr?* :spread* valid-kr?* :layout* valid-i?* )
         ))
(stest/instrument `vbapg)

(defn vbapg:kArr
  {:arglists '([kazim & kelev* kspread* ilayout*])}
  [azim & [ elev* spread* layout* ]]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "vbapg"
                      [azim elev* spread* layout*]
                      *global*)]
    (new out-types ast)))

(s/fdef vbapg:kArr
  :args (s/cat :azim valid-kr? :elev* valid-kr?* :spread* valid-kr?* :layout* valid-i?* ))
(stest/instrument `vbapg:kArr)

(defn vbapg:k
  {:arglists '([kazim & kelev* kspread* ilayout*])}
  [azim & [ elev* spread* layout* ]]
  (let [out-types-quoted '[ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal]
        out-types [ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "vbapg"
                      [azim elev* spread* layout*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef vbapg:k
  :args (s/cat :azim valid-kr? :elev* valid-kr?* :spread* valid-kr?* :layout* valid-i?* ))
(stest/instrument `vbapg:k)

(defn round
  {:arglists '([aarg1] [iarg1] [iarg1Arr] [karg1] [karg1Arr])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "round"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef round
  :args (s/alt
         :a (s/cat :arg1 valid-ar? )
         ))
(stest/instrument `round)

(defn round:a
  {:arglists '([aarg1])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "round"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef round:a
  :args (s/cat :arg1 valid-ar? ))
(stest/instrument `round:a)

(defn round:i
  {:arglists '([iarg1])}
  [arg1]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "round"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef round:i
  :args (s/cat :arg1 valid-i? ))
(stest/instrument `round:i)

(defn round:iArr
  {:arglists '([iarg1Arr])}
  [arg1]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "round"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef round:iArr
  :args (s/cat :arg1 valid-iArr? ))
(stest/instrument `round:iArr)

(defn round:k
  {:arglists '([karg1])}
  [arg1]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "round"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef round:k
  :args (s/cat :arg1 valid-kr? ))
(stest/instrument `round:k)

(defn round:kArr
  {:arglists '([karg1Arr])}
  [arg1]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "round"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef round:kArr
  :args (s/cat :arg1 valid-kArr? ))
(stest/instrument `round:kArr)

(defn serialFlush
  {:arglists '([iPort])}
  [Port]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "serialFlush"
                      [Port]
                      *global*)]
    (new out-types ast)))

(s/fdef serialFlush
  :args (s/cat :Port valid-i? ))
(stest/instrument `serialFlush)

(defn inh
  {:arglists '()}
  []
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "inh"
                      []
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))


(defn ephasor
  {:arglists '([xfreq kR & iR*])}
  [freq R & [ R* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "ephasor"
                      [freq R R*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef ephasor
  :args (s/cat :freq valid-x? :R valid-kr? :R* valid-i?* ))
(stest/instrument `ephasor)

(defn sfinstr3m
  {:arglists '([ivel inotenum xamp xfreq instrnum ifilhandle & iflag* ioffset* ioffset*])}
  [vel notenum amp freq nstrnum filhandle & [ flag* offset* offset* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sfinstr3m"
                      [vel notenum amp freq nstrnum filhandle flag* offset* offset*]
                      *global*)]
    (new out-types ast)))

(s/fdef sfinstr3m
  :args (s/cat :vel valid-i? :notenum valid-i? :amp valid-x? :freq valid-x? :nstrnum valid-i? :filhandle valid-i? :flag* valid-i?* :offset* valid-i?* :offset* valid-i?* ))
(stest/instrument `sfinstr3m)

(defn sfinstr3m:a
  {:arglists '([ivel inotenum xamp xfreq instrnum ifilhandle & iflag* ioffset* ioffset*])}
  [vel notenum amp freq nstrnum filhandle & [ flag* offset* offset* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sfinstr3m"
                      [vel notenum amp freq nstrnum filhandle flag* offset* offset*]
                      *global*)]
    (new out-types ast)))

(s/fdef sfinstr3m:a
  :args (s/cat :vel valid-i? :notenum valid-i? :amp valid-x? :freq valid-x? :nstrnum valid-i? :filhandle valid-i? :flag* valid-i?* :offset* valid-i?* :offset* valid-i?* ))
(stest/instrument `sfinstr3m:a)

(defn crunch
  {:arglists '([iamp idettack & inum* idamp* imaxshake*])}
  [amp dettack & [ num* damp* maxshake* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "crunch"
                      [amp dettack num* damp* maxshake*]
                      *global*)]
    (new out-types ast)))

(s/fdef crunch
  :args (s/cat :amp valid-i? :dettack valid-i? :num* valid-i?* :damp* valid-i?* :maxshake* valid-i?* ))
(stest/instrument `crunch)

(defn crunch:a
  {:arglists '([iamp idettack & inum* idamp* imaxshake*])}
  [amp dettack & [ num* damp* maxshake* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "crunch"
                      [amp dettack num* damp* maxshake*]
                      *global*)]
    (new out-types ast)))

(s/fdef crunch:a
  :args (s/cat :amp valid-i? :dettack valid-i? :num* valid-i?* :damp* valid-i?* :maxshake* valid-i?* ))
(stest/instrument `crunch:a)

(defn pinker
  {:arglists '()}
  []
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pinker"
                      []
                      *global*)]
    (new out-types ast)))


(defn pinker:a
  {:arglists '()}
  []
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pinker"
                      []
                      *global*)]
    (new out-types ast)))


(defn setrow
  {:arglists '([kinArr krow])}
  [in row]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "setrow"
                      [in row]
                      *global*)]
    (new out-types ast)))

(s/fdef setrow
  :args (s/cat :in valid-kArr? :row valid-kr? ))
(stest/instrument `setrow)

(defn setrow:kArr
  {:arglists '([kinArr krow])}
  [in row]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "setrow"
                      [in row]
                      *global*)]
    (new out-types ast)))

(s/fdef setrow:kArr
  :args (s/cat :in valid-kArr? :row valid-kr? ))
(stest/instrument `setrow:kArr)

(defn outq3
  {:arglists '([asig])}
  [sig]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outq3"
                      [sig]
                      *global*)]
    (new out-types ast)))

(s/fdef outq3
  :args (s/cat :sig valid-ar? ))
(stest/instrument `outq3)

(defn scanu
  {:arglists '([init irate ifnvel ifnmass ifnstif ifncentr ifndamp kmass kstif kcentr kdamp ileft iright kpos kstrngth ain idisp id])}
  [nit rate fnvel fnmass fnstif fncentr fndamp mass stif centr damp left right pos strngth in disp d]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "scanu"
                      [nit rate fnvel fnmass fnstif fncentr fndamp mass stif centr damp left right pos strngth in disp d]
                      *global*)]
    (new out-types ast)))

(s/fdef scanu
  :args (s/cat :nit valid-i? :rate valid-i? :fnvel valid-i? :fnmass valid-i? :fnstif valid-i? :fncentr valid-i? :fndamp valid-i? :mass valid-kr? :stif valid-kr? :centr valid-kr? :damp valid-kr? :left valid-i? :right valid-i? :pos valid-kr? :strngth valid-kr? :in valid-ar? :disp valid-i? :d valid-i? ))
(stest/instrument `scanu)

(defn maxarray
  {:arglists '([iarrayArr] [karrayArr])}
  [array]
  (let [out-types-quoted '[Variable ]
        out-types [Variable ]
        ast (ast-node out-types-quoted
                      "maxarray"
                      [array]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef maxarray
  :args (s/alt
         :iArr (s/cat :array valid-iArr? )
         ))
(stest/instrument `maxarray)

(defn oscilikt
  {:arglists '([aamp acps ktable & iphase* istor*] [aamp kcps ktable & iphase* istor*] [kamp acps ktable & iphase* istor*] [kamp kcps ktable & iphase* istor*] [kamp kcps ktable & iphase* istor*])}
  [amp cps table & [ phase* stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "oscilikt"
                      [amp cps table phase* stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef oscilikt
  :args (s/alt
         :aakii (s/cat :amp valid-ar? :cps valid-ar? :table valid-kr? :phase* valid-i?* :stor* valid-i?* )
         ))
(stest/instrument `oscilikt)

(defn oscilikt:a
  {:arglists '([aamp acps ktable & iphase* istor*] [aamp kcps ktable & iphase* istor*] [kamp acps ktable & iphase* istor*] [kamp kcps ktable & iphase* istor*])}
  [amp cps table & [ phase* stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "oscilikt"
                      [amp cps table phase* stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef oscilikt:a
  :args (s/alt
         :aakii (s/cat :amp valid-ar? :cps valid-ar? :table valid-kr? :phase* valid-i?* :stor* valid-i?* )
         ))
(stest/instrument `oscilikt:a)

(defn oscilikt:k
  {:arglists '([kamp kcps ktable & iphase* istor*])}
  [amp cps table & [ phase* stor* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "oscilikt"
                      [amp cps table phase* stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef oscilikt:k
  :args (s/cat :amp valid-kr? :cps valid-kr? :table valid-kr? :phase* valid-i?* :stor* valid-i?* ))
(stest/instrument `oscilikt:k)

(defn midipitchbend
  {:arglists '([xpitchbend & ilow* ihigh*])}
  [pitchbend & [ low* high* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "midipitchbend"
                      [pitchbend low* high*]
                      *global*)]
    (new out-types ast)))

(s/fdef midipitchbend
  :args (s/cat :pitchbend valid-x? :low* valid-i?* :high* valid-i?* ))
(stest/instrument `midipitchbend)

(defn jspline
  {:arglists '([xamp kcpsMin kcpsMax] [xamp kcpsMin kcpsMax])}
  [amp cpsMin cpsMax]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "jspline"
                      [amp cpsMin cpsMax]
                      *global*)]
    (new out-types ast)))

(s/fdef jspline
  :args (s/alt
         :xkk (s/cat :amp valid-x? :cpsMin valid-kr? :cpsMax valid-kr? )
         ))
(stest/instrument `jspline)

(defn jspline:a
  {:arglists '([xamp kcpsMin kcpsMax])}
  [amp cpsMin cpsMax]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "jspline"
                      [amp cpsMin cpsMax]
                      *global*)]
    (new out-types ast)))

(s/fdef jspline:a
  :args (s/cat :amp valid-x? :cpsMin valid-kr? :cpsMax valid-kr? ))
(stest/instrument `jspline:a)

(defn jspline:k
  {:arglists '([xamp kcpsMin kcpsMax])}
  [amp cpsMin cpsMax]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "jspline"
                      [amp cpsMin cpsMax]
                      *global*)]
    (new out-types ast)))

(s/fdef jspline:k
  :args (s/cat :amp valid-x? :cpsMin valid-kr? :cpsMax valid-kr? ))
(stest/instrument `jspline:k)

(defn phasor
  {:arglists '([xcps & iphase*] [kcps & iphase*])}
  [cps & [ phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "phasor"
                      [cps phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef phasor
  :args (s/alt
         :xi (s/cat :cps valid-x? :phase* valid-i?* )
         ))
(stest/instrument `phasor)

(defn phasor:a
  {:arglists '([xcps & iphase*])}
  [cps & [ phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "phasor"
                      [cps phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef phasor:a
  :args (s/cat :cps valid-x? :phase* valid-i?* ))
(stest/instrument `phasor:a)

(defn phasor:k
  {:arglists '([kcps & iphase*])}
  [cps & [ phase* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "phasor"
                      [cps phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef phasor:k
  :args (s/cat :cps valid-kr? :phase* valid-i?* ))
(stest/instrument `phasor:k)

(defn looptseg
  {:arglists '([kfreq ktrig iphase & kvalue1* ktype2* ktime3* kvalue4* ktype5* ktime6* kvalue7* ktype8* ktime9* kvalueN10* ktypeN11* ktimeN12* ktimeN13* ktimeN14* ktimeN15* ktimeN16*])}
  [freq trig phase & [ value1* type2* time3* value4* type5* time6* value7* type8* time9* valueN10* typeN11* timeN12* timeN13* timeN14* timeN15* timeN16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "looptseg"
                      [freq trig phase value1* type2* time3* value4* type5* time6* value7* type8* time9* valueN10* typeN11* timeN12* timeN13* timeN14* timeN15* timeN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef looptseg
  :args (s/cat :freq valid-kr? :trig valid-kr? :phase valid-i? :value1* valid-kr?* :type2* valid-kr?* :time3* valid-kr?* :value4* valid-kr?* :type5* valid-kr?* :time6* valid-kr?* :value7* valid-kr?* :type8* valid-kr?* :time9* valid-kr?* :valueN10* valid-kr?* :typeN11* valid-kr?* :timeN12* valid-kr?* :timeN13* valid-kr?* :timeN14* valid-kr?* :timeN15* valid-kr?* :timeN16* valid-kr?* ))
(stest/instrument `looptseg)

(defn looptseg:k
  {:arglists '([kfreq ktrig iphase & kvalue1* ktype2* ktime3* kvalue4* ktype5* ktime6* kvalue7* ktype8* ktime9* kvalueN10* ktypeN11* ktimeN12* ktimeN13* ktimeN14* ktimeN15* ktimeN16*])}
  [freq trig phase & [ value1* type2* time3* value4* type5* time6* value7* type8* time9* valueN10* typeN11* timeN12* timeN13* timeN14* timeN15* timeN16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "looptseg"
                      [freq trig phase value1* type2* time3* value4* type5* time6* value7* type8* time9* valueN10* typeN11* timeN12* timeN13* timeN14* timeN15* timeN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef looptseg:k
  :args (s/cat :freq valid-kr? :trig valid-kr? :phase valid-i? :value1* valid-kr?* :type2* valid-kr?* :time3* valid-kr?* :value4* valid-kr?* :type5* valid-kr?* :time6* valid-kr?* :value7* valid-kr?* :type8* valid-kr?* :time9* valid-kr?* :valueN10* valid-kr?* :typeN11* valid-kr?* :timeN12* valid-kr?* :timeN13* valid-kr?* :timeN14* valid-kr?* :timeN15* valid-kr?* :timeN16* valid-kr?* ))
(stest/instrument `looptseg:k)

(defn vmultv_i
  {:arglists '([ifn1 ifn2 ielements & idstoffset* isrcoffset*])}
  [fn1 fn2 elements & [ dstoffset* srcoffset* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vmultv_i"
                      [fn1 fn2 elements dstoffset* srcoffset*]
                      *global*)]
    (new out-types ast)))

(s/fdef vmultv_i
  :args (s/cat :fn1 valid-i? :fn2 valid-i? :elements valid-i? :dstoffset* valid-i?* :srcoffset* valid-i?* ))
(stest/instrument `vmultv_i)

(defn pwd
  {:arglists '()}
  []
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "pwd"
                      []
                      *global*)]
    (new out-types ast)))


(defn pwd:S
  {:arglists '()}
  []
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "pwd"
                      []
                      *global*)]
    (new out-types ast)))


(defn strrindex
  {:arglists '([Sarg1 Sarg2])}
  [arg1 arg2]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "strrindex"
                      [arg1 arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef strrindex
  :args (s/cat :arg1 valid-S? :arg2 valid-S? ))
(stest/instrument `strrindex)

(defn strrindex:i
  {:arglists '([Sarg1 Sarg2])}
  [arg1 arg2]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "strrindex"
                      [arg1 arg2]
                      *global*)]
    (new out-types ast)))

(s/fdef strrindex:i
  :args (s/cat :arg1 valid-S? :arg2 valid-S? ))
(stest/instrument `strrindex:i)

(defn sprintfk
  {:arglists '([Sfmt iarg2 & xarg1* xarg2* xarg3* xarg4* xarg5* xarg6* xarg7* xarg8* xarg9* xarg10* xarg11* xarg12* xarg13* xarg14* xarg15* xarg16*] [Sfmt karg2 & xarg1* xarg2* xarg3* xarg4* xarg5* xarg6* xarg7* xarg8* xarg9* xarg10* xarg11* xarg12* xarg13* xarg14* xarg15* xarg16*] [Sfmt Sarg2 & xarg1* xarg2* xarg3* xarg4* xarg5* xarg6* xarg7* xarg8* xarg9* xarg10* xarg11* xarg12* xarg13* xarg14* xarg15* xarg16*])}
  [fmt arg2 & [ arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16* ]]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "sprintfk"
                      [fmt arg2 arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16*]
                      *global*)]
    (new out-types ast)))

(s/fdef sprintfk
  :args (s/alt
         :Sixxxxxxxxxxxxxxxx (s/cat :fmt valid-S? :arg2 valid-i? :arg1* valid-x?* :arg2* valid-x?* :arg3* valid-x?* :arg4* valid-x?* :arg5* valid-x?* :arg6* valid-x?* :arg7* valid-x?* :arg8* valid-x?* :arg9* valid-x?* :arg10* valid-x?* :arg11* valid-x?* :arg12* valid-x?* :arg13* valid-x?* :arg14* valid-x?* :arg15* valid-x?* :arg16* valid-x?* )
         ))
(stest/instrument `sprintfk)

(defn sprintfk:S
  {:arglists '([Sfmt iarg2 & xarg1* xarg2* xarg3* xarg4* xarg5* xarg6* xarg7* xarg8* xarg9* xarg10* xarg11* xarg12* xarg13* xarg14* xarg15* xarg16*] [Sfmt karg2 & xarg1* xarg2* xarg3* xarg4* xarg5* xarg6* xarg7* xarg8* xarg9* xarg10* xarg11* xarg12* xarg13* xarg14* xarg15* xarg16*] [Sfmt Sarg2 & xarg1* xarg2* xarg3* xarg4* xarg5* xarg6* xarg7* xarg8* xarg9* xarg10* xarg11* xarg12* xarg13* xarg14* xarg15* xarg16*])}
  [fmt arg2 & [ arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16* ]]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "sprintfk"
                      [fmt arg2 arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16*]
                      *global*)]
    (new out-types ast)))

(s/fdef sprintfk:S
  :args (s/alt
         :Sixxxxxxxxxxxxxxxx (s/cat :fmt valid-S? :arg2 valid-i? :arg1* valid-x?* :arg2* valid-x?* :arg3* valid-x?* :arg4* valid-x?* :arg5* valid-x?* :arg6* valid-x?* :arg7* valid-x?* :arg8* valid-x?* :arg9* valid-x?* :arg10* valid-x?* :arg11* valid-x?* :arg12* valid-x?* :arg13* valid-x?* :arg14* valid-x?* :arg15* valid-x?* :arg16* valid-x?* )
         ))
(stest/instrument `sprintfk:S)

(defn slicearray
  {:arglists '([ainarrayArr istart iend & istride*] [kinarrayArr istart iend & istride*] [SinarrayArr istart iend & istride*] [iinarrayArr istart iend & istride*])}
  [inarray start end & [ stride* ]]
  (let [out-types-quoted 'AudioArray
        out-types AudioArray
        ast (ast-node out-types-quoted
                      "slicearray"
                      [inarray start end stride*]
                      *global*)]
    (new out-types ast)))

(s/fdef slicearray
  :args (s/alt
         :aArriii (s/cat :inarray valid-aArr? :start valid-i? :end valid-i? :stride* valid-i?* )
         ))
(stest/instrument `slicearray)

(defn slicearray:aArr
  {:arglists '([ainarrayArr istart iend & istride*])}
  [inarray start end & [ stride* ]]
  (let [out-types-quoted 'AudioArray
        out-types AudioArray
        ast (ast-node out-types-quoted
                      "slicearray"
                      [inarray start end stride*]
                      *global*)]
    (new out-types ast)))

(s/fdef slicearray:aArr
  :args (s/cat :inarray valid-aArr? :start valid-i? :end valid-i? :stride* valid-i?* ))
(stest/instrument `slicearray:aArr)

(defn slicearray:kArr
  {:arglists '([kinarrayArr istart iend & istride*])}
  [inarray start end & [ stride* ]]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "slicearray"
                      [inarray start end stride*]
                      *global*)]
    (new out-types ast)))

(s/fdef slicearray:kArr
  :args (s/cat :inarray valid-kArr? :start valid-i? :end valid-i? :stride* valid-i?* ))
(stest/instrument `slicearray:kArr)

(defn slicearray:SArr
  {:arglists '([SinarrayArr istart iend & istride*])}
  [inarray start end & [ stride* ]]
  (let [out-types-quoted 'StringArray
        out-types StringArray
        ast (ast-node out-types-quoted
                      "slicearray"
                      [inarray start end stride*]
                      *global*)]
    (new out-types ast)))

(s/fdef slicearray:SArr
  :args (s/cat :inarray valid-SArr? :start valid-i? :end valid-i? :stride* valid-i?* ))
(stest/instrument `slicearray:SArr)

(defn slicearray:iArr
  {:arglists '([iinarrayArr istart iend & istride*])}
  [inarray start end & [ stride* ]]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "slicearray"
                      [inarray start end stride*]
                      *global*)]
    (new out-types ast)))

(s/fdef slicearray:iArr
  :args (s/cat :inarray valid-iArr? :start valid-i? :end valid-i? :stride* valid-i?* ))
(stest/instrument `slicearray:iArr)

(defn noteoff
  {:arglists '([ichn inum ivel])}
  [chn num vel]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "noteoff"
                      [chn num vel]
                      *global*)]
    (new out-types ast)))

(s/fdef noteoff
  :args (s/cat :chn valid-i? :num valid-i? :vel valid-i? ))
(stest/instrument `noteoff)

(defn sfinstr3
  {:arglists '([ivel inotenum xamp xfreq instrnum ifilhandle & iflag* ioffset* ioffset*])}
  [vel notenum amp freq nstrnum filhandle & [ flag* offset* offset* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "sfinstr3"
                      [vel notenum amp freq nstrnum filhandle flag* offset* offset*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef sfinstr3
  :args (s/cat :vel valid-i? :notenum valid-i? :amp valid-x? :freq valid-x? :nstrnum valid-i? :filhandle valid-i? :flag* valid-i?* :offset* valid-i?* :offset* valid-i?* ))
(stest/instrument `sfinstr3)

(defn outletf
  {:arglists '([Sname fsignal])}
  [name signal]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outletf"
                      [name signal]
                      *global*)]
    (new out-types ast)))

(s/fdef outletf
  :args (s/cat :name valid-S? :signal valid-f? ))
(stest/instrument `outletf)

(defn vco2
  {:arglists '([kamp kcps & imode* kpw* kphase* inyx*])}
  [amp cps & [ mode* pw* phase* nyx* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "vco2"
                      [amp cps mode* pw* phase* nyx*]
                      *global*)]
    (new out-types ast)))

(s/fdef vco2
  :args (s/cat :amp valid-kr? :cps valid-kr? :mode* valid-i?* :pw* valid-kr?* :phase* valid-kr?* :nyx* valid-i?* ))
(stest/instrument `vco2)

(defn vco2:a
  {:arglists '([kamp kcps & imode* kpw* kphase* inyx*])}
  [amp cps & [ mode* pw* phase* nyx* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "vco2"
                      [amp cps mode* pw* phase* nyx*]
                      *global*)]
    (new out-types ast)))

(s/fdef vco2:a
  :args (s/cat :amp valid-kr? :cps valid-kr? :mode* valid-i?* :pw* valid-kr?* :phase* valid-kr?* :nyx* valid-i?* ))
(stest/instrument `vco2:a)

(defn copya2ftab
  {:arglists '([iftblArr iab] [kftblArr kab])}
  [ftbl ab]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "copya2ftab"
                      [ftbl ab]
                      *global*)]
    (new out-types ast)))

(s/fdef copya2ftab
  :args (s/alt
         :iArri (s/cat :ftbl valid-iArr? :ab valid-i? )
         ))
(stest/instrument `copya2ftab)

(defn mdelay
  {:arglists '([kstatus kchan kd3 kd4 kdelay])}
  [status chan d3 d4 delay]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "mdelay"
                      [status chan d3 d4 delay]
                      *global*)]
    (new out-types ast)))

(s/fdef mdelay
  :args (s/cat :status valid-kr? :chan valid-kr? :d3 valid-kr? :d4 valid-kr? :delay valid-kr? ))
(stest/instrument `mdelay)

(defn trigseq
  {:arglists '([ktrig_in kstart kloop kinitndx kfn_values & kout1* kout2* kout3* kout4* kout5* kout6* kout7* kout8* kout9* kout10* kout11* kout12* kout13* kout14* kout15* kout16*])}
  [trig_in start loop initndx fn_values & [ out1* out2* out3* out4* out5* out6* out7* out8* out9* out10* out11* out12* out13* out14* out15* out16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "trigseq"
                      [trig_in start loop initndx fn_values out1* out2* out3* out4* out5* out6* out7* out8* out9* out10* out11* out12* out13* out14* out15* out16*]
                      *global*)]
    (new out-types ast)))

(s/fdef trigseq
  :args (s/cat :trig_in valid-kr? :start valid-kr? :loop valid-kr? :initndx valid-kr? :fn_values valid-kr? :out1* valid-kr?* :out2* valid-kr?* :out3* valid-kr?* :out4* valid-kr?* :out5* valid-kr?* :out6* valid-kr?* :out7* valid-kr?* :out8* valid-kr?* :out9* valid-kr?* :out10* valid-kr?* :out11* valid-kr?* :out12* valid-kr?* :out13* valid-kr?* :out14* valid-kr?* :out15* valid-kr?* :out16* valid-kr?* ))
(stest/instrument `trigseq)

(defn mfb
  {:arglists '([iinArr ilow ihigh ibands] [kinArr klow khigh ibands])}
  [in low high bands]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "mfb"
                      [in low high bands]
                      *global*)]
    (new out-types ast)))

(s/fdef mfb
  :args (s/alt
         :iArriii (s/cat :in valid-iArr? :low valid-i? :high valid-i? :bands valid-i? )
         ))
(stest/instrument `mfb)

(defn mfb:iArr
  {:arglists '([iinArr ilow ihigh ibands])}
  [in low high bands]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "mfb"
                      [in low high bands]
                      *global*)]
    (new out-types ast)))

(s/fdef mfb:iArr
  :args (s/cat :in valid-iArr? :low valid-i? :high valid-i? :bands valid-i? ))
(stest/instrument `mfb:iArr)

(defn mfb:kArr
  {:arglists '([kinArr klow khigh ibands])}
  [in low high bands]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "mfb"
                      [in low high bands]
                      *global*)]
    (new out-types ast)))

(s/fdef mfb:kArr
  :args (s/cat :in valid-kArr? :low valid-kr? :high valid-kr? :bands valid-i? ))
(stest/instrument `mfb:kArr)

(defn mxadsr
  {:arglists '([iatt idec islev irel & idel* ireltim*] [iatt idec islev irel & idel* ireltim*])}
  [att dec slev rel & [ del* reltim* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "mxadsr"
                      [att dec slev rel del* reltim*]
                      *global*)]
    (new out-types ast)))

(s/fdef mxadsr
  :args (s/alt
         :iiiiii (s/cat :att valid-i? :dec valid-i? :slev valid-i? :rel valid-i? :del* valid-i?* :reltim* valid-i?* )
         ))
(stest/instrument `mxadsr)

(defn mxadsr:a
  {:arglists '([iatt idec islev irel & idel* ireltim*])}
  [att dec slev rel & [ del* reltim* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "mxadsr"
                      [att dec slev rel del* reltim*]
                      *global*)]
    (new out-types ast)))

(s/fdef mxadsr:a
  :args (s/cat :att valid-i? :dec valid-i? :slev valid-i? :rel valid-i? :del* valid-i?* :reltim* valid-i?* ))
(stest/instrument `mxadsr:a)

(defn mxadsr:k
  {:arglists '([iatt idec islev irel & idel* ireltim*])}
  [att dec slev rel & [ del* reltim* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "mxadsr"
                      [att dec slev rel del* reltim*]
                      *global*)]
    (new out-types ast)))

(s/fdef mxadsr:k
  :args (s/cat :att valid-i? :dec valid-i? :slev valid-i? :rel valid-i? :del* valid-i?* :reltim* valid-i?* ))
(stest/instrument `mxadsr:k)

(defn loopseg
  {:arglists '([kfreq ktrig iphase & kvalue1* ktime2* kvalue3* ktime4* kvalue5* ktime6* ktime7* ktime8* ktime9* ktime10* ktime11* ktime12* ktime13* ktime14* ktime15* ktime16*])}
  [freq trig phase & [ value1* time2* value3* time4* value5* time6* time7* time8* time9* time10* time11* time12* time13* time14* time15* time16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "loopseg"
                      [freq trig phase value1* time2* value3* time4* value5* time6* time7* time8* time9* time10* time11* time12* time13* time14* time15* time16*]
                      *global*)]
    (new out-types ast)))

(s/fdef loopseg
  :args (s/cat :freq valid-kr? :trig valid-kr? :phase valid-i? :value1* valid-kr?* :time2* valid-kr?* :value3* valid-kr?* :time4* valid-kr?* :value5* valid-kr?* :time6* valid-kr?* :time7* valid-kr?* :time8* valid-kr?* :time9* valid-kr?* :time10* valid-kr?* :time11* valid-kr?* :time12* valid-kr?* :time13* valid-kr?* :time14* valid-kr?* :time15* valid-kr?* :time16* valid-kr?* ))
(stest/instrument `loopseg)

(defn loopseg:k
  {:arglists '([kfreq ktrig iphase & kvalue1* ktime2* kvalue3* ktime4* kvalue5* ktime6* ktime7* ktime8* ktime9* ktime10* ktime11* ktime12* ktime13* ktime14* ktime15* ktime16*])}
  [freq trig phase & [ value1* time2* value3* time4* value5* time6* time7* time8* time9* time10* time11* time12* time13* time14* time15* time16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "loopseg"
                      [freq trig phase value1* time2* value3* time4* value5* time6* time7* time8* time9* time10* time11* time12* time13* time14* time15* time16*]
                      *global*)]
    (new out-types ast)))

(s/fdef loopseg:k
  :args (s/cat :freq valid-kr? :trig valid-kr? :phase valid-i? :value1* valid-kr?* :time2* valid-kr?* :value3* valid-kr?* :time4* valid-kr?* :value5* valid-kr?* :time6* valid-kr?* :time7* valid-kr?* :time8* valid-kr?* :time9* valid-kr?* :time10* valid-kr?* :time11* valid-kr?* :time12* valid-kr?* :time13* valid-kr?* :time14* valid-kr?* :time15* valid-kr?* :time16* valid-kr?* ))
(stest/instrument `loopseg:k)

(defn grain2
  {:arglists '([kcps kfmd kgdur iovrlp ktable iwfn & irpow* iseed* imode*])}
  [cps fmd gdur ovrlp table wfn & [ rpow* seed* mode* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "grain2"
                      [cps fmd gdur ovrlp table wfn rpow* seed* mode*]
                      *global*)]
    (new out-types ast)))

(s/fdef grain2
  :args (s/cat :cps valid-kr? :fmd valid-kr? :gdur valid-kr? :ovrlp valid-i? :table valid-kr? :wfn valid-i? :rpow* valid-i?* :seed* valid-i?* :mode* valid-i?* ))
(stest/instrument `grain2)

(defn grain2:a
  {:arglists '([kcps kfmd kgdur iovrlp ktable iwfn & irpow* iseed* imode*])}
  [cps fmd gdur ovrlp table wfn & [ rpow* seed* mode* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "grain2"
                      [cps fmd gdur ovrlp table wfn rpow* seed* mode*]
                      *global*)]
    (new out-types ast)))

(s/fdef grain2:a
  :args (s/cat :cps valid-kr? :fmd valid-kr? :gdur valid-kr? :ovrlp valid-i? :table valid-kr? :wfn valid-i? :rpow* valid-i?* :seed* valid-i?* :mode* valid-i?* ))
(stest/instrument `grain2:a)

(defn vphaseseg
  {:arglists '([kphase ioutab ielems & itab1* idist2* itab3* idist4* itab5* idistN-6* itabN7* itabN8* itabN9* itabN10* itabN11* itabN12* itabN13* itabN14* itabN15* itabN16*])}
  [phase outab elems & [ tab1* dist2* tab3* dist4* tab5* distN-6* tabN7* tabN8* tabN9* tabN10* tabN11* tabN12* tabN13* tabN14* tabN15* tabN16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vphaseseg"
                      [phase outab elems tab1* dist2* tab3* dist4* tab5* distN-6* tabN7* tabN8* tabN9* tabN10* tabN11* tabN12* tabN13* tabN14* tabN15* tabN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef vphaseseg
  :args (s/cat :phase valid-kr? :outab valid-i? :elems valid-i? :tab1* valid-i?* :dist2* valid-i?* :tab3* valid-i?* :dist4* valid-i?* :tab5* valid-i?* :distN-6* valid-i?* :tabN7* valid-i?* :tabN8* valid-i?* :tabN9* valid-i?* :tabN10* valid-i?* :tabN11* valid-i?* :tabN12* valid-i?* :tabN13* valid-i?* :tabN14* valid-i?* :tabN15* valid-i?* :tabN16* valid-i?* ))
(stest/instrument `vphaseseg)

(defn vtablewk
  {:arglists '([kindex ktable ixmode & kinarg1* kinarg2* kinarg3* kinargN4* kinargN5* kinargN6* kinargN7* kinargN8* kinargN9* kinargN10* kinargN11* kinargN12* kinargN13* kinargN14* kinargN15* kinargN16*])}
  [index table xmode & [ inarg1* inarg2* inarg3* inargN4* inargN5* inargN6* inargN7* inargN8* inargN9* inargN10* inargN11* inargN12* inargN13* inargN14* inargN15* inargN16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vtablewk"
                      [index table xmode inarg1* inarg2* inarg3* inargN4* inargN5* inargN6* inargN7* inargN8* inargN9* inargN10* inargN11* inargN12* inargN13* inargN14* inargN15* inargN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef vtablewk
  :args (s/cat :index valid-kr? :table valid-kr? :xmode valid-i? :inarg1* valid-kr?* :inarg2* valid-kr?* :inarg3* valid-kr?* :inargN4* valid-kr?* :inargN5* valid-kr?* :inargN6* valid-kr?* :inargN7* valid-kr?* :inargN8* valid-kr?* :inargN9* valid-kr?* :inargN10* valid-kr?* :inargN11* valid-kr?* :inargN12* valid-kr?* :inargN13* valid-kr?* :inargN14* valid-kr?* :inargN15* valid-kr?* :inargN16* valid-kr?* ))
(stest/instrument `vtablewk)

(defn loscil
  {:arglists '([xamp kcps & itable* ibas* imod1* ibeg1* iend1* imod1* ibeg1* iend1*])}
  [amp cps & [ table* bas* mod1* beg1* end1* mod1* beg1* end1* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "loscil"
                      [amp cps table* bas* mod1* beg1* end1* mod1* beg1* end1*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef loscil
  :args (s/cat :amp valid-x? :cps valid-kr? :table* valid-i?* :bas* valid-i?* :mod1* valid-i?* :beg1* valid-i?* :end1* valid-i?* :mod1* valid-i?* :beg1* valid-i?* :end1* valid-i?* ))
(stest/instrument `loscil)

(defn monitor
  {:arglists '( )}
  []
  (let [out-types-quoted 'AudioArray
        out-types AudioArray
        ast (ast-node out-types-quoted
                      "monitor"
                      []
                      *global*)]
    (new out-types ast)))


(defn monitor:aArr
  {:arglists '()}
  []
  (let [out-types-quoted 'AudioArray
        out-types AudioArray
        ast (ast-node out-types-quoted
                      "monitor"
                      []
                      *global*)]
    (new out-types ast)))


(defn monitor:a
  {:arglists '()}
  []
  (let [out-types-quoted '[AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "monitor"
                      []
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))


(defn rezzy
  {:arglists '([asig xcutoff-frequency xresonance & imode* iskip*])}
  [sig cutoff-frequency resonance & [ mode* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "rezzy"
                      [sig cutoff-frequency resonance mode* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef rezzy
  :args (s/cat :sig valid-ar? :cutoff-frequency valid-x? :resonance valid-x? :mode* valid-i?* :skip* valid-i?* ))
(stest/instrument `rezzy)

(defn rezzy:a
  {:arglists '([asig xcutoff-frequency xresonance & imode* iskip*])}
  [sig cutoff-frequency resonance & [ mode* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "rezzy"
                      [sig cutoff-frequency resonance mode* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef rezzy:a
  :args (s/cat :sig valid-ar? :cutoff-frequency valid-x? :resonance valid-x? :mode* valid-i?* :skip* valid-i?* ))
(stest/instrument `rezzy:a)

(defn chani
  {:arglists '([kchan] [kchan])}
  [chan]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "chani"
                      [chan]
                      *global*)]
    (new out-types ast)))

(s/fdef chani
  :args (s/alt
         :k (s/cat :chan valid-kr? )
         ))
(stest/instrument `chani)

(defn chani:a
  {:arglists '([kchan])}
  [chan]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "chani"
                      [chan]
                      *global*)]
    (new out-types ast)))

(s/fdef chani:a
  :args (s/cat :chan valid-kr? ))
(stest/instrument `chani:a)

(defn chani:k
  {:arglists '([kchan])}
  [chan]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "chani"
                      [chan]
                      *global*)]
    (new out-types ast)))

(s/fdef chani:k
  :args (s/cat :chan valid-kr? ))
(stest/instrument `chani:k)

(defn inch
  {:arglists '([kchan1] [& kchan1* kchan2* kchan3* kchan4* kchan5* kchan6* kchan7* kchan8* kchan9* kchan10* kchan11* kchan12* kchan13* kchan14* kchan15* kchan16*])}
  [chan1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "inch"
                      [chan1]
                      *global*)]
    (new out-types ast)))

(s/fdef inch
  :args (s/alt
         :k (s/cat :chan1 valid-kr? )
         ))
(stest/instrument `inch)

(defn inch:a
  {:arglists '([kchan1] [& kchan1* kchan2* kchan3* kchan4* kchan5* kchan6* kchan7* kchan8* kchan9* kchan10* kchan11* kchan12* kchan13* kchan14* kchan15* kchan16*])}
  [chan1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "inch"
                      [chan1]
                      *global*)]
    (new out-types ast)))

(s/fdef inch:a
  :args (s/alt
         :k (s/cat :chan1 valid-kr? )
         ))
(stest/instrument `inch:a)

(defn fft
  {:arglists '([iinArr] [kinArr])}
  [in]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "fft"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef fft
  :args (s/alt
         :iArr (s/cat :in valid-iArr? )
         ))
(stest/instrument `fft)

(defn fft:iArr
  {:arglists '([iinArr])}
  [in]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "fft"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef fft:iArr
  :args (s/cat :in valid-iArr? ))
(stest/instrument `fft:iArr)

(defn fft:kArr
  {:arglists '([kinArr])}
  [in]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "fft"
                      [in]
                      *global*)]
    (new out-types ast)))

(s/fdef fft:kArr
  :args (s/cat :in valid-kArr? ))
(stest/instrument `fft:kArr)

(defn rms
  {:arglists '([asig & ihp* iskip*])}
  [sig & [ hp* skip* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "rms"
                      [sig hp* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef rms
  :args (s/cat :sig valid-ar? :hp* valid-i?* :skip* valid-i?* ))
(stest/instrument `rms)

(defn rms:k
  {:arglists '([asig & ihp* iskip*])}
  [sig & [ hp* skip* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "rms"
                      [sig hp* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef rms:k
  :args (s/cat :sig valid-ar? :hp* valid-i?* :skip* valid-i?* ))
(stest/instrument `rms:k)

(defn strcpyk
  {:arglists '([Ssrc] [ksrc])}
  [src]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "strcpyk"
                      [src]
                      *global*)]
    (new out-types ast)))

(s/fdef strcpyk
  :args (s/alt
         :S (s/cat :src valid-S? )
         ))
(stest/instrument `strcpyk)

(defn strcpyk:S
  {:arglists '([Ssrc] [ksrc])}
  [src]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "strcpyk"
                      [src]
                      *global*)]
    (new out-types ast)))

(s/fdef strcpyk:S
  :args (s/alt
         :S (s/cat :src valid-S? )
         ))
(stest/instrument `strcpyk:S)

(defn pitch
  {:arglists '([asig iupdte ilo ihi idbthresh & ifrqs* iconf* istrt* iocts* iq* inptls* irolloff* iskip*])}
  [sig updte lo hi dbthresh & [ frqs* conf* strt* octs* q* nptls* rolloff* skip* ]]
  (let [out-types-quoted '[ControlSignal ControlSignal]
        out-types [ControlSignal ControlSignal]
        ast (ast-node out-types-quoted
                      "pitch"
                      [sig updte lo hi dbthresh frqs* conf* strt* octs* q* nptls* rolloff* skip*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef pitch
  :args (s/cat :sig valid-ar? :updte valid-i? :lo valid-i? :hi valid-i? :dbthresh valid-i? :frqs* valid-i?* :conf* valid-i?* :strt* valid-i?* :octs* valid-i?* :q* valid-i?* :nptls* valid-i?* :rolloff* valid-i?* :skip* valid-i?* ))
(stest/instrument `pitch)

(defn midinoteoncps
  {:arglists '([xcps xvelocity])}
  [cps velocity]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "midinoteoncps"
                      [cps velocity]
                      *global*)]
    (new out-types ast)))

(s/fdef midinoteoncps
  :args (s/cat :cps valid-x? :velocity valid-x? ))
(stest/instrument `midinoteoncps)

(defn serialRead
  {:arglists '([iPort])}
  [Port]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "serialRead"
                      [Port]
                      *global*)]
    (new out-types ast)))

(s/fdef serialRead
  :args (s/cat :Port valid-i? ))
(stest/instrument `serialRead)

(defn serialRead:k
  {:arglists '([iPort])}
  [Port]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "serialRead"
                      [Port]
                      *global*)]
    (new out-types ast)))

(s/fdef serialRead:k
  :args (s/cat :Port valid-i? ))
(stest/instrument `serialRead:k)

(defn printk
  {:arglists '([itime kval & ispace*])}
  [time val & [ space* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "printk"
                      [time val space*]
                      *global*)]
    (new out-types ast)))

(s/fdef printk
  :args (s/cat :time valid-i? :val valid-kr? :space* valid-i?* ))
(stest/instrument `printk)

(defn hvs2
  {:arglists '([kx ky inumParms inumPointsX inumPointsY iOutTab iPositionsTab iSnapTab & iConfigTab*])}
  [x y numParms numPointsX numPointsY OutTab PositionsTab SnapTab & [ ConfigTab* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "hvs2"
                      [x y numParms numPointsX numPointsY OutTab PositionsTab SnapTab ConfigTab*]
                      *global*)]
    (new out-types ast)))

(s/fdef hvs2
  :args (s/cat :x valid-kr? :y valid-kr? :numParms valid-i? :numPointsX valid-i? :numPointsY valid-i? :OutTab valid-i? :PositionsTab valid-i? :SnapTab valid-i? :ConfigTab* valid-i?* ))
(stest/instrument `hvs2)

(defn fareylen
  {:arglists '([ktable])}
  [table]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "fareylen"
                      [table]
                      *global*)]
    (new out-types ast)))

(s/fdef fareylen
  :args (s/cat :table valid-kr? ))
(stest/instrument `fareylen)

(defn fareylen:k
  {:arglists '([ktable])}
  [table]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "fareylen"
                      [table]
                      *global*)]
    (new out-types ast)))

(s/fdef fareylen:k
  :args (s/cat :table valid-kr? ))
(stest/instrument `fareylen:k)

(defn expsegb
  {:arglists '([ia itim2 & ib1* itim2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*] [ia itim2 & ib1* itim2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a tim2 & [ b1* tim2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "expsegb"
                      [a tim2 b1* tim2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef expsegb
  :args (s/alt
         :iiiiiiiiiiiiiiiiii (s/cat :a valid-i? :tim2 valid-i? :b1* valid-i?* :tim2* valid-i?* :c3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* )
         ))
(stest/instrument `expsegb)

(defn expsegb:a
  {:arglists '([ia itim2 & ib1* itim2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a tim2 & [ b1* tim2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "expsegb"
                      [a tim2 b1* tim2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef expsegb:a
  :args (s/cat :a valid-i? :tim2 valid-i? :b1* valid-i?* :tim2* valid-i?* :c3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* ))
(stest/instrument `expsegb:a)

(defn expsegb:k
  {:arglists '([ia itim2 & ib1* itim2* ic3* ic4* ic5* ic6* ic7* ic8* ic9* ic10* ic11* ic12* ic13* ic14* ic15* ic16*])}
  [a tim2 & [ b1* tim2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "expsegb"
                      [a tim2 b1* tim2* c3* c4* c5* c6* c7* c8* c9* c10* c11* c12* c13* c14* c15* c16*]
                      *global*)]
    (new out-types ast)))

(s/fdef expsegb:k
  :args (s/cat :a valid-i? :tim2 valid-i? :b1* valid-i?* :tim2* valid-i?* :c3* valid-i?* :c4* valid-i?* :c5* valid-i?* :c6* valid-i?* :c7* valid-i?* :c8* valid-i?* :c9* valid-i?* :c10* valid-i?* :c11* valid-i?* :c12* valid-i?* :c13* valid-i?* :c14* valid-i?* :c15* valid-i?* :c16* valid-i?* ))
(stest/instrument `expsegb:k)

(defn maxabsaccum
  {:arglists '([aAccumulator aInput])}
  [Accumulator Input]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "maxabsaccum"
                      [Accumulator Input]
                      *global*)]
    (new out-types ast)))

(s/fdef maxabsaccum
  :args (s/cat :Accumulator valid-ar? :Input valid-ar? ))
(stest/instrument `maxabsaccum)

(defn zkw
  {:arglists '([ksig kindex])}
  [sig index]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "zkw"
                      [sig index]
                      *global*)]
    (new out-types ast)))

(s/fdef zkw
  :args (s/cat :sig valid-kr? :index valid-kr? ))
(stest/instrument `zkw)

(defn resyn
  {:arglists '([fin kscal kpitch kmaxtracks itable & itable*])}
  [in scal pitch maxtracks table & [ table* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "resyn"
                      [in scal pitch maxtracks table table*]
                      *global*)]
    (new out-types ast)))

(s/fdef resyn
  :args (s/cat :in valid-f? :scal valid-kr? :pitch valid-kr? :maxtracks valid-kr? :table valid-i? :table* valid-i?* ))
(stest/instrument `resyn)

(defn resyn:a
  {:arglists '([fin kscal kpitch kmaxtracks itable & itable*])}
  [in scal pitch maxtracks table & [ table* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "resyn"
                      [in scal pitch maxtracks table table*]
                      *global*)]
    (new out-types ast)))

(s/fdef resyn:a
  :args (s/cat :in valid-f? :scal valid-kr? :pitch valid-kr? :maxtracks valid-kr? :table valid-i? :table* valid-i?* ))
(stest/instrument `resyn:a)

(defn ntrpol
  {:arglists '([asig1 asig2 kpoint & imin* imax*] [isig1 isig2 ipoint & imin* imax*] [ksig1 ksig2 kpoint & imin* imax*])}
  [sig1 sig2 point & [ min* max* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "ntrpol"
                      [sig1 sig2 point min* max*]
                      *global*)]
    (new out-types ast)))

(s/fdef ntrpol
  :args (s/alt
         :aakii (s/cat :sig1 valid-ar? :sig2 valid-ar? :point valid-kr? :min* valid-i?* :max* valid-i?* )
         ))
(stest/instrument `ntrpol)

(defn ntrpol:a
  {:arglists '([asig1 asig2 kpoint & imin* imax*])}
  [sig1 sig2 point & [ min* max* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "ntrpol"
                      [sig1 sig2 point min* max*]
                      *global*)]
    (new out-types ast)))

(s/fdef ntrpol:a
  :args (s/cat :sig1 valid-ar? :sig2 valid-ar? :point valid-kr? :min* valid-i?* :max* valid-i?* ))
(stest/instrument `ntrpol:a)

(defn ntrpol:i
  {:arglists '([isig1 isig2 ipoint & imin* imax*])}
  [sig1 sig2 point & [ min* max* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ntrpol"
                      [sig1 sig2 point min* max*]
                      *global*)]
    (new out-types ast)))

(s/fdef ntrpol:i
  :args (s/cat :sig1 valid-i? :sig2 valid-i? :point valid-i? :min* valid-i?* :max* valid-i?* ))
(stest/instrument `ntrpol:i)

(defn ntrpol:k
  {:arglists '([ksig1 ksig2 kpoint & imin* imax*])}
  [sig1 sig2 point & [ min* max* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "ntrpol"
                      [sig1 sig2 point min* max*]
                      *global*)]
    (new out-types ast)))

(s/fdef ntrpol:k
  :args (s/cat :sig1 valid-kr? :sig2 valid-kr? :point valid-kr? :min* valid-i?* :max* valid-i?* ))
(stest/instrument `ntrpol:k)

(defn imagecreate
  {:arglists '([iwidth iheight])}
  [width height]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "imagecreate"
                      [width height]
                      *global*)]
    (new out-types ast)))

(s/fdef imagecreate
  :args (s/cat :width valid-i? :height valid-i? ))
(stest/instrument `imagecreate)

(defn imagecreate:i
  {:arglists '([iwidth iheight])}
  [width height]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "imagecreate"
                      [width height]
                      *global*)]
    (new out-types ast)))

(s/fdef imagecreate:i
  :args (s/cat :width valid-i? :height valid-i? ))
(stest/instrument `imagecreate:i)

(defn dcblock2
  {:arglists '([ain & iorder* iskip*])}
  [in & [ order* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "dcblock2"
                      [in order* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef dcblock2
  :args (s/cat :in valid-ar? :order* valid-i?* :skip* valid-i?* ))
(stest/instrument `dcblock2)

(defn dcblock2:a
  {:arglists '([ain & iorder* iskip*])}
  [in & [ order* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "dcblock2"
                      [in order* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef dcblock2:a
  :args (s/cat :in valid-ar? :order* valid-i?* :skip* valid-i?* ))
(stest/instrument `dcblock2:a)

(defn mvclpf2
  {:arglists '([ain acenter-frequency aresonance & istor*] [ain acenter-frequency kresonance & istor*] [ain kcenter-frequency aresonance & istor*] [ain kcenter-frequency kresonance & istor*])}
  [in center-frequency resonance & [ stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "mvclpf2"
                      [in center-frequency resonance stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef mvclpf2
  :args (s/alt
         :aaai (s/cat :in valid-ar? :center-frequency valid-ar? :resonance valid-ar? :stor* valid-i?* )
         ))
(stest/instrument `mvclpf2)

(defn mvclpf2:a
  {:arglists '([ain acenter-frequency aresonance & istor*] [ain acenter-frequency kresonance & istor*] [ain kcenter-frequency aresonance & istor*] [ain kcenter-frequency kresonance & istor*])}
  [in center-frequency resonance & [ stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "mvclpf2"
                      [in center-frequency resonance stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef mvclpf2:a
  :args (s/alt
         :aaai (s/cat :in valid-ar? :center-frequency valid-ar? :resonance valid-ar? :stor* valid-i?* )
         ))
(stest/instrument `mvclpf2:a)

(defn zkr
  {:arglists '([kindex])}
  [index]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "zkr"
                      [index]
                      *global*)]
    (new out-types ast)))

(s/fdef zkr
  :args (s/cat :index valid-kr? ))
(stest/instrument `zkr)

(defn zkr:k
  {:arglists '([kindex])}
  [index]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "zkr"
                      [index]
                      *global*)]
    (new out-types ast)))

(s/fdef zkr:k
  :args (s/cat :index valid-kr? ))
(stest/instrument `zkr:k)

(defn tanh
  {:arglists '([aarg1] [iarg1] [iarg1Arr] [karg1] [karg1Arr])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tanh"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef tanh
  :args (s/alt
         :a (s/cat :arg1 valid-ar? )
         ))
(stest/instrument `tanh)

(defn tanh:a
  {:arglists '([aarg1])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tanh"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef tanh:a
  :args (s/cat :arg1 valid-ar? ))
(stest/instrument `tanh:a)

(defn tanh:i
  {:arglists '([iarg1])}
  [arg1]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "tanh"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef tanh:i
  :args (s/cat :arg1 valid-i? ))
(stest/instrument `tanh:i)

(defn tanh:iArr
  {:arglists '([iarg1Arr])}
  [arg1]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "tanh"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef tanh:iArr
  :args (s/cat :arg1 valid-iArr? ))
(stest/instrument `tanh:iArr)

(defn tanh:k
  {:arglists '([karg1])}
  [arg1]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "tanh"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef tanh:k
  :args (s/cat :arg1 valid-kr? ))
(stest/instrument `tanh:k)

(defn tanh:kArr
  {:arglists '([karg1Arr])}
  [arg1]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "tanh"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef tanh:kArr
  :args (s/cat :arg1 valid-kArr? ))
(stest/instrument `tanh:kArr)

(defn pvstencil
  {:arglists '([fsigin kgain klevel iftable])}
  [sigin gain level ftable]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvstencil"
                      [sigin gain level ftable]
                      *global*)]
    (new out-types ast)))

(s/fdef pvstencil
  :args (s/cat :sigin valid-f? :gain valid-kr? :level valid-kr? :ftable valid-i? ))
(stest/instrument `pvstencil)

(defn pvstencil:f
  {:arglists '([fsigin kgain klevel iftable])}
  [sigin gain level ftable]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvstencil"
                      [sigin gain level ftable]
                      *global*)]
    (new out-types ast)))

(s/fdef pvstencil:f
  :args (s/cat :sigin valid-f? :gain valid-kr? :level valid-kr? :ftable valid-i? ))
(stest/instrument `pvstencil:f)

(defn pluck
  {:arglists '([kamp kcps icps itable imeth & iparm1* iparm1*])}
  [amp cps cps table meth & [ parm1* parm1* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pluck"
                      [amp cps cps table meth parm1* parm1*]
                      *global*)]
    (new out-types ast)))

(s/fdef pluck
  :args (s/cat :amp valid-kr? :cps valid-kr? :cps valid-i? :table valid-i? :meth valid-i? :parm1* valid-i?* :parm1* valid-i?* ))
(stest/instrument `pluck)

(defn pluck:a
  {:arglists '([kamp kcps icps itable imeth & iparm1* iparm1*])}
  [amp cps cps table meth & [ parm1* parm1* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pluck"
                      [amp cps cps table meth parm1* parm1*]
                      *global*)]
    (new out-types ast)))

(s/fdef pluck:a
  :args (s/cat :amp valid-kr? :cps valid-kr? :cps valid-i? :table valid-i? :meth valid-i? :parm1* valid-i?* :parm1* valid-i?* ))
(stest/instrument `pluck:a)

(defn babo
  {:arglists '([asig ksrcx ksrcy ksrcz irx iry irz & idiff* ifno*])}
  [sig srcx srcy srcz rx ry rz & [ diff* fno* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "babo"
                      [sig srcx srcy srcz rx ry rz diff* fno*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef babo
  :args (s/cat :sig valid-ar? :srcx valid-kr? :srcy valid-kr? :srcz valid-kr? :rx valid-i? :ry valid-i? :rz valid-i? :diff* valid-i?* :fno* valid-i?* ))
(stest/instrument `babo)

(defn xyscale
  {:arglists '([kx ky iZeroZero iOneZero iZeroOne iOneOne] [kx ky kZeroZero kOneZero kZeroOne kOneOne])}
  [x y ZeroZero OneZero ZeroOne OneOne]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "xyscale"
                      [x y ZeroZero OneZero ZeroOne OneOne]
                      *global*)]
    (new out-types ast)))

(s/fdef xyscale
  :args (s/alt
         :kkiiii (s/cat :x valid-kr? :y valid-kr? :ZeroZero valid-i? :OneZero valid-i? :ZeroOne valid-i? :OneOne valid-i? )
         ))
(stest/instrument `xyscale)

(defn xyscale:k
  {:arglists '([kx ky iZeroZero iOneZero iZeroOne iOneOne] [kx ky kZeroZero kOneZero kZeroOne kOneOne])}
  [x y ZeroZero OneZero ZeroOne OneOne]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "xyscale"
                      [x y ZeroZero OneZero ZeroOne OneOne]
                      *global*)]
    (new out-types ast)))

(s/fdef xyscale:k
  :args (s/alt
         :kkiiii (s/cat :x valid-kr? :y valid-kr? :ZeroZero valid-i? :OneZero valid-i? :ZeroOne valid-i? :OneOne valid-i? )
         ))
(stest/instrument `xyscale:k)

(defn lpreson
  {:arglists '([asig])}
  [sig]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "lpreson"
                      [sig]
                      *global*)]
    (new out-types ast)))

(s/fdef lpreson
  :args (s/cat :sig valid-ar? ))
(stest/instrument `lpreson)

(defn lpreson:a
  {:arglists '([asig])}
  [sig]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "lpreson"
                      [sig]
                      *global*)]
    (new out-types ast)))

(s/fdef lpreson:a
  :args (s/cat :sig valid-ar? ))
(stest/instrument `lpreson:a)

(defn gain
  {:arglists '([asig krms & ihp* iskip*])}
  [sig rms & [ hp* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "gain"
                      [sig rms hp* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef gain
  :args (s/cat :sig valid-ar? :rms valid-kr? :hp* valid-i?* :skip* valid-i?* ))
(stest/instrument `gain)

(defn gain:a
  {:arglists '([asig krms & ihp* iskip*])}
  [sig rms & [ hp* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "gain"
                      [sig rms hp* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef gain:a
  :args (s/cat :sig valid-ar? :rms valid-kr? :hp* valid-i?* :skip* valid-i?* ))
(stest/instrument `gain:a)

(defn sfpassign
  {:arglists '([istartindex ifilhandle & imsgs*])}
  [startindex filhandle & [ msgs* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "sfpassign"
                      [startindex filhandle msgs*]
                      *global*)]
    (new out-types ast)))

(s/fdef sfpassign
  :args (s/cat :startindex valid-i? :filhandle valid-i? :msgs* valid-i?* ))
(stest/instrument `sfpassign)

(defn flanger
  {:arglists '([asig adel kfeedback imaxd])}
  [sig del feedback maxd]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "flanger"
                      [sig del feedback maxd]
                      *global*)]
    (new out-types ast)))

(s/fdef flanger
  :args (s/cat :sig valid-ar? :del valid-ar? :feedback valid-kr? :maxd valid-i? ))
(stest/instrument `flanger)

(defn flanger:a
  {:arglists '([asig adel kfeedback imaxd])}
  [sig del feedback maxd]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "flanger"
                      [sig del feedback maxd]
                      *global*)]
    (new out-types ast)))

(s/fdef flanger:a
  :args (s/cat :sig valid-ar? :del valid-ar? :feedback valid-kr? :maxd valid-i? ))
(stest/instrument `flanger:a)

(defn pvadd
  {:arglists '([ktimpnt kfmod Sfilcod itable ibins & ibinoffset* ibinincr* iextractmode* ifreqlim* igatefn*] [ktimpnt kfmod ifilcod itable ibins & ibinoffset* ibinincr* iextractmode* ifreqlim* igatefn*])}
  [timpnt fmod filcod table bins & [ binoffset* binincr* extractmode* freqlim* gatefn* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pvadd"
                      [timpnt fmod filcod table bins binoffset* binincr* extractmode* freqlim* gatefn*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvadd
  :args (s/alt
         :kkSiiiiiii (s/cat :timpnt valid-kr? :fmod valid-kr? :filcod valid-S? :table valid-i? :bins valid-i? :binoffset* valid-i?* :binincr* valid-i?* :extractmode* valid-i?* :freqlim* valid-i?* :gatefn* valid-i?* )
         ))
(stest/instrument `pvadd)

(defn pvadd:a
  {:arglists '([ktimpnt kfmod Sfilcod itable ibins & ibinoffset* ibinincr* iextractmode* ifreqlim* igatefn*] [ktimpnt kfmod ifilcod itable ibins & ibinoffset* ibinincr* iextractmode* ifreqlim* igatefn*])}
  [timpnt fmod filcod table bins & [ binoffset* binincr* extractmode* freqlim* gatefn* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "pvadd"
                      [timpnt fmod filcod table bins binoffset* binincr* extractmode* freqlim* gatefn*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvadd:a
  :args (s/alt
         :kkSiiiiiii (s/cat :timpnt valid-kr? :fmod valid-kr? :filcod valid-S? :table valid-i? :bins valid-i? :binoffset* valid-i?* :binincr* valid-i?* :extractmode* valid-i?* :freqlim* valid-i?* :gatefn* valid-i?* )
         ))
(stest/instrument `pvadd:a)

(defn reverbsc
  {:arglists '([ainL ainR kfblvl kcutoff-frequency & israte* ipitchm* iskip*])}
  [inL inR fblvl cutoff-frequency & [ srate* pitchm* skip* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "reverbsc"
                      [inL inR fblvl cutoff-frequency srate* pitchm* skip*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef reverbsc
  :args (s/cat :inL valid-ar? :inR valid-ar? :fblvl valid-kr? :cutoff-frequency valid-kr? :srate* valid-i?* :pitchm* valid-i?* :skip* valid-i?* ))
(stest/instrument `reverbsc)

(defn binit
  {:arglists '([fin isize])}
  [in size]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "binit"
                      [in size]
                      *global*)]
    (new out-types ast)))

(s/fdef binit
  :args (s/cat :in valid-f? :size valid-i? ))
(stest/instrument `binit)

(defn binit:f
  {:arglists '([fin isize])}
  [in size]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "binit"
                      [in size]
                      *global*)]
    (new out-types ast)))

(s/fdef binit:f
  :args (s/cat :in valid-f? :size valid-i? ))
(stest/instrument `binit:f)

(defn ATSreadnz
  {:arglists '([ktimepnt Satsfile iband] [ktimepnt iatsfile iband])}
  [timepnt atsfile band]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "ATSreadnz"
                      [timepnt atsfile band]
                      *global*)]
    (new out-types ast)))

(s/fdef ATSreadnz
  :args (s/alt
         :kSi (s/cat :timepnt valid-kr? :atsfile valid-S? :band valid-i? )
         ))
(stest/instrument `ATSreadnz)

(defn ATSreadnz:k
  {:arglists '([ktimepnt Satsfile iband] [ktimepnt iatsfile iband])}
  [timepnt atsfile band]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "ATSreadnz"
                      [timepnt atsfile band]
                      *global*)]
    (new out-types ast)))

(s/fdef ATSreadnz:k
  :args (s/alt
         :kSi (s/cat :timepnt valid-kr? :atsfile valid-S? :band valid-i? )
         ))
(stest/instrument `ATSreadnz:k)

(defn log2
  {:arglists '([aarg1] [iarg1] [iarg1Arr] [karg1] [karg1Arr])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "log2"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef log2
  :args (s/alt
         :a (s/cat :arg1 valid-ar? )
         ))
(stest/instrument `log2)

(defn log2:a
  {:arglists '([aarg1])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "log2"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef log2:a
  :args (s/cat :arg1 valid-ar? ))
(stest/instrument `log2:a)

(defn log2:i
  {:arglists '([iarg1])}
  [arg1]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "log2"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef log2:i
  :args (s/cat :arg1 valid-i? ))
(stest/instrument `log2:i)

(defn log2:iArr
  {:arglists '([iarg1Arr])}
  [arg1]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "log2"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef log2:iArr
  :args (s/cat :arg1 valid-iArr? ))
(stest/instrument `log2:iArr)

(defn log2:k
  {:arglists '([karg1])}
  [arg1]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "log2"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef log2:k
  :args (s/cat :arg1 valid-kr? ))
(stest/instrument `log2:k)

(defn log2:kArr
  {:arglists '([karg1Arr])}
  [arg1]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "log2"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef log2:kArr
  :args (s/cat :arg1 valid-kArr? ))
(stest/instrument `log2:kArr)

(defn shaker
  {:arglists '([kamp kfreq kbeans kdamp ktimes & idecay*])}
  [amp freq beans damp times & [ decay* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "shaker"
                      [amp freq beans damp times decay*]
                      *global*)]
    (new out-types ast)))

(s/fdef shaker
  :args (s/cat :amp valid-kr? :freq valid-kr? :beans valid-kr? :damp valid-kr? :times valid-kr? :decay* valid-i?* ))
(stest/instrument `shaker)

(defn shaker:a
  {:arglists '([kamp kfreq kbeans kdamp ktimes & idecay*])}
  [amp freq beans damp times & [ decay* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "shaker"
                      [amp freq beans damp times decay*]
                      *global*)]
    (new out-types ast)))

(s/fdef shaker:a
  :args (s/cat :amp valid-kr? :freq valid-kr? :beans valid-kr? :damp valid-kr? :times valid-kr? :decay* valid-i?* ))
(stest/instrument `shaker:a)

(defn plltrack
  {:arglists '([asig kd & kloopf* kloopq* klf* khf* kthresh*])}
  [sig d & [ loopf* loopq* lf* hf* thresh* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "plltrack"
                      [sig d loopf* loopq* lf* hf* thresh*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef plltrack
  :args (s/cat :sig valid-ar? :d valid-kr? :loopf* valid-kr?* :loopq* valid-kr?* :lf* valid-kr?* :hf* valid-kr?* :thresh* valid-kr?* ))
(stest/instrument `plltrack)

(defn oscil1i
  {:arglists '([idel kamp idur & itable*])}
  [del amp dur & [ table* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "oscil1i"
                      [del amp dur table*]
                      *global*)]
    (new out-types ast)))

(s/fdef oscil1i
  :args (s/cat :del valid-i? :amp valid-kr? :dur valid-i? :table* valid-i?* ))
(stest/instrument `oscil1i)

(defn oscil1i:k
  {:arglists '([idel kamp idur & itable*])}
  [del amp dur & [ table* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "oscil1i"
                      [del amp dur table*]
                      *global*)]
    (new out-types ast)))

(s/fdef oscil1i:k
  :args (s/cat :del valid-i? :amp valid-kr? :dur valid-i? :table* valid-i?* ))
(stest/instrument `oscil1i:k)

(defn oscils
  {:arglists '([iamp icps iphase & iflg*])}
  [amp cps phase & [ flg* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "oscils"
                      [amp cps phase flg*]
                      *global*)]
    (new out-types ast)))

(s/fdef oscils
  :args (s/cat :amp valid-i? :cps valid-i? :phase valid-i? :flg* valid-i?* ))
(stest/instrument `oscils)

(defn oscils:a
  {:arglists '([iamp icps iphase & iflg*])}
  [amp cps phase & [ flg* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "oscils"
                      [amp cps phase flg*]
                      *global*)]
    (new out-types ast)))

(s/fdef oscils:a
  :args (s/cat :amp valid-i? :cps valid-i? :phase valid-i? :flg* valid-i?* ))
(stest/instrument `oscils:a)

(defn mididefault
  {:arglists '([xdefault xvalue])}
  [default value]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "mididefault"
                      [default value]
                      *global*)]
    (new out-types ast)))

(s/fdef mididefault
  :args (s/cat :default valid-x? :value valid-x? ))
(stest/instrument `mididefault)

(defn zdf_2pole
  {:arglists '([ain xcenter-frequency xQ & kmode* istor*])}
  [in center-frequency Q & [ mode* stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "zdf_2pole"
                      [in center-frequency Q mode* stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef zdf_2pole
  :args (s/cat :in valid-ar? :center-frequency valid-x? :Q valid-x? :mode* valid-kr?* :stor* valid-i?* ))
(stest/instrument `zdf_2pole)

(defn zdf_2pole:a
  {:arglists '([ain xcenter-frequency xQ & kmode* istor*])}
  [in center-frequency Q & [ mode* stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "zdf_2pole"
                      [in center-frequency Q mode* stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef zdf_2pole:a
  :args (s/cat :in valid-ar? :center-frequency valid-x? :Q valid-x? :mode* valid-kr?* :stor* valid-i?* ))
(stest/instrument `zdf_2pole:a)

(defn hrtfstat
  {:arglists '([asrc iAz iElev Sfilel Sfiler & iradius* isr*])}
  [src Az Elev filel filer & [ radius* sr* ]]
  (let [out-types-quoted '[AudioSignal AudioSignal]
        out-types [AudioSignal AudioSignal]
        ast (ast-node out-types-quoted
                      "hrtfstat"
                      [src Az Elev filel filer radius* sr*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef hrtfstat
  :args (s/cat :src valid-ar? :Az valid-i? :Elev valid-i? :filel valid-S? :filer valid-S? :radius* valid-i?* :sr* valid-i?* ))
(stest/instrument `hrtfstat)

(defn fofilter
  {:arglists '([ain xcenter-frequency xris xdec & istor*])}
  [in center-frequency ris dec & [ stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fofilter"
                      [in center-frequency ris dec stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef fofilter
  :args (s/cat :in valid-ar? :center-frequency valid-x? :ris valid-x? :dec valid-x? :stor* valid-i?* ))
(stest/instrument `fofilter)

(defn fofilter:a
  {:arglists '([ain xcenter-frequency xris xdec & istor*])}
  [in center-frequency ris dec & [ stor* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fofilter"
                      [in center-frequency ris dec stor*]
                      *global*)]
    (new out-types ast)))

(s/fdef fofilter:a
  :args (s/cat :in valid-ar? :center-frequency valid-x? :ris valid-x? :dec valid-x? :stor* valid-i?* ))
(stest/instrument `fofilter:a)

(defn vosim
  {:arglists '([kamp kFund kForm kDecay kPulseCount kPulseFactor itable & iskip*])}
  [amp Fund Form Decay PulseCount PulseFactor table & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "vosim"
                      [amp Fund Form Decay PulseCount PulseFactor table skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef vosim
  :args (s/cat :amp valid-kr? :Fund valid-kr? :Form valid-kr? :Decay valid-kr? :PulseCount valid-kr? :PulseFactor valid-kr? :table valid-i? :skip* valid-i?* ))
(stest/instrument `vosim)

(defn vosim:a
  {:arglists '([kamp kFund kForm kDecay kPulseCount kPulseFactor itable & iskip*])}
  [amp Fund Form Decay PulseCount PulseFactor table & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "vosim"
                      [amp Fund Form Decay PulseCount PulseFactor table skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef vosim:a
  :args (s/cat :amp valid-kr? :Fund valid-kr? :Form valid-kr? :Decay valid-kr? :PulseCount valid-kr? :PulseFactor valid-kr? :table valid-i? :skip* valid-i?* ))
(stest/instrument `vosim:a)

(defn mrtmsg
  {:arglists '([imsgtype])}
  [msgtype]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "mrtmsg"
                      [msgtype]
                      *global*)]
    (new out-types ast)))

(s/fdef mrtmsg
  :args (s/cat :msgtype valid-i? ))
(stest/instrument `mrtmsg)

(defn foscili
  {:arglists '([xamp kcps xcar xmod kindex & itable* iphase*])}
  [amp cps car mod index & [ table* phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "foscili"
                      [amp cps car mod index table* phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef foscili
  :args (s/cat :amp valid-x? :cps valid-kr? :car valid-x? :mod valid-x? :index valid-kr? :table* valid-i?* :phase* valid-i?* ))
(stest/instrument `foscili)

(defn foscili:a
  {:arglists '([xamp kcps xcar xmod kindex & itable* iphase*])}
  [amp cps car mod index & [ table* phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "foscili"
                      [amp cps car mod index table* phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef foscili:a
  :args (s/cat :amp valid-x? :cps valid-kr? :car valid-x? :mod valid-x? :index valid-kr? :table* valid-i?* :phase* valid-i?* ))
(stest/instrument `foscili:a)

(defn tablexkt
  {:arglists '([xindex ktable kwarp iwsize & ixmode* ixoff* iwrap*])}
  [index table warp wsize & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tablexkt"
                      [index table warp wsize xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef tablexkt
  :args (s/cat :index valid-x? :table valid-kr? :warp valid-kr? :wsize valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* ))
(stest/instrument `tablexkt)

(defn tablexkt:a
  {:arglists '([xindex ktable kwarp iwsize & ixmode* ixoff* iwrap*])}
  [index table warp wsize & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tablexkt"
                      [index table warp wsize xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef tablexkt:a
  :args (s/cat :index valid-x? :table valid-kr? :warp valid-kr? :wsize valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* ))
(stest/instrument `tablexkt:a)

(defn outkat
  {:arglists '([kchn kvalue kmin kmax])}
  [chn value min max]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "outkat"
                      [chn value min max]
                      *global*)]
    (new out-types ast)))

(s/fdef outkat
  :args (s/cat :chn valid-kr? :value valid-kr? :min valid-kr? :max valid-kr? ))
(stest/instrument `outkat)

(defn vpowv_i
  {:arglists '([ifn1 ifn2 ielements & idstoffset* isrcoffset*])}
  [fn1 fn2 elements & [ dstoffset* srcoffset* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vpowv_i"
                      [fn1 fn2 elements dstoffset* srcoffset*]
                      *global*)]
    (new out-types ast)))

(s/fdef vpowv_i
  :args (s/cat :fn1 valid-i? :fn2 valid-i? :elements valid-i? :dstoffset* valid-i?* :srcoffset* valid-i?* ))
(stest/instrument `vpowv_i)

(defn tradsyn
  {:arglists '([fin kscal kpitch kmaxtracks itable & itable*])}
  [in scal pitch maxtracks table & [ table* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tradsyn"
                      [in scal pitch maxtracks table table*]
                      *global*)]
    (new out-types ast)))

(s/fdef tradsyn
  :args (s/cat :in valid-f? :scal valid-kr? :pitch valid-kr? :maxtracks valid-kr? :table valid-i? :table* valid-i?* ))
(stest/instrument `tradsyn)

(defn tradsyn:a
  {:arglists '([fin kscal kpitch kmaxtracks itable & itable*])}
  [in scal pitch maxtracks table & [ table* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tradsyn"
                      [in scal pitch maxtracks table table*]
                      *global*)]
    (new out-types ast)))

(s/fdef tradsyn:a
  :args (s/cat :in valid-f? :scal valid-kr? :pitch valid-kr? :maxtracks valid-kr? :table valid-i? :table* valid-i?* ))
(stest/instrument `tradsyn:a)

(defn ftom
  {:arglists '([ifreq] [kfreq])}
  [freq]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ftom"
                      [freq]
                      *global*)]
    (new out-types ast)))

(s/fdef ftom
  :args (s/alt
         :i (s/cat :freq valid-i? )
         ))
(stest/instrument `ftom)

(defn ftom:i
  {:arglists '([ifreq])}
  [freq]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "ftom"
                      [freq]
                      *global*)]
    (new out-types ast)))

(s/fdef ftom:i
  :args (s/cat :freq valid-i? ))
(stest/instrument `ftom:i)

(defn ftom:k
  {:arglists '([kfreq])}
  [freq]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "ftom"
                      [freq]
                      *global*)]
    (new out-types ast)))

(s/fdef ftom:k
  :args (s/cat :freq valid-kr? ))
(stest/instrument `ftom:k)

(defn polynomial
  {:arglists '([ain & karg1* karg2* karg3* karg4* karg5* karg6* karg7* karg8* karg9* karg10* karg11* karg12* karg13* karg14* karg15* karg16*])}
  [in & [ arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "polynomial"
                      [in arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16*]
                      *global*)]
    (new out-types ast)))

(s/fdef polynomial
  :args (s/cat :in valid-ar? :arg1* valid-kr?* :arg2* valid-kr?* :arg3* valid-kr?* :arg4* valid-kr?* :arg5* valid-kr?* :arg6* valid-kr?* :arg7* valid-kr?* :arg8* valid-kr?* :arg9* valid-kr?* :arg10* valid-kr?* :arg11* valid-kr?* :arg12* valid-kr?* :arg13* valid-kr?* :arg14* valid-kr?* :arg15* valid-kr?* :arg16* valid-kr?* ))
(stest/instrument `polynomial)

(defn polynomial:a
  {:arglists '([ain & karg1* karg2* karg3* karg4* karg5* karg6* karg7* karg8* karg9* karg10* karg11* karg12* karg13* karg14* karg15* karg16*])}
  [in & [ arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "polynomial"
                      [in arg1* arg2* arg3* arg4* arg5* arg6* arg7* arg8* arg9* arg10* arg11* arg12* arg13* arg14* arg15* arg16*]
                      *global*)]
    (new out-types ast)))

(s/fdef polynomial:a
  :args (s/cat :in valid-ar? :arg1* valid-kr?* :arg2* valid-kr?* :arg3* valid-kr?* :arg4* valid-kr?* :arg5* valid-kr?* :arg6* valid-kr?* :arg7* valid-kr?* :arg8* valid-kr?* :arg9* valid-kr?* :arg10* valid-kr?* :arg11* valid-kr?* :arg12* valid-kr?* :arg13* valid-kr?* :arg14* valid-kr?* :arg15* valid-kr?* :arg16* valid-kr?* ))
(stest/instrument `polynomial:a)

(defn strget
  {:arglists '([iindex])}
  [index]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "strget"
                      [index]
                      *global*)]
    (new out-types ast)))

(s/fdef strget
  :args (s/cat :index valid-i? ))
(stest/instrument `strget)

(defn strget:S
  {:arglists '([iindex])}
  [index]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "strget"
                      [index]
                      *global*)]
    (new out-types ast)))

(s/fdef strget:S
  :args (s/cat :index valid-i? ))
(stest/instrument `strget:S)

(defn comb
  {:arglists '([asig krvt ilpt & iskip* insmps*])}
  [sig rvt lpt & [ skip* nsmps* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "comb"
                      [sig rvt lpt skip* nsmps*]
                      *global*)]
    (new out-types ast)))

(s/fdef comb
  :args (s/cat :sig valid-ar? :rvt valid-kr? :lpt valid-i? :skip* valid-i?* :nsmps* valid-i?* ))
(stest/instrument `comb)

(defn comb:a
  {:arglists '([asig krvt ilpt & iskip* insmps*])}
  [sig rvt lpt & [ skip* nsmps* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "comb"
                      [sig rvt lpt skip* nsmps*]
                      *global*)]
    (new out-types ast)))

(s/fdef comb:a
  :args (s/cat :sig valid-ar? :rvt valid-kr? :lpt valid-i? :skip* valid-i?* :nsmps* valid-i?* ))
(stest/instrument `comb:a)

(defn button
  {:arglists '([knum])}
  [num]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "button"
                      [num]
                      *global*)]
    (new out-types ast)))

(s/fdef button
  :args (s/cat :num valid-kr? ))
(stest/instrument `button)

(defn button:k
  {:arglists '([knum])}
  [num]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "button"
                      [num]
                      *global*)]
    (new out-types ast)))

(s/fdef button:k
  :args (s/cat :num valid-kr? ))
(stest/instrument `button:k)

(defn zkcl
  {:arglists '([kfirst klast])}
  [first last]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "zkcl"
                      [first last]
                      *global*)]
    (new out-types ast)))

(s/fdef zkcl
  :args (s/cat :first valid-kr? :last valid-kr? ))
(stest/instrument `zkcl)

(defn tableshuffle
  {:arglists '([kitablenum])}
  [itablenum]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "tableshuffle"
                      [itablenum]
                      *global*)]
    (new out-types ast)))

(s/fdef tableshuffle
  :args (s/cat :itablenum valid-kr? ))
(stest/instrument `tableshuffle)

(defn remoteport
  {:arglists '([iportnum])}
  [portnum]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "remoteport"
                      [portnum]
                      *global*)]
    (new out-types ast)))

(s/fdef remoteport
  :args (s/cat :portnum valid-i? ))
(stest/instrument `remoteport)

(defn cosinv
  {:arglists '([aarg1] [iarg1] [iarg1Arr] [karg1] [karg1Arr])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "cosinv"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef cosinv
  :args (s/alt
         :a (s/cat :arg1 valid-ar? )
         ))
(stest/instrument `cosinv)

(defn cosinv:a
  {:arglists '([aarg1])}
  [arg1]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "cosinv"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef cosinv:a
  :args (s/cat :arg1 valid-ar? ))
(stest/instrument `cosinv:a)

(defn cosinv:i
  {:arglists '([iarg1])}
  [arg1]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "cosinv"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef cosinv:i
  :args (s/cat :arg1 valid-i? ))
(stest/instrument `cosinv:i)

(defn cosinv:iArr
  {:arglists '([iarg1Arr])}
  [arg1]
  (let [out-types-quoted 'VariableArray
        out-types VariableArray
        ast (ast-node out-types-quoted
                      "cosinv"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef cosinv:iArr
  :args (s/cat :arg1 valid-iArr? ))
(stest/instrument `cosinv:iArr)

(defn cosinv:k
  {:arglists '([karg1])}
  [arg1]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "cosinv"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef cosinv:k
  :args (s/cat :arg1 valid-kr? ))
(stest/instrument `cosinv:k)

(defn cosinv:kArr
  {:arglists '([karg1Arr])}
  [arg1]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "cosinv"
                      [arg1]
                      *global*)]
    (new out-types ast)))

(s/fdef cosinv:kArr
  :args (s/cat :arg1 valid-kArr? ))
(stest/instrument `cosinv:kArr)

(defn filevalid
  {:arglists '([Sfilcod] [ifilcod])}
  [filcod]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "filevalid"
                      [filcod]
                      *global*)]
    (new out-types ast)))

(s/fdef filevalid
  :args (s/alt
         :S (s/cat :filcod valid-S? )
         ))
(stest/instrument `filevalid)

(defn filevalid:i
  {:arglists '([Sfilcod] [ifilcod])}
  [filcod]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "filevalid"
                      [filcod]
                      *global*)]
    (new out-types ast)))

(s/fdef filevalid:i
  :args (s/alt
         :S (s/cat :filcod valid-S? )
         ))
(stest/instrument `filevalid:i)

(defn tabplay
  {:arglists '([ktrig knumtics ktable & kout1* kout2* koutN3* koutN4* koutN5* koutN6* koutN7* koutN8* koutN9* koutN10* koutN11* koutN12* koutN13* koutN14* koutN15* koutN16*])}
  [trig numtics table & [ out1* out2* outN3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "tabplay"
                      [trig numtics table out1* out2* outN3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef tabplay
  :args (s/cat :trig valid-kr? :numtics valid-kr? :table valid-kr? :out1* valid-kr?* :out2* valid-kr?* :outN3* valid-kr?* :outN4* valid-kr?* :outN5* valid-kr?* :outN6* valid-kr?* :outN7* valid-kr?* :outN8* valid-kr?* :outN9* valid-kr?* :outN10* valid-kr?* :outN11* valid-kr?* :outN12* valid-kr?* :outN13* valid-kr?* :outN14* valid-kr?* :outN15* valid-kr?* :outN16* valid-kr?* ))
(stest/instrument `tabplay)

(defn biquad
  {:arglists '([asig kb2 kb3 kb4 ka5 ka6 ka7 & iskip*])}
  [sig b2 b3 b4 a5 a6 a7 & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "biquad"
                      [sig b2 b3 b4 a5 a6 a7 skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef biquad
  :args (s/cat :sig valid-ar? :b2 valid-kr? :b3 valid-kr? :b4 valid-kr? :a5 valid-kr? :a6 valid-kr? :a7 valid-kr? :skip* valid-i?* ))
(stest/instrument `biquad)

(defn biquad:a
  {:arglists '([asig kb2 kb3 kb4 ka5 ka6 ka7 & iskip*])}
  [sig b2 b3 b4 a5 a6 a7 & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "biquad"
                      [sig b2 b3 b4 a5 a6 a7 skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef biquad:a
  :args (s/cat :sig valid-ar? :b2 valid-kr? :b3 valid-kr? :b4 valid-kr? :a5 valid-kr? :a6 valid-kr? :a7 valid-kr? :skip* valid-i?* ))
(stest/instrument `biquad:a)

(defn sleighbells
  {:arglists '([kamp idettack & inum* idamp* imaxshake* ifreq* ifreq1* ifreq1*])}
  [amp dettack & [ num* damp* maxshake* freq* freq1* freq1* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sleighbells"
                      [amp dettack num* damp* maxshake* freq* freq1* freq1*]
                      *global*)]
    (new out-types ast)))

(s/fdef sleighbells
  :args (s/cat :amp valid-kr? :dettack valid-i? :num* valid-i?* :damp* valid-i?* :maxshake* valid-i?* :freq* valid-i?* :freq1* valid-i?* :freq1* valid-i?* ))
(stest/instrument `sleighbells)

(defn sleighbells:a
  {:arglists '([kamp idettack & inum* idamp* imaxshake* ifreq* ifreq1* ifreq1*])}
  [amp dettack & [ num* damp* maxshake* freq* freq1* freq1* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "sleighbells"
                      [amp dettack num* damp* maxshake* freq* freq1* freq1*]
                      *global*)]
    (new out-types ast)))

(s/fdef sleighbells:a
  :args (s/cat :amp valid-kr? :dettack valid-i? :num* valid-i?* :damp* valid-i?* :maxshake* valid-i?* :freq* valid-i?* :freq1* valid-i?* :freq1* valid-i?* ))
(stest/instrument `sleighbells:a)

(defn in
  {:arglists '( )}
  []
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "in"
                      []
                      *global*)]
    (new out-types ast)))


(defn in:a
  {:arglists '()}
  []
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "in"
                      []
                      *global*)]
    (new out-types ast)))


(defn in:aArr
  {:arglists '()}
  []
  (let [out-types-quoted 'AudioArray
        out-types AudioArray
        ast (ast-node out-types-quoted
                      "in"
                      []
                      *global*)]
    (new out-types ast)))


(defn getseed
  {:arglists '( )}
  []
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "getseed"
                      []
                      *global*)]
    (new out-types ast)))


(defn getseed:i
  {:arglists '()}
  []
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "getseed"
                      []
                      *global*)]
    (new out-types ast)))


(defn getseed:k
  {:arglists '()}
  []
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "getseed"
                      []
                      *global*)]
    (new out-types ast)))


(defn strlowerk
  {:arglists '([Ssrc])}
  [src]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "strlowerk"
                      [src]
                      *global*)]
    (new out-types ast)))

(s/fdef strlowerk
  :args (s/cat :src valid-S? ))
(stest/instrument `strlowerk)

(defn strlowerk:S
  {:arglists '([Ssrc])}
  [src]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "strlowerk"
                      [src]
                      *global*)]
    (new out-types ast)))

(s/fdef strlowerk:S
  :args (s/cat :src valid-S? ))
(stest/instrument `strlowerk:S)

(defn passign
  {:arglists '([& istart*])}
  [& [ start* ]]
  (let [out-types-quoted '[                       ]
        out-types [                       ]
        ast (ast-node out-types-quoted
                      "passign"
                      [start*]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef passign
  :args (s/cat :start* valid-i?* ))
(stest/instrument `passign)

(defn fmmetal
  {:arglists '([kamp kfreq kc3 kc4 kvdepth kvrate ifn7 ifn8 ifn9 ifn10 ivfn])}
  [amp freq c3 c4 vdepth vrate fn7 fn8 fn9 fn10 vfn]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fmmetal"
                      [amp freq c3 c4 vdepth vrate fn7 fn8 fn9 fn10 vfn]
                      *global*)]
    (new out-types ast)))

(s/fdef fmmetal
  :args (s/cat :amp valid-kr? :freq valid-kr? :c3 valid-kr? :c4 valid-kr? :vdepth valid-kr? :vrate valid-kr? :fn7 valid-i? :fn8 valid-i? :fn9 valid-i? :fn10 valid-i? :vfn valid-i? ))
(stest/instrument `fmmetal)

(defn fmmetal:a
  {:arglists '([kamp kfreq kc3 kc4 kvdepth kvrate ifn7 ifn8 ifn9 ifn10 ivfn])}
  [amp freq c3 c4 vdepth vrate fn7 fn8 fn9 fn10 vfn]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "fmmetal"
                      [amp freq c3 c4 vdepth vrate fn7 fn8 fn9 fn10 vfn]
                      *global*)]
    (new out-types ast)))

(s/fdef fmmetal:a
  :args (s/cat :amp valid-kr? :freq valid-kr? :c3 valid-kr? :c4 valid-kr? :vdepth valid-kr? :vrate valid-kr? :fn7 valid-i? :fn8 valid-i? :fn9 valid-i? :fn10 valid-i? :vfn valid-i? ))
(stest/instrument `fmmetal:a)

(defn cepsinv
  {:arglists '([kepsArr])}
  [eps]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "cepsinv"
                      [eps]
                      *global*)]
    (new out-types ast)))

(s/fdef cepsinv
  :args (s/cat :eps valid-kArr? ))
(stest/instrument `cepsinv)

(defn cepsinv:kArr
  {:arglists '([kepsArr])}
  [eps]
  (let [out-types-quoted 'ControlArray
        out-types ControlArray
        ast (ast-node out-types-quoted
                      "cepsinv"
                      [eps]
                      *global*)]
    (new out-types ast)))

(s/fdef cepsinv:kArr
  :args (s/cat :eps valid-kArr? ))
(stest/instrument `cepsinv:kArr)

(defn foutir
  {:arglists '([ihandle iformat iflag & iout1* iout2* iout3* ioutN4* ioutN5* ioutN6* ioutN7* ioutN8* ioutN9* ioutN10* ioutN11* ioutN12* ioutN13* ioutN14* ioutN15* ioutN16*])}
  [handle format flag & [ out1* out2* out3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "foutir"
                      [handle format flag out1* out2* out3* outN4* outN5* outN6* outN7* outN8* outN9* outN10* outN11* outN12* outN13* outN14* outN15* outN16*]
                      *global*)]
    (new out-types ast)))

(s/fdef foutir
  :args (s/cat :handle valid-i? :format valid-i? :flag valid-i? :out1* valid-i?* :out2* valid-i?* :out3* valid-i?* :outN4* valid-i?* :outN5* valid-i?* :outN6* valid-i?* :outN7* valid-i?* :outN8* valid-i?* :outN9* valid-i?* :outN10* valid-i?* :outN11* valid-i?* :outN12* valid-i?* :outN13* valid-i?* :outN14* valid-i?* :outN15* valid-i?* :outN16* valid-i?* ))
(stest/instrument `foutir)

(defn strcat
  {:arglists '([Ssrc1 Ssrc2])}
  [src1 src2]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "strcat"
                      [src1 src2]
                      *global*)]
    (new out-types ast)))

(s/fdef strcat
  :args (s/cat :src1 valid-S? :src2 valid-S? ))
(stest/instrument `strcat)

(defn strcat:S
  {:arglists '([Ssrc1 Ssrc2])}
  [src1 src2]
  (let [out-types-quoted 'String
        out-types String
        ast (ast-node out-types-quoted
                      "strcat"
                      [src1 src2]
                      *global*)]
    (new out-types ast)))

(s/fdef strcat:S
  :args (s/cat :src1 valid-S? :src2 valid-S? ))
(stest/instrument `strcat:S)

(defn pvswarp
  {:arglists '([fsigin kscal kshift & klowest* kmeth* kgain* kcoefs*])}
  [sigin scal shift & [ lowest* meth* gain* coefs* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvswarp"
                      [sigin scal shift lowest* meth* gain* coefs*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvswarp
  :args (s/cat :sigin valid-f? :scal valid-kr? :shift valid-kr? :lowest* valid-kr?* :meth* valid-kr?* :gain* valid-kr?* :coefs* valid-kr?* ))
(stest/instrument `pvswarp)

(defn pvswarp:f
  {:arglists '([fsigin kscal kshift & klowest* kmeth* kgain* kcoefs*])}
  [sigin scal shift & [ lowest* meth* gain* coefs* ]]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "pvswarp"
                      [sigin scal shift lowest* meth* gain* coefs*]
                      *global*)]
    (new out-types ast)))

(s/fdef pvswarp:f
  :args (s/cat :sigin valid-f? :scal valid-kr? :shift valid-kr? :lowest* valid-kr?* :meth* valid-kr?* :gain* valid-kr?* :coefs* valid-kr?* ))
(stest/instrument `pvswarp:f)

(defn clfilt
  {:arglists '([asig kfreq itype inpol & ikind* ipbr* isba* iskip*])}
  [sig freq type npol & [ kind* pbr* sba* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "clfilt"
                      [sig freq type npol kind* pbr* sba* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef clfilt
  :args (s/cat :sig valid-ar? :freq valid-kr? :type valid-i? :npol valid-i? :kind* valid-i?* :pbr* valid-i?* :sba* valid-i?* :skip* valid-i?* ))
(stest/instrument `clfilt)

(defn clfilt:a
  {:arglists '([asig kfreq itype inpol & ikind* ipbr* isba* iskip*])}
  [sig freq type npol & [ kind* pbr* sba* skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "clfilt"
                      [sig freq type npol kind* pbr* sba* skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef clfilt:a
  :args (s/cat :sig valid-ar? :freq valid-kr? :type valid-i? :npol valid-i? :kind* valid-i?* :pbr* valid-i?* :sba* valid-i?* :skip* valid-i?* ))
(stest/instrument `clfilt:a)

(defn endop
  {:arglists '()}
  []
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "endop"
                      []
                      *global*)]
    (new out-types ast)))


(defn cmp
  {:arglists '([aL S_operator aR] [aL S_operator kR])}
  [L _operator R]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "cmp"
                      [L _operator R]
                      *global*)]
    (new out-types ast)))

(s/fdef cmp
  :args (s/alt
         :aSa (s/cat :L valid-ar? :_operator valid-S? :R valid-ar? )
         ))
(stest/instrument `cmp)

(defn cmp:a
  {:arglists '([aL S_operator aR] [aL S_operator kR])}
  [L _operator R]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "cmp"
                      [L _operator R]
                      *global*)]
    (new out-types ast)))

(s/fdef cmp:a
  :args (s/alt
         :aSa (s/cat :L valid-ar? :_operator valid-S? :R valid-ar? )
         ))
(stest/instrument `cmp:a)

(defn tablei
  {:arglists '([xindex itable & ixmode* ixoff* iwrap*] [iindex itable & ixmode* ixoff* iwrap*] [xindex itable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tablei"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef tablei
  :args (s/alt
         :xiiii (s/cat :index valid-x? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* )
         ))
(stest/instrument `tablei)

(defn tablei:a
  {:arglists '([xindex itable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "tablei"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef tablei:a
  :args (s/cat :index valid-x? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* ))
(stest/instrument `tablei:a)

(defn tablei:i
  {:arglists '([iindex itable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'Variable
        out-types Variable
        ast (ast-node out-types-quoted
                      "tablei"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef tablei:i
  :args (s/cat :index valid-i? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* ))
(stest/instrument `tablei:i)

(defn tablei:k
  {:arglists '([xindex itable & ixmode* ixoff* iwrap*])}
  [index table & [ xmode* xoff* wrap* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "tablei"
                      [index table xmode* xoff* wrap*]
                      *global*)]
    (new out-types ast)))

(s/fdef tablei:k
  :args (s/cat :index valid-x? :table valid-i? :xmode* valid-i?* :xoff* valid-i?* :wrap* valid-i?* ))
(stest/instrument `tablei:k)

(defn vmap
  {:arglists '([ifn1 ifn2 ielements & idstoffset* isrcoffset*])}
  [fn1 fn2 elements & [ dstoffset* srcoffset* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "vmap"
                      [fn1 fn2 elements dstoffset* srcoffset*]
                      *global*)]
    (new out-types ast)))

(s/fdef vmap
  :args (s/cat :fn1 valid-i? :fn2 valid-i? :elements valid-i? :dstoffset* valid-i?* :srcoffset* valid-i?* ))
(stest/instrument `vmap)

(defn ftmorf
  {:arglists '([kftndx iftfn iresfn])}
  [ftndx ftfn resfn]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "ftmorf"
                      [ftndx ftfn resfn]
                      *global*)]
    (new out-types ast)))

(s/fdef ftmorf
  :args (s/cat :ftndx valid-kr? :ftfn valid-i? :resfn valid-i? ))
(stest/instrument `ftmorf)

(defn jacktransport
  {:arglists '([icommand & ilocation*])}
  [command & [ location* ]]
  (let [out-types-quoted 'IO
        out-types IO
        ast (ast-node out-types-quoted
                      "jacktransport"
                      [command location*]
                      *global*)]
    (new out-types ast)))

(s/fdef jacktransport
  :args (s/cat :command valid-i? :location* valid-i?* ))
(stest/instrument `jacktransport)

(defn barmodel
  {:arglists '([kbcL kbcR iK ib kscan iT6 ipos ivel iwid])}
  [bcL bcR K b scan T6 pos vel wid]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "barmodel"
                      [bcL bcR K b scan T6 pos vel wid]
                      *global*)]
    (new out-types ast)))

(s/fdef barmodel
  :args (s/cat :bcL valid-kr? :bcR valid-kr? :K valid-i? :b valid-i? :scan valid-kr? :T6 valid-i? :pos valid-i? :vel valid-i? :wid valid-i? ))
(stest/instrument `barmodel)

(defn barmodel:a
  {:arglists '([kbcL kbcR iK ib kscan iT6 ipos ivel iwid])}
  [bcL bcR K b scan T6 pos vel wid]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "barmodel"
                      [bcL bcR K b scan T6 pos vel wid]
                      *global*)]
    (new out-types ast)))

(s/fdef barmodel:a
  :args (s/cat :bcL valid-kr? :bcR valid-kr? :K valid-i? :b valid-i? :scan valid-kr? :T6 valid-i? :pos valid-i? :vel valid-i? :wid valid-i? ))
(stest/instrument `barmodel:a)

(defn randh
  {:arglists '([xamp xcps iseed & isize* ioffset*] [xamp xcps iseed & isize* ioffset*])}
  [amp cps seed & [ size* offset* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "randh"
                      [amp cps seed size* offset*]
                      *global*)]
    (new out-types ast)))

(s/fdef randh
  :args (s/alt
         :xxiii (s/cat :amp valid-x? :cps valid-x? :seed valid-i? :size* valid-i?* :offset* valid-i?* )
         ))
(stest/instrument `randh)

(defn randh:a
  {:arglists '([xamp xcps iseed & isize* ioffset*])}
  [amp cps seed & [ size* offset* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "randh"
                      [amp cps seed size* offset*]
                      *global*)]
    (new out-types ast)))

(s/fdef randh:a
  :args (s/cat :amp valid-x? :cps valid-x? :seed valid-i? :size* valid-i?* :offset* valid-i?* ))
(stest/instrument `randh:a)

(defn randh:k
  {:arglists '([xamp xcps iseed & isize* ioffset*])}
  [amp cps seed & [ size* offset* ]]
  (let [out-types-quoted 'ControlSignal
        out-types ControlSignal
        ast (ast-node out-types-quoted
                      "randh"
                      [amp cps seed size* offset*]
                      *global*)]
    (new out-types ast)))

(s/fdef randh:k
  :args (s/cat :amp valid-x? :cps valid-x? :seed valid-i? :size* valid-i?* :offset* valid-i?* ))
(stest/instrument `randh:k)

(defn pvsbuffer
  {:arglists '([fsig ilen])}
  [sig len]
  (let [out-types-quoted '[Variable ControlSignal]
        out-types [Variable ControlSignal]
        ast (ast-node out-types-quoted
                      "pvsbuffer"
                      [sig len]
                      *global*)]
    (mapv #(new %1 %2) out-types ast)))

(s/fdef pvsbuffer
  :args (s/cat :sig valid-f? :len valid-i? ))
(stest/instrument `pvsbuffer)

(defn median
  {:arglists '([asig ksize imaxsize & iskip*])}
  [sig size maxsize & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "median"
                      [sig size maxsize skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef median
  :args (s/cat :sig valid-ar? :size valid-kr? :maxsize valid-i? :skip* valid-i?* ))
(stest/instrument `median)

(defn median:a
  {:arglists '([asig ksize imaxsize & iskip*])}
  [sig size maxsize & [ skip* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "median"
                      [sig size maxsize skip*]
                      *global*)]
    (new out-types ast)))

(s/fdef median:a
  :args (s/cat :sig valid-ar? :size valid-kr? :maxsize valid-i? :skip* valid-i?* ))
(stest/instrument `median:a)

(defn lposcila
  {:arglists '([aamp kfreqratio kloop kend ift & iphase*])}
  [amp freqratio loop end ft & [ phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "lposcila"
                      [amp freqratio loop end ft phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef lposcila
  :args (s/cat :amp valid-ar? :freqratio valid-kr? :loop valid-kr? :end valid-kr? :ft valid-i? :phase* valid-i?* ))
(stest/instrument `lposcila)

(defn lposcila:a
  {:arglists '([aamp kfreqratio kloop kend ift & iphase*])}
  [amp freqratio loop end ft & [ phase* ]]
  (let [out-types-quoted 'AudioSignal
        out-types AudioSignal
        ast (ast-node out-types-quoted
                      "lposcila"
                      [amp freqratio loop end ft phase*]
                      *global*)]
    (new out-types ast)))

(s/fdef lposcila:a
  :args (s/cat :amp valid-ar? :freqratio valid-kr? :loop valid-kr? :end valid-kr? :ft valid-i? :phase* valid-i?* ))
(stest/instrument `lposcila:a)

(defn trfilter
  {:arglists '([fin kamnt itable])}
  [in amnt table]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "trfilter"
                      [in amnt table]
                      *global*)]
    (new out-types ast)))

(s/fdef trfilter
  :args (s/cat :in valid-f? :amnt valid-kr? :table valid-i? ))
(stest/instrument `trfilter)

(defn trfilter:f
  {:arglists '([fin kamnt itable])}
  [in amnt table]
  (let [out-types-quoted 'FrequencySignal
        out-types FrequencySignal
        ast (ast-node out-types-quoted
                      "trfilter"
                      [in amnt table]
                      *global*)]
    (new out-types ast)))

(s/fdef trfilter:f
  :args (s/cat :in valid-f? :amnt valid-kr? :table valid-i? ))
(stest/instrument `trfilter:f)
